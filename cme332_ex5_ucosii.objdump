
cme332_ex5_ucosii.elf:     file format elf32-littlenios2
cme332_ex5_ucosii.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011370 memsz 0x00011370 flags r-x
    LOAD off    0x00012390 vaddr 0x00011390 paddr 0x000131c0 align 2**12
         filesz 0x00001e30 memsz 0x00001e30 flags rw-
    LOAD off    0x00014ff0 vaddr 0x00014ff0 paddr 0x00014ff0 align 2**12
         filesz 0x00000000 memsz 0x0000946c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010de0  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000368  00011028  00011028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e30  00011390  000131c0  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000946c  00014ff0  00014ff0  00014ff0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001e45c  0001e45c  000141c0  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  000141c0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c38  00000000  00000000  000141e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000233b8  00000000  00000000  00014e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008454  00000000  00000000  000381d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a148  00000000  00000000  0004062c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000305c  00000000  00000000  0004a774  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004575  00000000  00000000  0004d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  00051d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00056794  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000698  00000000  00000000  000567b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0005bbf5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005bbfb  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005bc00  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005bc01  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005bc02  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005bc06  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005bc0a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005bc0e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005bc17  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005bc20  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0005bc29  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005b  00000000  00000000  0005bc38  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  0005bc93  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00011028 l    d  .rodata	00000000 .rodata
00011390 l    d  .rwdata	00000000 .rwdata
00014ff0 l    d  .bss	00000000 .bss
0001e45c l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cme332_ex5_ucosii_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 binary_game.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000015a4 l     F .text	00000008 __fp_unlock
000015b8 l     F .text	0000019c __sinit.part.1
00001754 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000113b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00004200 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000430c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00004338 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004424 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00004504 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000045f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000047bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013134 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004a08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00013138 l     O .rwdata	00000004 lockid
0001503c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001313c l     O .rwdata	00000004 lockid
00015044 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00006438 l     F .text	00000048 OS_InitMisc
00006480 l     F .text	0000006c OS_InitRdyList
000065ec l     F .text	000000e4 OS_InitTCBList
00006358 l     F .text	000000e0 OS_InitEventList
000064ec l     F .text	00000080 OS_InitTaskIdle
0000656c l     F .text	00000080 OS_InitTaskStat
0000685c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0000857c l     F .text	000000f4 OS_FlagTaskRdy
0000833c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d0f4 l     F .text	00000034 alt_dev_reg
00011d8c l     O .rwdata	0000106c JTAG_UART
00012df8 l     O .rwdata	00000030 AV_Config
00012e28 l     O .rwdata	00000030 Audio_Subsystem_Audio
00012e58 l     O .rwdata	0000002c Char_LCD_16x2
00012e84 l     O .rwdata	0000002c IrDA
00012eb0 l     O .rwdata	00000038 PS2_Port
00012ee8 l     O .rwdata	00000038 PS2_Port_Dual
00012f20 l     O .rwdata	0000002c Serial_Port
00012f4c l     O .rwdata	00000034 USB
00012f80 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00012fdc l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
00013038 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00013094 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
000130d8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000dd6c l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000e014 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e7f0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fcec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ff50 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010210 l     F .text	0000003c alt_get_errno
0001024c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000150a8 g     O .bss	00000004 alt_instruction_exception_handler
0001318a g     O .rwdata	00000002 OSTaskNameSize
00003ff8 g     F .text	00000054 _isatty_r
00004700 g     F .text	000000bc alt_main
000013c0 g     F .text	000000c0 _puts_r
0001e35c g     O .bss	00000100 alt_irq
0000f3ac g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00003d20 g     F .text	00000060 _lseek_r
00009864 g     F .text	000000cc OS_MemInit
000131c0 g       *ABS*	00000000 __flash_rwdata_start
0000d094 g     F .text	00000060 OSTimeSet
0000e954 g     F .text	00000040 alt_up_character_lcd_send_cmd
000011ec g     F .text	000001d4 button_press_task
000050ac g     F .text	00000610 OSEventPendMulti
0001e45c g       *ABS*	00000000 __alt_heap_start
00010858 g     F .text	00000024 OSTaskCreateHook
00013162 g     O .rwdata	00000002 OSMboxEn
00005714 g     F .text	0000004c OSIntEnter
00000284 g     F .text	0000003c display_hex
000032d4 g     F .text	0000005c __sseek
000018f4 g     F .text	00000010 __sinit
0000f1c4 g     F .text	00000034 read_CE_bit
00013172 g     O .rwdata	00000002 OSQEn
0000175c g     F .text	00000068 __sfmoreglue
00004d80 g     F .text	000000cc __malloc_unlock
000108c0 g     F .text	00000020 OSTaskStatHook
0000f54c g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0000fa40 g     F .text	00000090 alt_up_rs232_read_fd
0001504c g     O .bss	00000001 OSLockNesting
000131b0 g     O .rwdata	00000002 OSDataSize
0001504d g     O .bss	00000001 OSRunning
000029c0 g     F .text	0000015c memmove
00010900 g     F .text	00000020 OSInitHookBegin
000131a8 g     O .rwdata	00000002 OSTmrSize
000018dc g     F .text	00000018 _cleanup
00015050 g     O .bss	00000004 OSIdleCtr
00010608 g     F .text	00000024 altera_nios2_gen2_irq_init
000106d8 g       .text	00000000 OSStartTsk
0000e8e0 g     F .text	00000074 get_DDRAM_addr
00006b9c g     F .text	000002d4 OS_TCBInit
000003c8 g     F .text	00000038 check_answer_add_point
00000000 g     F .entry	0000001c __reset
000131ae g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001314e g     O .rwdata	00000002 OSEventSize
00015054 g     O .bss	00000001 OSPrioHighRdy
00003f9c g     F .text	0000005c _fstat_r
0001087c g     F .text	00000024 OSTaskDelHook
00015028 g     O .bss	00000004 errno
00003250 g     F .text	00000008 __seofread
000106b8 g       .text	00000000 OSStartHighRdy
0000bb30 g     F .text	000001e4 OSTaskCreateExt
000150d4 g     O .bss	00001000 machineStateTask_stk
00007e84 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001318e g     O .rwdata	00000002 OSTaskStatStkSize
00007000 g     F .text	00000308 OSFlagAccept
00009e9c g     F .text	000000b8 OSQFlush
00009930 g     F .text	00000140 OSQAccept
00015034 g     O .bss	00000004 alt_argv
0001b104 g       *ABS*	00000000 _gp
00000390 g     F .text	00000038 reset
0000b984 g     F .text	000001ac OSTaskCreate
0000b494 g     F .text	000004f0 OSTaskChangePrio
000002ec g     F .text	0000004c check_power_flag
00015048 g     O .bss	00000004 alt_heapsem
000160d4 g     O .bss	00001000 countTask_stk
00006e70 g     F .text	00000190 OSDebugInit
0000bd14 g     F .text	00000344 OSTaskDel
00011c0c g     O .rwdata	00000180 alt_fd_list
000170d4 g     O .bss	00001000 display_LEDR_task_stk
0001b138 g     O .bss	00000370 OSFlagTbl
00014ffc g     O .bss	00000004 number_of_question
00006138 g     F .text	000000b8 OS_EventTaskRemove
0000fe8c g     F .text	00000090 alt_find_dev
00002878 g     F .text	00000148 memcpy
00013178 g     O .rwdata	00000002 OSRdyTblSize
0000eafc g     F .text	00000050 alt_up_character_lcd_write_fd
000015ac g     F .text	0000000c _cleanup_r
00000510 g     F .text	000000e4 mainTask
00010014 g     F .text	0000007c alt_io_redirect
00011028 g       *ABS*	00000000 __DTOR_END__
0000f094 g     F .text	00000090 alt_up_irda_write_fd
0000f9cc g     F .text	00000074 alt_up_rs232_read_data
00001480 g     F .text	00000014 puts
00010bf8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004e4c g     F .text	00000120 OSEventNameGet
0001315c g     O .rwdata	00000002 OSFlagMax
00005760 g     F .text	000000f8 OSIntExit
00013196 g     O .rwdata	00000002 OSTCBSize
00015055 g     O .bss	00000001 OSPrioCur
0000ee90 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000e270 g     F .text	000002bc altera_avalon_jtag_uart_read
00004144 g     F .text	00000064 .hidden __udivsi3
00004460 g     F .text	000000a4 isatty
0001317c g     O .rwdata	00000002 OSStkWidth
00013170 g     O .rwdata	00000002 OSPtrSize
00013150 g     O .rwdata	00000002 OSEventTblSize
0000ee30 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0001062c g       .text	00000000 OSCtxSw
00010b68 g     F .text	00000090 alt_icache_flush
00015024 g     O .bss	00000004 __malloc_top_pad
00015058 g     O .bss	00000004 OSTCBList
0001502c g     O .bss	00000004 alt_fd_list_lock
00000468 g     F .text	00000048 count_elapse
00001944 g     F .text	000004bc __sfvwrite_r
0001b4a8 g     O .bss	00000c30 OSMemTbl
0001505c g     O .bss	00000001 OSTickStepState
000031a8 g     F .text	00000054 _sbrk_r
00013174 g     O .rwdata	00000002 OSQMax
0001c0d8 g     O .bss	00000800 OSTaskStatStk
000094a0 g     F .text	000000f0 OSMemNameGet
00013154 g     O .rwdata	00000002 OSFlagEn
00003f3c g     F .text	00000060 _read_r
0001319a g     O .rwdata	00000002 OSTimeTickHookEn
0000a34c g     F .text	00000168 OSQPost
00008670 g     F .text	000000a4 OS_FlagUnlink
0001312c g     O .rwdata	00000004 alt_max_fd
0000f948 g     F .text	00000044 alt_up_rs232_check_parity
00006724 g     F .text	00000068 OS_MemCopy
0000678c g     F .text	000000d0 OS_Sched
00003540 g     F .text	000000f0 _fclose_r
000093b0 g     F .text	000000f0 OSMemGet
000090cc g     F .text	00000110 OSMboxQuery
00015000 g     O .bss	00000004 question
0000c340 g     F .text	000001b4 OSTaskNameSet
0000f1f8 g     F .text	00000030 read_num_bytes_available
000038bc g     F .text	00000030 fflush
00015020 g     O .bss	00000004 __malloc_max_sbrked_mem
00015060 g     O .bss	00000004 OSCtxSwCtr
000108e0 g     F .text	00000020 OSTimeTickHook
00010090 g     F .text	00000180 alt_irq_register
0001315e g     O .rwdata	00000002 OSFlagNameSize
0000f160 g     F .text	00000034 read_RI_bit
00014ff0 g     O .bss	00000004 point
000061f0 g     F .text	00000100 OS_EventTaskRemoveMulti
00005fe8 g     F .text	00000150 OS_EventTaskWaitMulti
00013176 g     O .rwdata	00000002 OSQSize
0000462c g     F .text	000000d4 lseek
0000adfc g     F .text	0000020c OSSemPend
0001310c g     O .rwdata	00000004 _global_impure_ptr
00002c44 g     F .text	00000564 _realloc_r
00013160 g     O .rwdata	00000002 OSLowestPrio
0001e45c g       *ABS*	00000000 __bss_end
00010960 g     F .text	00000024 OSTCBInitHook
000131a6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00010500 g     F .text	00000108 alt_tick
00008e60 g     F .text	00000110 OSMboxPost
00013148 g     O .rwdata	00000002 OSEventEn
000131a2 g     O .rwdata	00000002 OSTmrCfgNameSize
00015004 g     O .bss	00000001 mailBoxErr
0000f25c g     F .text	0000002c read_data_byte
00001914 g     F .text	00000018 __fp_lock_all
000180d4 g     O .bss	00001000 display_task_HEX_task_stk
0000849c g     F .text	000000e0 OS_FlagInit
00013108 g     O .rwdata	00000004 state
00010464 g     F .text	0000009c alt_alarm_stop
00014ff4 g     O .bss	00000004 elapse_time
0000f194 g     F .text	00000030 read_RE_bit
00013184 g     O .rwdata	00000002 OSTaskIdleStkSize
0001509c g     O .bss	00000004 alt_irq_active
0000aa34 g     F .text	000000b0 OSSemAccept
000096a4 g     F .text	000000d8 OSMemPut
000091dc g     F .text	000001d4 OSMemCreate
00015064 g     O .bss	00000004 OSIdleCtrMax
0000eed0 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
00011be4 g     O .rwdata	00000028 alt_dev_null
00013198 g     O .rwdata	00000002 OSTicksPerSec
0000ed9c g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001062c g       .text	00000000 OSIntCtxSw
0000f40c g     F .text	00000074 alt_up_ps2_write_data_byte
0000fccc g     F .text	00000020 alt_dcache_flush_all
00015068 g     O .bss	00000004 OSTCBFreeList
000131c0 g       *ABS*	00000000 __ram_rwdata_end
0000b008 g     F .text	0000016c OSSemPendAbort
00013124 g     O .rwdata	00000008 alt_dev_list
00004a44 g     F .text	000000f8 write
0001319c g     O .rwdata	00000002 OSVersionNbr
00011390 g       *ABS*	00000000 __ram_rodata_end
00004374 g     F .text	000000b0 fstat
0000fad0 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00013144 g     O .rwdata	00000004 OSEndiannessTest
000041a8 g     F .text	00000058 .hidden __umodsi3
00013156 g     O .rwdata	00000002 OSFlagGrpSize
0001e45c g       *ABS*	00000000 end
0000f73c g     F .text	00000098 alt_up_ps2_write_fd
0000ef0c g     F .text	00000044 alt_up_irda_check_parity
0000dc30 g     F .text	0000013c altera_avalon_jtag_uart_init
000069f4 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00000abc g     F .text	00000730 display_task_HEX_task
00011028 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000e86c g     F .text	00000074 alt_avalon_timer_sc_init
0000e52c g     F .text	000002c4 altera_avalon_jtag_uart_write
00001904 g     F .text	00000004 __sfp_lock_acquire
00002794 g     F .text	000000e4 memchr
000066d0 g     F .text	00000054 OS_MemClr
0000ea08 g     F .text	0000007c alt_up_character_lcd_write
000106fc g     F .text	0000015c OSTaskStkInit
00003a10 g     F .text	00000310 _free_r
00005d40 g     F .text	00000198 OS_EventTaskRdy
00010e74 g     F .text	00000180 __call_exitprocs
0001506c g     O .bss	00000001 OSCPUUsage
00013114 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
000150a0 g     O .bss	00000004 _alt_tick_rate
00009f54 g     F .text	0000028c OSQPend
0000cc00 g     F .text	00000104 OSTimeDly
000014ac g     F .text	00000060 rand
000150a4 g     O .bss	00000004 _alt_nticks
000047f8 g     F .text	000000fc read
0000d160 g     F .text	0000096c alt_sys_init
0000ec4c g     F .text	0000008c alt_up_character_lcd_shift_display
00010d5c g     F .text	00000118 __register_exitproc
0001506d g     O .bss	00000001 OSTaskCtr
0000f658 g     F .text	00000058 alt_up_ps2_clear_fifo
0000f90c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000cd04 g     F .text	00000160 OSTimeDlyHMSM
0000ecd8 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000e118 g     F .text	00000068 altera_avalon_jtag_uart_close
00011390 g       *ABS*	00000000 __ram_rwdata_start
00011028 g       *ABS*	00000000 __ram_rodata_start
000150ac g     O .bss	00000028 __malloc_current_mallinfo
0001314a g     O .rwdata	00000002 OSEventMax
0000b174 g     F .text	00000110 OSSemPost
00000338 g     F .text	00000058 check_answer_resume_task1
000058e4 g     F .text	000000dc OSSchedUnlock
00015008 g     O .bss	00000004 BPMBox
0000dacc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010a8c g     F .text	000000dc alt_get_fd
00015070 g     O .bss	00000004 OSMemFreeList
00005a30 g     F .text	000000b0 OSStatInit
00008278 g     F .text	000000c4 OSFlagQuery
00013180 g     O .rwdata	00000002 OSTaskCreateExtEn
000034ec g     F .text	00000054 _close_r
00000400 g     F .text	00000034 check_end_game
00010ce0 g     F .text	0000007c memcmp
00005d20 g     F .text	00000020 OS_Dummy
0000db8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001e45c g       *ABS*	00000000 __alt_stack_base
0000dbdc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000edd4 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00003398 g     F .text	00000154 __swsetup_r
0001c8d8 g     O .bss	000001e0 OSQTbl
000017c4 g     F .text	00000118 __sfp
000117dc g     O .rwdata	00000408 __malloc_av_
00001910 g     F .text	00000004 __sinit_lock_release
00015074 g     O .bss	00000004 OSTCBHighRdy
000031fc g     F .text	00000054 __sread
00015078 g     O .bss	00000004 OSQFreeList
0000f86c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00010984 g     F .text	00000108 alt_find_file
0000fd28 g     F .text	000000a4 alt_dev_llist_insert
00004c60 g     F .text	00000120 __malloc_lock
00004958 g     F .text	000000b0 sbrk
00004f6c g     F .text	00000140 OSEventNameSet
00003860 g     F .text	0000005c _fflush_r
0001507c g     O .bss	00000001 OSRdyGrp
00014ff0 g       *ABS*	00000000 __bss_start
00002b1c g     F .text	00000128 memset
0001500c g     O .bss	00000001 err
000004b0 g     F .text	00000060 main
00015038 g     O .bss	00000004 alt_envp
0001501c g     O .bss	00000004 __malloc_max_total_mem
000005f4 g     F .text	000000fc countTask
0000db2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001494 g     F .text	00000018 srand
00011110 g     O .rodata	00000100 OSUnMapTbl
0001317a g     O .rwdata	00000002 OSSemEn
000006f0 g     F .text	000000e0 machine_state_task
0000ebc0 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00007ee4 g     F .text	00000394 OSFlagPost
00003330 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00003630 g     F .text	00000014 fclose
00005ed8 g     F .text	00000110 OS_EventTaskWait
0000f5e8 g     F .text	00000070 alt_up_ps2_read_data_byte
00006ad0 g     F .text	000000cc OS_TaskStatStkChk
0000c058 g     F .text	00000150 OSTaskDelReq
00001f88 g     F .text	0000080c _malloc_r
00013130 g     O .rwdata	00000004 alt_errno
000059c0 g     F .text	00000070 OSStart
00004c00 g     F .text	00000060 __env_unlock
00011390 g     O .rwdata	00000028 hex_display
00001e00 g     F .text	000000c4 _fwalk
0000c4f4 g     F .text	000001d4 OSTaskResume
0000977c g     F .text	000000e8 OSMemQuery
0001318c g     O .rwdata	00000002 OSTaskStatEn
0000ef50 g     F .text	00000040 alt_up_irda_write_data
00013166 g     O .rwdata	00000002 OSMemMax
0000a4b4 g     F .text	00000170 OSQPostFront
0000f7d4 g     F .text	0000003c alt_up_ps2_open_dev
0000404c g     F .text	00000084 .hidden __divsi3
0001507d g     O .bss	00000003 OSRdyTbl
00013140 g     O .rwdata	00000002 OSDebugEn
0000e9cc g     F .text	0000003c alt_up_character_lcd_open_dev
000038ec g     F .text	00000124 _malloc_trim_r
0000f350 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00011028 g       *ABS*	00000000 __CTOR_END__
00013158 g     O .rwdata	00000002 OSFlagNodeSize
00000434 g     F .text	00000034 submit_answer
000131a0 g     O .rwdata	00000002 OSTmrCfgMax
0000e994 g     F .text	00000038 alt_up_character_lcd_init
00009a70 g     F .text	000001ac OSQCreate
0000c1a8 g     F .text	00000198 OSTaskNameGet
00011028 g       *ABS*	00000000 __flash_rodata_start
0000a624 g     F .text	0000020c OSQPostOpt
00005ae0 g     F .text	00000220 OSTimeTick
00013188 g     O .rwdata	00000002 OSTaskMax
00011028 g       *ABS*	00000000 __DTOR_LIST__
0000aae4 g     F .text	000000d8 OSSemCreate
00015010 g     O .bss	00000004 answer
000131ac g     O .rwdata	00000002 OSTmrWheelSize
0000fb64 g     F .text	0000003c alt_up_rs232_open_dev
00013104 g     O .rwdata	00000004 count
00013182 g     O .rwdata	00000002 OSTaskDelEn
0000b284 g     F .text	00000110 OSSemQuery
00009c1c g     F .text	00000280 OSQDel
0000a1e0 g     F .text	0000016c OSQPendAbort
0000d128 g     F .text	00000038 alt_irq_init
000048f4 g     F .text	00000064 alt_release_fd
00015014 g     O .bss	00000004 statemsg
0000f228 g     F .text	00000034 read_data_valid
0000ed64 g     F .text	00000038 alt_up_character_lcd_cursor_off
0000f4e8 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00010c94 g     F .text	00000014 atexit
00003338 g     F .text	00000060 _write_r
00005858 g     F .text	0000008c OSSchedLock
00007308 g     F .text	00000108 OSFlagCreate
00013110 g     O .rwdata	00000004 _impure_ptr
00015030 g     O .bss	00000004 alt_argc
00003644 g     F .text	0000021c __sflush_r
0000fe2c g     F .text	00000060 _do_dtors
00013152 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000002c0 g     F .text	0000002c power_off
00007410 g     F .text	00000248 OSFlagDel
00015080 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00008cf4 g     F .text	0000016c OSMboxPendAbort
000078cc g     F .text	000005b8 OSFlagPend
0001319e g     O .rwdata	00000002 OSTmrEn
0000192c g     F .text	00000018 __fp_unlock_all
0001311c g     O .rwdata	00000008 alt_fs_list
000068d0 g     F .text	00000074 OS_StrCopy
0000f810 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000f98c g     F .text	00000040 alt_up_rs232_write_data
00013168 g     O .rwdata	00000002 OSMemNameSize
00010920 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013194 g     O .rwdata	00000002 OSTCBPrioTblMax
00013190 g     O .rwdata	00000002 OSTaskStatStkChkEn
000087ac g     F .text	000000d4 OSMboxCreate
00013164 g     O .rwdata	00000002 OSMemEn
0001316e g     O .rwdata	00000002 OSMutexEn
000190d4 g     O .bss	00000064 commRxBuf
000131c0 g       *ABS*	00000000 _edata
0001e45c g       *ABS*	00000000 _end
00015084 g     O .bss	00000001 OSIntNesting
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000e180 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000ce64 g     F .text	000001d4 OSTimeDlyResume
00007780 g     F .text	0000014c OSFlagNameSet
00008ac0 g     F .text	00000234 OSMboxPend
0000c6c8 g     F .text	000001c0 OSTaskStkChk
0001316a g     O .rwdata	00000002 OSMemSize
00003258 g     F .text	0000007c __swrite
00013118 g     O .rwdata	00000004 __malloc_trim_threshold
00015088 g     O .bss	00000004 OSTCBCur
00010ca8 g     F .text	00000038 exit
0000ef90 g     F .text	00000074 alt_up_irda_read_data
0001316c g     O .rwdata	00000002 OSMemTblSize
00001ec4 g     F .text	000000c4 _fwalk_reent
0000f288 g     F .text	000000c8 alt_up_ps2_init
000040d0 g     F .text	00000074 .hidden __modsi3
00015018 g     O .bss	00000004 dispSem
00008714 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001908 g     F .text	00000004 __sfp_lock_release
00019138 g     O .bss	00001000 mainTask_stk
000056bc g     F .text	00000058 OSInit
000007d0 g     F .text	000002ec display_LEDR_task
0000ca6c g     F .text	00000124 OSTaskQuery
0000ea84 g     F .text	00000078 alt_up_character_lcd_string
0000a98c g     F .text	000000a8 OS_QInit
00006944 g     F .text	00000054 OS_StrLen
0000f124 g     F .text	0000003c alt_up_irda_open_dev
00009590 g     F .text	00000114 OSMemNameSet
00013186 g     O .rwdata	00000002 OSTaskProfileEn
0001508c g     O .bss	00000004 OSTime
0001cab8 g     O .bss	00000800 OSTaskIdleStk
00010ff4 g     F .text	00000034 _exit
00008f70 g     F .text	0000015c OSMboxPostOpt
0000fba0 g     F .text	0000012c alt_alarm_start
00007658 g     F .text	00000128 OSFlagNameGet
0000d038 g     F .text	0000005c OSTimeGet
00003d80 g     F .text	000001bc __smakebuf_r
0000f480 g     F .text	00000068 alt_up_ps2_wait_for_ack
00014ff8 g     O .bss	00000004 power_flag
0000150c g     F .text	00000098 strlen
000108a0 g     F .text	00000020 OSTaskSwHook
00010310 g     F .text	00000154 open
0001d2b8 g     O .bss	00000b40 OSEventTbl
0001ddf8 g     O .bss	00000510 OSTCBTbl
0000b394 g     F .text	00000100 OSSemSet
0000ff1c g     F .text	00000034 alt_icache_flush_all
0000eb4c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000131b4 g     O .rwdata	00000004 alt_priority_mask
0000abbc g     F .text	00000240 OSSemDel
00015090 g     O .bss	00000004 OSFlagFreeList
0001314c g     O .rwdata	00000002 OSEventNameSize
00008880 g     F .text	00000240 OSMboxDel
00015094 g     O .bss	00000001 OSStatRdy
0001e308 g     O .bss	00000054 OSTCBPrioTbl
00004b3c g     F .text	000000c4 __env_lock
0000f6b0 g     F .text	0000008c alt_up_ps2_read_fd
00013192 g     O .rwdata	00000002 OSTaskSwHookEn
0000f004 g     F .text	00000090 alt_up_irda_read_fd
000131b8 g     O .rwdata	00000008 alt_alarm_list
0001315a g     O .rwdata	00000002 OSFlagWidth
0000fdcc g     F .text	00000060 _do_ctors
0000f8cc g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000423c g     F .text	000000d0 close
00015040 g     O .bss	00000004 alt_envsem
00015098 g     O .bss	00000004 OSIdleCtrRun
0001a138 g     O .bss	00001000 button_press_task_stk
00005d00 g     F .text	00000020 OSVersion
000131a4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000456c g     F .text	00000084 alt_load
0000cb90 g     F .text	00000070 OS_TaskStkClr
0001317e g     O .rwdata	00000002 OSTaskCreateEn
000062f0 g     F .text	00000068 OS_EventWaitListInit
00010940 g     F .text	00000020 OSTaskIdleHook
0000190c g     F .text	00000004 __sinit_lock_acquire
0000c888 g     F .text	000001e4 OSTaskSuspend
00006998 g     F .text	0000005c OS_TaskIdle
000131aa g     O .rwdata	00000002 OSTmrTblSize
0000a830 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00057140 	call	5714 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10b8d704 	addi	r2,r2,-7332
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10b8d704 	addi	r2,r2,-7332
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00057600 	call	5760 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a7e917 	ldw	r2,-24668(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a7e917 	ldw	r2,-24668(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d6ac4114 	ori	gp,gp,45316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	1093fc14 	ori	r2,r2,20464

    movhi r3, %hi(__bss_end)
     260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     264:	18f91714 	ori	r3,r3,58460

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000456c0 	call	456c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00047000 	call	4700 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <display_hex>:
int state = OFF;
int elapse_time = ELAPSE_TIME;
int power_flag = 0;
int hex_display[]=   {0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x7, 0x7F, 0x67}; // 0-9

int display_hex(int number){
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
     290:	e13fff15 	stw	r4,-4(fp)
	return hex_display[number];
     294:	00800074 	movhi	r2,1
     298:	1084e404 	addi	r2,r2,5008
     29c:	e0ffff17 	ldw	r3,-4(fp)
     2a0:	18c7883a 	add	r3,r3,r3
     2a4:	18c7883a 	add	r3,r3,r3
     2a8:	10c5883a 	add	r2,r2,r3
     2ac:	10800017 	ldw	r2,0(r2)
}
     2b0:	e037883a 	mov	sp,fp
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00104 	addi	sp,sp,4
     2bc:	f800283a 	ret

000002c0 <power_off>:

void power_off(){
     2c0:	deffff04 	addi	sp,sp,-4
     2c4:	df000015 	stw	fp,0(sp)
     2c8:	d839883a 	mov	fp,sp
	    if(power_flag){
     2cc:	d0a7bd17 	ldw	r2,-24844(gp)
     2d0:	10000126 	beq	r2,zero,2d8 <power_off+0x18>
	    	state = IDLE;
     2d4:	d0200115 	stw	zero,-32764(gp)
	    }
}
     2d8:	0001883a 	nop
     2dc:	e037883a 	mov	sp,fp
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00104 	addi	sp,sp,4
     2e8:	f800283a 	ret

000002ec <check_power_flag>:
void check_power_flag(){
     2ec:	deffff04 	addi	sp,sp,-4
     2f0:	df000015 	stw	fp,0(sp)
     2f4:	d839883a 	mov	fp,sp

	if ( SW_pointer >= 0x20000){
     2f8:	00bfc834 	movhi	r2,65312
     2fc:	10801004 	addi	r2,r2,64
     300:	10c00017 	ldw	r3,0(r2)
     304:	008000b4 	movhi	r2,2
     308:	18800316 	blt	r3,r2,318 <check_power_flag+0x2c>
		power_flag = 1;
     30c:	00800044 	movi	r2,1
     310:	d0a7bd15 	stw	r2,-24844(gp)
	}
	else {
		power_flag = 0;
		state = OFF;
	}
}
     314:	00000306 	br	324 <check_power_flag+0x38>

	if ( SW_pointer >= 0x20000){
		power_flag = 1;
	}
	else {
		power_flag = 0;
     318:	d027bd15 	stw	zero,-24844(gp)
		state = OFF;
     31c:	008000c4 	movi	r2,3
     320:	d0a00115 	stw	r2,-32764(gp)
	}
}
     324:	0001883a 	nop
     328:	e037883a 	mov	sp,fp
     32c:	df000017 	ldw	fp,0(sp)
     330:	dec00104 	addi	sp,sp,4
     334:	f800283a 	ret

00000338 <check_answer_resume_task1>:

void check_answer_resume_task1(){
     338:	defffe04 	addi	sp,sp,-8
     33c:	dfc00115 	stw	ra,4(sp)
     340:	df000015 	stw	fp,0(sp)
     344:	d839883a 	mov	fp,sp

	if ((question == answer) || (count == 0)){
     348:	d0e7bf17 	ldw	r3,-24836(gp)
     34c:	d0a7c317 	ldw	r2,-24820(gp)
     350:	18800226 	beq	r3,r2,35c <check_answer_resume_task1+0x24>
     354:	d0a00017 	ldw	r2,-32768(gp)
     358:	1000071e 	bne	r2,zero,378 <check_answer_resume_task1+0x40>
		count = COUNT_NUMBER;
     35c:	00800784 	movi	r2,30
     360:	d0a00015 	stw	r2,-32768(gp)
		number_of_question = number_of_question + 1;
     364:	d0a7be17 	ldw	r2,-24840(gp)
     368:	10800044 	addi	r2,r2,1
     36c:	d0a7be15 	stw	r2,-24840(gp)
		OSTaskResume(1);
     370:	01000044 	movi	r4,1
     374:	000c4f40 	call	c4f4 <OSTaskResume>
	}


}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <reset>:

void reset(){
     390:	deffff04 	addi	sp,sp,-4
     394:	df000015 	stw	fp,0(sp)
     398:	d839883a 	mov	fp,sp
	count = COUNT_NUMBER;
     39c:	00800784 	movi	r2,30
     3a0:	d0a00015 	stw	r2,-32768(gp)
	elapse_time = ELAPSE_TIME;
     3a4:	d027bc15 	stw	zero,-24848(gp)
	answer = 0;
     3a8:	d027c315 	stw	zero,-24820(gp)
	point =INIT_SCORE;
     3ac:	d027bb15 	stw	zero,-24852(gp)
	number_of_question = 0;
     3b0:	d027be15 	stw	zero,-24840(gp)

}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	df000017 	ldw	fp,0(sp)
     3c0:	dec00104 	addi	sp,sp,4
     3c4:	f800283a 	ret

000003c8 <check_answer_add_point>:

void check_answer_add_point(){
     3c8:	deffff04 	addi	sp,sp,-4
     3cc:	df000015 	stw	fp,0(sp)
     3d0:	d839883a 	mov	fp,sp
	if (question == answer)
     3d4:	d0e7bf17 	ldw	r3,-24836(gp)
     3d8:	d0a7c317 	ldw	r2,-24820(gp)
     3dc:	1880031e 	bne	r3,r2,3ec <check_answer_add_point+0x24>
		point = point +1;
     3e0:	d0a7bb17 	ldw	r2,-24852(gp)
     3e4:	10800044 	addi	r2,r2,1
     3e8:	d0a7bb15 	stw	r2,-24852(gp)
}
     3ec:	0001883a 	nop
     3f0:	e037883a 	mov	sp,fp
     3f4:	df000017 	ldw	fp,0(sp)
     3f8:	dec00104 	addi	sp,sp,4
     3fc:	f800283a 	ret

00000400 <check_end_game>:

void check_end_game(){
     400:	deffff04 	addi	sp,sp,-4
     404:	df000015 	stw	fp,0(sp)
     408:	d839883a 	mov	fp,sp
	if (number_of_question == 10){
     40c:	d0a7be17 	ldw	r2,-24840(gp)
     410:	10800298 	cmpnei	r2,r2,10
     414:	1000021e 	bne	r2,zero,420 <check_end_game+0x20>
		state = FINISH;
     418:	00800104 	movi	r2,4
     41c:	d0a00115 	stw	r2,-32764(gp)
	}
}
     420:	0001883a 	nop
     424:	e037883a 	mov	sp,fp
     428:	df000017 	ldw	fp,0(sp)
     42c:	dec00104 	addi	sp,sp,4
     430:	f800283a 	ret

00000434 <submit_answer>:

void submit_answer(){
     434:	deffff04 	addi	sp,sp,-4
     438:	df000015 	stw	fp,0(sp)
     43c:	d839883a 	mov	fp,sp
	answer = (SW_pointer & 0xFF);
     440:	00bfc834 	movhi	r2,65312
     444:	10801004 	addi	r2,r2,64
     448:	10800017 	ldw	r2,0(r2)
     44c:	10803fcc 	andi	r2,r2,255
     450:	d0a7c315 	stw	r2,-24820(gp)
}
     454:	0001883a 	nop
     458:	e037883a 	mov	sp,fp
     45c:	df000017 	ldw	fp,0(sp)
     460:	dec00104 	addi	sp,sp,4
     464:	f800283a 	ret

00000468 <count_elapse>:
void count_elapse(){
     468:	deffff04 	addi	sp,sp,-4
     46c:	df000015 	stw	fp,0(sp)
     470:	d839883a 	mov	fp,sp
	count--;
     474:	d0a00017 	ldw	r2,-32768(gp)
     478:	10bfffc4 	addi	r2,r2,-1
     47c:	d0a00015 	stw	r2,-32768(gp)
	elapse_time++;
     480:	d0a7bc17 	ldw	r2,-24848(gp)
     484:	10800044 	addi	r2,r2,1
     488:	d0a7bc15 	stw	r2,-24848(gp)
	if (elapse_time == 6000){
     48c:	d0a7bc17 	ldw	r2,-24848(gp)
     490:	1085dc18 	cmpnei	r2,r2,6000
     494:	1000011e 	bne	r2,zero,49c <count_elapse+0x34>
		elapse_time = ELAPSE_TIME;
     498:	d027bc15 	stw	zero,-24848(gp)
	}
}
     49c:	0001883a 	nop
     4a0:	e037883a 	mov	sp,fp
     4a4:	df000017 	ldw	fp,0(sp)
     4a8:	dec00104 	addi	sp,sp,4
     4ac:	f800283a 	ret

000004b0 <main>:

int main(void)

{
     4b0:	defffe04 	addi	sp,sp,-8
     4b4:	dfc00115 	stw	ra,4(sp)
     4b8:	df000015 	stw	fp,0(sp)
     4bc:	d839883a 	mov	fp,sp

	dispSem = OSSemCreate(1);			 // create semaphore
     4c0:	01000044 	movi	r4,1
     4c4:	000aae40 	call	aae4 <OSSemCreate>
     4c8:	d0a7c515 	stw	r2,-24812(gp)
	BPMBox = OSMboxCreate((void *)0);  // create mailbox
     4cc:	0009883a 	mov	r4,zero
     4d0:	00087ac0 	call	87ac <OSMboxCreate>
     4d4:	d0a7c115 	stw	r2,-24828(gp)
    OSTaskCreate(mainTask, (void *)0, &mainTask_stk[TASK_STK_SIZE-1], 1);
     4d8:	01c00044 	movi	r7,1
     4dc:	018000b4 	movhi	r6,2
     4e0:	31a84d04 	addi	r6,r6,-24268
     4e4:	000b883a 	mov	r5,zero
     4e8:	01000034 	movhi	r4,0
     4ec:	21014404 	addi	r4,r4,1296
     4f0:	000b9840 	call	b984 <OSTaskCreate>

    OSStart();
     4f4:	00059c00 	call	59c0 <OSStart>
    return 0;
     4f8:	0005883a 	mov	r2,zero

}
     4fc:	e037883a 	mov	sp,fp
     500:	dfc00117 	ldw	ra,4(sp)
     504:	df000017 	ldw	fp,0(sp)
     508:	dec00204 	addi	sp,sp,8
     50c:	f800283a 	ret

00000510 <mainTask>:

void mainTask(void *pdata)
{
     510:	defffd04 	addi	sp,sp,-12
     514:	dfc00215 	stw	ra,8(sp)
     518:	df000115 	stw	fp,4(sp)
     51c:	df000104 	addi	fp,sp,4
     520:	e13fff15 	stw	r4,-4(fp)
    OSTaskCreate(countTask, (void *)0, &countTask_stk[TASK_STK_SIZE-1], Prio2);
     524:	01c00084 	movi	r7,2
     528:	01800074 	movhi	r6,1
     52c:	319c3404 	addi	r6,r6,28880
     530:	000b883a 	mov	r5,zero
     534:	01000034 	movhi	r4,0
     538:	21017d04 	addi	r4,r4,1524
     53c:	000b9840 	call	b984 <OSTaskCreate>

    OSTaskCreate(machine_state_task, (void *)0, &machineStateTask_stk[TASK_STK_SIZE-1], Prio3);
     540:	01c000c4 	movi	r7,3
     544:	01800074 	movhi	r6,1
     548:	31983404 	addi	r6,r6,24784
     54c:	000b883a 	mov	r5,zero
     550:	01000034 	movhi	r4,0
     554:	2101bc04 	addi	r4,r4,1776
     558:	000b9840 	call	b984 <OSTaskCreate>

    OSTaskCreate(display_LEDR_task, (void *)0, &display_LEDR_task_stk[TASK_STK_SIZE-1], Prio11);
     55c:	01c002c4 	movi	r7,11
     560:	018000b4 	movhi	r6,2
     564:	31a03404 	addi	r6,r6,-32560
     568:	000b883a 	mov	r5,zero
     56c:	01000034 	movhi	r4,0
     570:	2101f404 	addi	r4,r4,2000
     574:	000b9840 	call	b984 <OSTaskCreate>

    OSTaskCreate(display_task_HEX_task, (void *)0, &display_task_HEX_task_stk[TASK_STK_SIZE-1], Prio12);
     578:	01c00304 	movi	r7,12
     57c:	018000b4 	movhi	r6,2
     580:	31a43404 	addi	r6,r6,-28464
     584:	000b883a 	mov	r5,zero
     588:	01000034 	movhi	r4,0
     58c:	2102af04 	addi	r4,r4,2748
     590:	000b9840 	call	b984 <OSTaskCreate>

    OSTaskCreate(button_press_task, (void *)0, &button_press_task_stk[TASK_STK_SIZE-1], Prio13);
     594:	01c00344 	movi	r7,13
     598:	018000b4 	movhi	r6,2
     59c:	31ac4d04 	addi	r6,r6,-20172
     5a0:	000b883a 	mov	r5,zero
     5a4:	01000034 	movhi	r4,0
     5a8:	21047b04 	addi	r4,r4,4588
     5ac:	000b9840 	call	b984 <OSTaskCreate>

    while (1)
    	{
			printf("Main Task run\n");
     5b0:	01000074 	movhi	r4,1
     5b4:	21040a04 	addi	r4,r4,4136
     5b8:	00014800 	call	1480 <puts>


			OSSemPend(dispSem, 0 , &err);
     5bc:	d0a7c517 	ldw	r2,-24812(gp)
     5c0:	d1a7c204 	addi	r6,gp,-24824
     5c4:	000b883a 	mov	r5,zero
     5c8:	1009883a 	mov	r4,r2
     5cc:	000adfc0 	call	adfc <OSSemPend>
			question = rand() & 0xFF;
     5d0:	00014ac0 	call	14ac <rand>
     5d4:	10803fcc 	andi	r2,r2,255
     5d8:	d0a7bf15 	stw	r2,-24836(gp)
			OSSemPost(dispSem);
     5dc:	d0a7c517 	ldw	r2,-24812(gp)
     5e0:	1009883a 	mov	r4,r2
     5e4:	000b1740 	call	b174 <OSSemPost>
			OSTaskSuspend(OS_PRIO_SELF);
     5e8:	01003fc4 	movi	r4,255
     5ec:	000c8880 	call	c888 <OSTaskSuspend>

    }
     5f0:	003fef06 	br	5b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70005b0>

000005f4 <countTask>:

/**
 * count Task
 */
void countTask(void *pdata)
{
     5f4:	defffd04 	addi	sp,sp,-12
     5f8:	dfc00215 	stw	ra,8(sp)
     5fc:	df000115 	stw	fp,4(sp)
     600:	df000104 	addi	fp,sp,4
     604:	e13fff15 	stw	r4,-4(fp)

	while(1)
	{
	      //test message
							   //test pend mailbox
		statemsg = (int *)OSMboxPend(BPMBox,10 ,&mailBoxErr);
     608:	d0a7c117 	ldw	r2,-24828(gp)
     60c:	d1a7c004 	addi	r6,gp,-24832
     610:	01400284 	movi	r5,10
     614:	1009883a 	mov	r4,r2
     618:	0008ac00 	call	8ac0 <OSMboxPend>
     61c:	d0a7c415 	stw	r2,-24816(gp)
		if (mailBoxErr == OS_NO_ERR){
     620:	d0a7c003 	ldbu	r2,-24832(gp)
     624:	10803fcc 	andi	r2,r2,255
     628:	10000c1e 	bne	r2,zero,65c <countTask+0x68>
			OSSemPend(dispSem, 0 , &err);
     62c:	d0a7c517 	ldw	r2,-24812(gp)
     630:	d1a7c204 	addi	r6,gp,-24824
     634:	000b883a 	mov	r5,zero
     638:	1009883a 	mov	r4,r2
     63c:	000adfc0 	call	adfc <OSSemPend>
			state = *statemsg;
     640:	d0a7c417 	ldw	r2,-24816(gp)
     644:	10800017 	ldw	r2,0(r2)
     648:	d0a00115 	stw	r2,-32764(gp)
			OSSemPost(dispSem);
     64c:	d0a7c517 	ldw	r2,-24812(gp)
     650:	1009883a 	mov	r4,r2
     654:	000b1740 	call	b174 <OSSemPost>
     658:	00000306 	br	668 <countTask+0x74>
		}
		else{
			printf("there is some err in count task \n");
     65c:	01000074 	movhi	r4,1
     660:	21040e04 	addi	r4,r4,4152
     664:	00014800 	call	1480 <puts>
		}

			switch(state){
     668:	d0a00117 	ldw	r2,-32764(gp)
     66c:	10000326 	beq	r2,zero,67c <countTask+0x88>
     670:	10800060 	cmpeqi	r2,r2,1
     674:	10000b1e 	bne	r2,zero,6a4 <countTask+0xb0>
					check_answer_resume_task1();
					OSSemPost(dispSem);
					break;

				default:
					break;
     678:	00001706 	br	6d8 <countTask+0xe4>
			printf("there is some err in count task \n");
		}

			switch(state){
				case IDLE:
					OSSemPend(dispSem, 0 , &err);
     67c:	d0a7c517 	ldw	r2,-24812(gp)
     680:	d1a7c204 	addi	r6,gp,-24824
     684:	000b883a 	mov	r5,zero
     688:	1009883a 	mov	r4,r2
     68c:	000adfc0 	call	adfc <OSSemPend>
					reset();
     690:	00003900 	call	390 <reset>
					OSSemPost(dispSem);
     694:	d0a7c517 	ldw	r2,-24812(gp)
     698:	1009883a 	mov	r4,r2
     69c:	000b1740 	call	b174 <OSSemPost>
					break;
     6a0:	00000d06 	br	6d8 <countTask+0xe4>
				case COUNT:
					OSSemPend(dispSem, 0 , &err);
     6a4:	d0a7c517 	ldw	r2,-24812(gp)
     6a8:	d1a7c204 	addi	r6,gp,-24824
     6ac:	000b883a 	mov	r5,zero
     6b0:	1009883a 	mov	r4,r2
     6b4:	000adfc0 	call	adfc <OSSemPend>
					count_elapse();
     6b8:	00004680 	call	468 <count_elapse>
					check_answer_add_point();
     6bc:	00003c80 	call	3c8 <check_answer_add_point>
					check_end_game();
     6c0:	00004000 	call	400 <check_end_game>
					check_answer_resume_task1();
     6c4:	00003380 	call	338 <check_answer_resume_task1>
					OSSemPost(dispSem);
     6c8:	d0a7c517 	ldw	r2,-24812(gp)
     6cc:	1009883a 	mov	r4,r2
     6d0:	000b1740 	call	b174 <OSSemPost>
					break;
     6d4:	0001883a 	nop

			// uncommend this one to do testing
//				OSTimeDly(1); // debug mode make it run faster

		 // uncommend this one to run on real environment
				OSTimeDlyHMSM(0, 0, 1,0);
     6d8:	000f883a 	mov	r7,zero
     6dc:	01800044 	movi	r6,1
     6e0:	000b883a 	mov	r5,zero
     6e4:	0009883a 	mov	r4,zero
     6e8:	000cd040 	call	cd04 <OSTimeDlyHMSM>
	}
     6ec:	003fc606 	br	608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000608>

000006f0 <machine_state_task>:

/**
 * State machine task . This task run state machine
 */
void machine_state_task(void* pdata)
{
     6f0:	defffd04 	addi	sp,sp,-12
     6f4:	dfc00215 	stw	ra,8(sp)
     6f8:	df000115 	stw	fp,4(sp)
     6fc:	df000104 	addi	fp,sp,4
     700:	e13fff15 	stw	r4,-4(fp)

	while(1)
	{
		      //test message

		statemsg = (int *)OSMboxPend(BPMBox,10 ,&mailBoxErr);
     704:	d0a7c117 	ldw	r2,-24828(gp)
     708:	d1a7c004 	addi	r6,gp,-24832
     70c:	01400284 	movi	r5,10
     710:	1009883a 	mov	r4,r2
     714:	0008ac00 	call	8ac0 <OSMboxPend>
     718:	d0a7c415 	stw	r2,-24816(gp)
		if (mailBoxErr == OS_NO_ERR){
     71c:	d0a7c003 	ldbu	r2,-24832(gp)
     720:	10803fcc 	andi	r2,r2,255
     724:	10000c1e 	bne	r2,zero,758 <machine_state_task+0x68>
			OSSemPend(dispSem, 0 , &err);
     728:	d0a7c517 	ldw	r2,-24812(gp)
     72c:	d1a7c204 	addi	r6,gp,-24824
     730:	000b883a 	mov	r5,zero
     734:	1009883a 	mov	r4,r2
     738:	000adfc0 	call	adfc <OSSemPend>
			state = *statemsg;
     73c:	d0a7c417 	ldw	r2,-24816(gp)
     740:	10800017 	ldw	r2,0(r2)
     744:	d0a00115 	stw	r2,-32764(gp)
			OSSemPost(dispSem);
     748:	d0a7c517 	ldw	r2,-24812(gp)
     74c:	1009883a 	mov	r4,r2
     750:	000b1740 	call	b174 <OSSemPost>
     754:	00000306 	br	764 <machine_state_task+0x74>
		}
		else{
			printf("there is some err in machine state task \n");
     758:	01000074 	movhi	r4,1
     75c:	21041704 	addi	r4,r4,4188
     760:	00014800 	call	1480 <puts>
		}
		switch(state){
     764:	d0a00117 	ldw	r2,-32764(gp)
     768:	108000e0 	cmpeqi	r2,r2,3
     76c:	10000b26 	beq	r2,zero,79c <machine_state_task+0xac>
			case OFF:
				OSSemPend(dispSem, 0 , &err);
     770:	d0a7c517 	ldw	r2,-24812(gp)
     774:	d1a7c204 	addi	r6,gp,-24824
     778:	000b883a 	mov	r5,zero
     77c:	1009883a 	mov	r4,r2
     780:	000adfc0 	call	adfc <OSSemPend>
				check_power_flag();
     784:	00002ec0 	call	2ec <check_power_flag>
				power_off();
     788:	00002c00 	call	2c0 <power_off>
				OSSemPost(dispSem);
     78c:	d0a7c517 	ldw	r2,-24812(gp)
     790:	1009883a 	mov	r4,r2
     794:	000b1740 	call	b174 <OSSemPost>
				break;
     798:	00000a06 	br	7c4 <machine_state_task+0xd4>
			default:
				OSSemPend(dispSem, 0 , &err);
     79c:	d0a7c517 	ldw	r2,-24812(gp)
     7a0:	d1a7c204 	addi	r6,gp,-24824
     7a4:	000b883a 	mov	r5,zero
     7a8:	1009883a 	mov	r4,r2
     7ac:	000adfc0 	call	adfc <OSSemPend>
				check_power_flag();
     7b0:	00002ec0 	call	2ec <check_power_flag>
				OSSemPost(dispSem);
     7b4:	d0a7c517 	ldw	r2,-24812(gp)
     7b8:	1009883a 	mov	r4,r2
     7bc:	000b1740 	call	b174 <OSSemPost>
				break;
     7c0:	0001883a 	nop
		}
		OSTimeDly(1);
     7c4:	01000044 	movi	r4,1
     7c8:	000cc000 	call	cc00 <OSTimeDly>

	}
     7cc:	003fcd06 	br	704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000704>

000007d0 <display_LEDR_task>:




void display_LEDR_task(void *pdata)
{
     7d0:	defffd04 	addi	sp,sp,-12
     7d4:	dfc00215 	stw	ra,8(sp)
     7d8:	df000115 	stw	fp,4(sp)
     7dc:	df000104 	addi	fp,sp,4
     7e0:	e13fff15 	stw	r4,-4(fp)

	while(1)
	{
	      //test message

		statemsg = (int *)OSMboxPend(BPMBox,10 ,&mailBoxErr);
     7e4:	d0a7c117 	ldw	r2,-24828(gp)
     7e8:	d1a7c004 	addi	r6,gp,-24832
     7ec:	01400284 	movi	r5,10
     7f0:	1009883a 	mov	r4,r2
     7f4:	0008ac00 	call	8ac0 <OSMboxPend>
     7f8:	d0a7c415 	stw	r2,-24816(gp)
		if (mailBoxErr == OS_NO_ERR){
     7fc:	d0a7c003 	ldbu	r2,-24832(gp)
     800:	10803fcc 	andi	r2,r2,255
     804:	10000c1e 	bne	r2,zero,838 <display_LEDR_task+0x68>

			OSSemPend(dispSem, 0 , &err);
     808:	d0a7c517 	ldw	r2,-24812(gp)
     80c:	d1a7c204 	addi	r6,gp,-24824
     810:	000b883a 	mov	r5,zero
     814:	1009883a 	mov	r4,r2
     818:	000adfc0 	call	adfc <OSSemPend>
			state = *statemsg;
     81c:	d0a7c417 	ldw	r2,-24816(gp)
     820:	10800017 	ldw	r2,0(r2)
     824:	d0a00115 	stw	r2,-32764(gp)
			OSSemPost(dispSem);
     828:	d0a7c517 	ldw	r2,-24812(gp)
     82c:	1009883a 	mov	r4,r2
     830:	000b1740 	call	b174 <OSSemPost>
     834:	00000306 	br	844 <display_LEDR_task+0x74>
		}
		else{
			printf("there is some err in display LEDR task \n");
     838:	01000074 	movhi	r4,1
     83c:	21042204 	addi	r4,r4,4232
     840:	00014800 	call	1480 <puts>
		}
        switch (state){
     844:	d0a00117 	ldw	r2,-32764(gp)
     848:	10c00060 	cmpeqi	r3,r2,1
     84c:	1800371e 	bne	r3,zero,92c <display_LEDR_task+0x15c>
     850:	10c00088 	cmpgei	r3,r2,2
     854:	1800021e 	bne	r3,zero,860 <display_LEDR_task+0x90>
     858:	10001826 	beq	r2,zero,8bc <display_LEDR_task+0xec>
     85c:	00007d06 	br	a54 <display_LEDR_task+0x284>
     860:	10c000a0 	cmpeqi	r3,r2,2
     864:	18005f1e 	bne	r3,zero,9e4 <display_LEDR_task+0x214>
     868:	108000e0 	cmpeqi	r2,r2,3
     86c:	10007926 	beq	r2,zero,a54 <display_LEDR_task+0x284>
        	case OFF:
        		OSSemPend(dispSem, 0 , &err);
     870:	d0a7c517 	ldw	r2,-24812(gp)
     874:	d1a7c204 	addi	r6,gp,-24824
     878:	000b883a 	mov	r5,zero
     87c:	1009883a 	mov	r4,r2
     880:	000adfc0 	call	adfc <OSSemPend>
        		SW_pointer &= 0x00;
     884:	00bfc834 	movhi	r2,65312
     888:	10801004 	addi	r2,r2,64
     88c:	10800017 	ldw	r2,0(r2)
     890:	00bfc834 	movhi	r2,65312
     894:	10801004 	addi	r2,r2,64
     898:	10000015 	stw	zero,0(r2)
        		LEDR_pointer &= 0x00;
     89c:	00bfc834 	movhi	r2,65312
     8a0:	10800017 	ldw	r2,0(r2)
     8a4:	00bfc834 	movhi	r2,65312
     8a8:	10000015 	stw	zero,0(r2)
        		OSSemPost(dispSem);
     8ac:	d0a7c517 	ldw	r2,-24812(gp)
     8b0:	1009883a 	mov	r4,r2
     8b4:	000b1740 	call	b174 <OSSemPost>
        		break;
     8b8:	00007a06 	br	aa4 <display_LEDR_task+0x2d4>
        	case IDLE:
        		OSSemPend(dispSem, 0 , &err);
     8bc:	d0a7c517 	ldw	r2,-24812(gp)
     8c0:	d1a7c204 	addi	r6,gp,-24824
     8c4:	000b883a 	mov	r5,zero
     8c8:	1009883a 	mov	r4,r2
     8cc:	000adfc0 	call	adfc <OSSemPend>
        		SW_pointer &= 0x00;
     8d0:	00bfc834 	movhi	r2,65312
     8d4:	10801004 	addi	r2,r2,64
     8d8:	10800017 	ldw	r2,0(r2)
     8dc:	00bfc834 	movhi	r2,65312
     8e0:	10801004 	addi	r2,r2,64
     8e4:	10000015 	stw	zero,0(r2)
        		LEDR_pointer &= 0x00;
     8e8:	00bfc834 	movhi	r2,65312
     8ec:	10800017 	ldw	r2,0(r2)
     8f0:	00bfc834 	movhi	r2,65312
     8f4:	10000015 	stw	zero,0(r2)
        		LEDR_pointer |= (SW_pointer & 0x20000);
     8f8:	00bfc834 	movhi	r2,65312
     8fc:	10801004 	addi	r2,r2,64
     900:	10800017 	ldw	r2,0(r2)
     904:	10c000ac 	andhi	r3,r2,2
     908:	00bfc834 	movhi	r2,65312
     90c:	013fc834 	movhi	r4,65312
     910:	21000017 	ldw	r4,0(r4)
     914:	20c6b03a 	or	r3,r4,r3
     918:	10c00015 	stw	r3,0(r2)
        		OSSemPost(dispSem);
     91c:	d0a7c517 	ldw	r2,-24812(gp)
     920:	1009883a 	mov	r4,r2
     924:	000b1740 	call	b174 <OSSemPost>
        		break;
     928:	00005e06 	br	aa4 <display_LEDR_task+0x2d4>
        	case COUNT:
        		OSSemPend(dispSem, 0 , &err);
     92c:	d0a7c517 	ldw	r2,-24812(gp)
     930:	d1a7c204 	addi	r6,gp,-24824
     934:	000b883a 	mov	r5,zero
     938:	1009883a 	mov	r4,r2
     93c:	000adfc0 	call	adfc <OSSemPend>
        		SW_pointer &= (0x20000 & SW_pointer); // clear the switch
     940:	00bfc834 	movhi	r2,65312
     944:	10801004 	addi	r2,r2,64
     948:	10800017 	ldw	r2,0(r2)
     94c:	110000ac 	andhi	r4,r2,2
     950:	00bfc834 	movhi	r2,65312
     954:	10801004 	addi	r2,r2,64
     958:	00ffc834 	movhi	r3,65312
     95c:	18c01004 	addi	r3,r3,64
     960:	18c00017 	ldw	r3,0(r3)
     964:	1906703a 	and	r3,r3,r4
     968:	10c00015 	stw	r3,0(r2)
        		LEDR_pointer &= (0x20000 & SW_pointer); // clear the led
     96c:	00bfc834 	movhi	r2,65312
     970:	10801004 	addi	r2,r2,64
     974:	10800017 	ldw	r2,0(r2)
     978:	10c000ac 	andhi	r3,r2,2
     97c:	00bfc834 	movhi	r2,65312
     980:	013fc834 	movhi	r4,65312
     984:	21000017 	ldw	r4,0(r4)
     988:	20c6703a 	and	r3,r4,r3
     98c:	10c00015 	stw	r3,0(r2)
        		if(SW_pointer & (1 << 16)){
     990:	00bfc834 	movhi	r2,65312
     994:	10801004 	addi	r2,r2,64
     998:	10800017 	ldw	r2,0(r2)
     99c:	1080006c 	andhi	r2,r2,1
     9a0:	10000c26 	beq	r2,zero,9d4 <display_LEDR_task+0x204>
        			LEDR_pointer |= (question & 0xFF ) | (SW_pointer & 0x30000);
     9a4:	d0a7bf17 	ldw	r2,-24836(gp)
     9a8:	10c03fcc 	andi	r3,r2,255
     9ac:	00bfc834 	movhi	r2,65312
     9b0:	10801004 	addi	r2,r2,64
     9b4:	10800017 	ldw	r2,0(r2)
     9b8:	108000ec 	andhi	r2,r2,3
     9bc:	1886b03a 	or	r3,r3,r2
     9c0:	00bfc834 	movhi	r2,65312
     9c4:	013fc834 	movhi	r4,65312
     9c8:	21000017 	ldw	r4,0(r4)
     9cc:	20c6b03a 	or	r3,r4,r3
     9d0:	10c00015 	stw	r3,0(r2)
        		}
        		OSSemPost(dispSem);
     9d4:	d0a7c517 	ldw	r2,-24812(gp)
     9d8:	1009883a 	mov	r4,r2
     9dc:	000b1740 	call	b174 <OSSemPost>
        		break;
     9e0:	00003006 	br	aa4 <display_LEDR_task+0x2d4>
        	case PAUSE:
        		OSSemPend(dispSem, 0 , &err);
     9e4:	d0a7c517 	ldw	r2,-24812(gp)
     9e8:	d1a7c204 	addi	r6,gp,-24824
     9ec:	000b883a 	mov	r5,zero
     9f0:	1009883a 	mov	r4,r2
     9f4:	000adfc0 	call	adfc <OSSemPend>
        		SW_pointer &= 0x00;
     9f8:	00bfc834 	movhi	r2,65312
     9fc:	10801004 	addi	r2,r2,64
     a00:	10800017 	ldw	r2,0(r2)
     a04:	00bfc834 	movhi	r2,65312
     a08:	10801004 	addi	r2,r2,64
     a0c:	10000015 	stw	zero,0(r2)
        		LEDR_pointer &= 0x00;
     a10:	00bfc834 	movhi	r2,65312
     a14:	10800017 	ldw	r2,0(r2)
     a18:	00bfc834 	movhi	r2,65312
     a1c:	10000015 	stw	zero,0(r2)
        		LEDR_pointer |= (0x30000 & SW_pointer); // clear the led
     a20:	00bfc834 	movhi	r2,65312
     a24:	10801004 	addi	r2,r2,64
     a28:	10800017 	ldw	r2,0(r2)
     a2c:	10c000ec 	andhi	r3,r2,3
     a30:	00bfc834 	movhi	r2,65312
     a34:	013fc834 	movhi	r4,65312
     a38:	21000017 	ldw	r4,0(r4)
     a3c:	20c6b03a 	or	r3,r4,r3
     a40:	10c00015 	stw	r3,0(r2)
        		OSSemPost(dispSem);
     a44:	d0a7c517 	ldw	r2,-24812(gp)
     a48:	1009883a 	mov	r4,r2
     a4c:	000b1740 	call	b174 <OSSemPost>
        		break;
     a50:	00001406 	br	aa4 <display_LEDR_task+0x2d4>
        	default:
        		SW_pointer &= 0x00;
     a54:	00bfc834 	movhi	r2,65312
     a58:	10801004 	addi	r2,r2,64
     a5c:	10800017 	ldw	r2,0(r2)
     a60:	00bfc834 	movhi	r2,65312
     a64:	10801004 	addi	r2,r2,64
     a68:	10000015 	stw	zero,0(r2)
        		LEDR_pointer &= 0x00;
     a6c:	00bfc834 	movhi	r2,65312
     a70:	10800017 	ldw	r2,0(r2)
     a74:	00bfc834 	movhi	r2,65312
     a78:	10000015 	stw	zero,0(r2)
        		LEDR_pointer = (SW_pointer & 0x20000);
     a7c:	00ffc834 	movhi	r3,65312
     a80:	00bfc834 	movhi	r2,65312
     a84:	10801004 	addi	r2,r2,64
     a88:	10800017 	ldw	r2,0(r2)
     a8c:	108000ac 	andhi	r2,r2,2
     a90:	18800015 	stw	r2,0(r3)
        		OSSemPost(dispSem);
     a94:	d0a7c517 	ldw	r2,-24812(gp)
     a98:	1009883a 	mov	r4,r2
     a9c:	000b1740 	call	b174 <OSSemPost>
        		break;
     aa0:	0001883a 	nop
        }


        OSTimeDlyHMSM(0, 0, 0, 100);
     aa4:	01c01904 	movi	r7,100
     aa8:	000d883a 	mov	r6,zero
     aac:	000b883a 	mov	r5,zero
     ab0:	0009883a 	mov	r4,zero
     ab4:	000cd040 	call	cd04 <OSTimeDlyHMSM>
    }
     ab8:	003f4a06 	br	7e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70007e4>

00000abc <display_task_HEX_task>:
}



void display_task_HEX_task(void *pdata)
{
     abc:	defffb04 	addi	sp,sp,-20
     ac0:	dfc00415 	stw	ra,16(sp)
     ac4:	df000315 	stw	fp,12(sp)
     ac8:	dc400215 	stw	r17,8(sp)
     acc:	dc000115 	stw	r16,4(sp)
     ad0:	df000304 	addi	fp,sp,12
     ad4:	e13ffd15 	stw	r4,-12(fp)

	while(1)
	{
	      //test message
							   //test pend mailbox
		statemsg = (int *)OSMboxPend(BPMBox,10 ,&mailBoxErr);
     ad8:	d0a7c117 	ldw	r2,-24828(gp)
     adc:	d1a7c004 	addi	r6,gp,-24832
     ae0:	01400284 	movi	r5,10
     ae4:	1009883a 	mov	r4,r2
     ae8:	0008ac00 	call	8ac0 <OSMboxPend>
     aec:	d0a7c415 	stw	r2,-24816(gp)
		if (mailBoxErr == OS_NO_ERR){
     af0:	d0a7c003 	ldbu	r2,-24832(gp)
     af4:	10803fcc 	andi	r2,r2,255
     af8:	10000c1e 	bne	r2,zero,b2c <display_task_HEX_task+0x70>

			OSSemPend(dispSem, 0 , &err);
     afc:	d0a7c517 	ldw	r2,-24812(gp)
     b00:	d1a7c204 	addi	r6,gp,-24824
     b04:	000b883a 	mov	r5,zero
     b08:	1009883a 	mov	r4,r2
     b0c:	000adfc0 	call	adfc <OSSemPend>
			state = *statemsg;
     b10:	d0a7c417 	ldw	r2,-24816(gp)
     b14:	10800017 	ldw	r2,0(r2)
     b18:	d0a00115 	stw	r2,-32764(gp)
			OSSemPost(dispSem);
     b1c:	d0a7c517 	ldw	r2,-24812(gp)
     b20:	1009883a 	mov	r4,r2
     b24:	000b1740 	call	b174 <OSSemPost>
     b28:	00000306 	br	b38 <display_task_HEX_task+0x7c>
		}
		else{
			printf("there is some err hex task display\n");
     b2c:	01000074 	movhi	r4,1
     b30:	21042c04 	addi	r4,r4,4272
     b34:	00014800 	call	1480 <puts>
		}




		switch(state){
     b38:	d0a00117 	ldw	r2,-32764(gp)
     b3c:	10c00168 	cmpgeui	r3,r2,5
     b40:	18015d1e 	bne	r3,zero,10b8 <display_task_HEX_task+0x5fc>
     b44:	100690ba 	slli	r3,r2,2
     b48:	00800034 	movhi	r2,0
     b4c:	1082d704 	addi	r2,r2,2908
     b50:	1885883a 	add	r2,r3,r2
     b54:	10800017 	ldw	r2,0(r2)
     b58:	1000683a 	jmp	r2
     b5c:	00000bc4 	movi	zero,47
     b60:	00000d2c 	andhi	zero,zero,52
     b64:	00000e94 	movui	zero,58
     b68:	00000b70 	cmpltui	zero,zero,45
     b6c:	00000f70 	cmpltui	zero,zero,61
						case OFF:
							OSSemPend(dispSem, 0 , &err);
     b70:	d0a7c517 	ldw	r2,-24812(gp)
     b74:	d1a7c204 	addi	r6,gp,-24824
     b78:	000b883a 	mov	r5,zero
     b7c:	1009883a 	mov	r4,r2
     b80:	000adfc0 	call	adfc <OSSemPend>
							HEX3_HEX0_pointer &= 0x00;
     b84:	00bfc834 	movhi	r2,65312
     b88:	10800804 	addi	r2,r2,32
     b8c:	10800017 	ldw	r2,0(r2)
     b90:	00bfc834 	movhi	r2,65312
     b94:	10800804 	addi	r2,r2,32
     b98:	10000015 	stw	zero,0(r2)
							HEX7_HEX4_pointer &= 0x00;
     b9c:	00bfc834 	movhi	r2,65312
     ba0:	10800c04 	addi	r2,r2,48
     ba4:	10800017 	ldw	r2,0(r2)
     ba8:	00bfc834 	movhi	r2,65312
     bac:	10800c04 	addi	r2,r2,48
     bb0:	10000015 	stw	zero,0(r2)
							OSSemPost(dispSem);
     bb4:	d0a7c517 	ldw	r2,-24812(gp)
     bb8:	1009883a 	mov	r4,r2
     bbc:	000b1740 	call	b174 <OSSemPost>
							break;
     bc0:	00018706 	br	11e0 <display_task_HEX_task+0x724>
						case IDLE:
							OSSemPend(dispSem, 0 , &err);
     bc4:	d0a7c517 	ldw	r2,-24812(gp)
     bc8:	d1a7c204 	addi	r6,gp,-24824
     bcc:	000b883a 	mov	r5,zero
     bd0:	1009883a 	mov	r4,r2
     bd4:	000adfc0 	call	adfc <OSSemPend>
							HEX3_HEX0_pointer &= 0x00;
     bd8:	00bfc834 	movhi	r2,65312
     bdc:	10800804 	addi	r2,r2,32
     be0:	10800017 	ldw	r2,0(r2)
     be4:	00bfc834 	movhi	r2,65312
     be8:	10800804 	addi	r2,r2,32
     bec:	10000015 	stw	zero,0(r2)
							HEX7_HEX4_pointer &= 0x00;
     bf0:	00bfc834 	movhi	r2,65312
     bf4:	10800c04 	addi	r2,r2,48
     bf8:	10800017 	ldw	r2,0(r2)
     bfc:	00bfc834 	movhi	r2,65312
     c00:	10800c04 	addi	r2,r2,48
     c04:	10000015 	stw	zero,0(r2)
							HEX3_HEX0_pointer |= (display_hex(question%10) & 0xFF) | ((display_hex((question/10)%10) << 8) & 0xFF00) | ((display_hex(question/100) << 16) & 0xFF0000);
     c08:	d0a7bf17 	ldw	r2,-24836(gp)
     c0c:	00c00284 	movi	r3,10
     c10:	10c7283a 	div	r3,r2,r3
     c14:	18c002a4 	muli	r3,r3,10
     c18:	10c5c83a 	sub	r2,r2,r3
     c1c:	1009883a 	mov	r4,r2
     c20:	00002840 	call	284 <display_hex>
     c24:	14003fcc 	andi	r16,r2,255
     c28:	d0e7bf17 	ldw	r3,-24836(gp)
     c2c:	00800284 	movi	r2,10
     c30:	1885283a 	div	r2,r3,r2
     c34:	00c00284 	movi	r3,10
     c38:	10c7283a 	div	r3,r2,r3
     c3c:	18c002a4 	muli	r3,r3,10
     c40:	10c5c83a 	sub	r2,r2,r3
     c44:	1009883a 	mov	r4,r2
     c48:	00002840 	call	284 <display_hex>
     c4c:	1004923a 	slli	r2,r2,8
     c50:	10bfffcc 	andi	r2,r2,65535
     c54:	80a0b03a 	or	r16,r16,r2
     c58:	d0e7bf17 	ldw	r3,-24836(gp)
     c5c:	00801904 	movi	r2,100
     c60:	1885283a 	div	r2,r3,r2
     c64:	1009883a 	mov	r4,r2
     c68:	00002840 	call	284 <display_hex>
     c6c:	1004943a 	slli	r2,r2,16
     c70:	10803fec 	andhi	r2,r2,255
     c74:	8088b03a 	or	r4,r16,r2
     c78:	00bfc834 	movhi	r2,65312
     c7c:	10800804 	addi	r2,r2,32
     c80:	00ffc834 	movhi	r3,65312
     c84:	18c00804 	addi	r3,r3,32
     c88:	18c00017 	ldw	r3,0(r3)
     c8c:	1906b03a 	or	r3,r3,r4
     c90:	10c00015 	stw	r3,0(r2)
							HEX7_HEX4_pointer = display_hex(count%10) | (display_hex(count/10) << 8)| (display_hex(point%10)<< 16 )| (display_hex(point/10) << 24);
     c94:	043fc834 	movhi	r16,65312
     c98:	84000c04 	addi	r16,r16,48
     c9c:	d0a00017 	ldw	r2,-32768(gp)
     ca0:	00c00284 	movi	r3,10
     ca4:	10c7283a 	div	r3,r2,r3
     ca8:	18c002a4 	muli	r3,r3,10
     cac:	10c5c83a 	sub	r2,r2,r3
     cb0:	1009883a 	mov	r4,r2
     cb4:	00002840 	call	284 <display_hex>
     cb8:	1023883a 	mov	r17,r2
     cbc:	d0e00017 	ldw	r3,-32768(gp)
     cc0:	00800284 	movi	r2,10
     cc4:	1885283a 	div	r2,r3,r2
     cc8:	1009883a 	mov	r4,r2
     ccc:	00002840 	call	284 <display_hex>
     cd0:	1004923a 	slli	r2,r2,8
     cd4:	88a2b03a 	or	r17,r17,r2
     cd8:	d0a7bb17 	ldw	r2,-24852(gp)
     cdc:	00c00284 	movi	r3,10
     ce0:	10c7283a 	div	r3,r2,r3
     ce4:	18c002a4 	muli	r3,r3,10
     ce8:	10c5c83a 	sub	r2,r2,r3
     cec:	1009883a 	mov	r4,r2
     cf0:	00002840 	call	284 <display_hex>
     cf4:	1004943a 	slli	r2,r2,16
     cf8:	88a2b03a 	or	r17,r17,r2
     cfc:	d0e7bb17 	ldw	r3,-24852(gp)
     d00:	00800284 	movi	r2,10
     d04:	1885283a 	div	r2,r3,r2
     d08:	1009883a 	mov	r4,r2
     d0c:	00002840 	call	284 <display_hex>
     d10:	1004963a 	slli	r2,r2,24
     d14:	8884b03a 	or	r2,r17,r2
     d18:	80800015 	stw	r2,0(r16)
							OSSemPost(dispSem);
     d1c:	d0a7c517 	ldw	r2,-24812(gp)
     d20:	1009883a 	mov	r4,r2
     d24:	000b1740 	call	b174 <OSSemPost>
							break;
     d28:	00012d06 	br	11e0 <display_task_HEX_task+0x724>
						case COUNT:
							OSSemPend(dispSem, 0 , &err);
     d2c:	d0a7c517 	ldw	r2,-24812(gp)
     d30:	d1a7c204 	addi	r6,gp,-24824
     d34:	000b883a 	mov	r5,zero
     d38:	1009883a 	mov	r4,r2
     d3c:	000adfc0 	call	adfc <OSSemPend>
							HEX3_HEX0_pointer &= 0x00;
     d40:	00bfc834 	movhi	r2,65312
     d44:	10800804 	addi	r2,r2,32
     d48:	10800017 	ldw	r2,0(r2)
     d4c:	00bfc834 	movhi	r2,65312
     d50:	10800804 	addi	r2,r2,32
     d54:	10000015 	stw	zero,0(r2)
							HEX7_HEX4_pointer &= 0x00;
     d58:	00bfc834 	movhi	r2,65312
     d5c:	10800c04 	addi	r2,r2,48
     d60:	10800017 	ldw	r2,0(r2)
     d64:	00bfc834 	movhi	r2,65312
     d68:	10800c04 	addi	r2,r2,48
     d6c:	10000015 	stw	zero,0(r2)
							HEX3_HEX0_pointer |= (display_hex(question%10) & 0xFF) | ((display_hex((question/10)%10) << 8) & 0xFF00) | ((display_hex(question/100) << 16) & 0xFF0000);
     d70:	d0a7bf17 	ldw	r2,-24836(gp)
     d74:	00c00284 	movi	r3,10
     d78:	10c7283a 	div	r3,r2,r3
     d7c:	18c002a4 	muli	r3,r3,10
     d80:	10c5c83a 	sub	r2,r2,r3
     d84:	1009883a 	mov	r4,r2
     d88:	00002840 	call	284 <display_hex>
     d8c:	14003fcc 	andi	r16,r2,255
     d90:	d0e7bf17 	ldw	r3,-24836(gp)
     d94:	00800284 	movi	r2,10
     d98:	1885283a 	div	r2,r3,r2
     d9c:	00c00284 	movi	r3,10
     da0:	10c7283a 	div	r3,r2,r3
     da4:	18c002a4 	muli	r3,r3,10
     da8:	10c5c83a 	sub	r2,r2,r3
     dac:	1009883a 	mov	r4,r2
     db0:	00002840 	call	284 <display_hex>
     db4:	1004923a 	slli	r2,r2,8
     db8:	10bfffcc 	andi	r2,r2,65535
     dbc:	80a0b03a 	or	r16,r16,r2
     dc0:	d0e7bf17 	ldw	r3,-24836(gp)
     dc4:	00801904 	movi	r2,100
     dc8:	1885283a 	div	r2,r3,r2
     dcc:	1009883a 	mov	r4,r2
     dd0:	00002840 	call	284 <display_hex>
     dd4:	1004943a 	slli	r2,r2,16
     dd8:	10803fec 	andhi	r2,r2,255
     ddc:	8088b03a 	or	r4,r16,r2
     de0:	00bfc834 	movhi	r2,65312
     de4:	10800804 	addi	r2,r2,32
     de8:	00ffc834 	movhi	r3,65312
     dec:	18c00804 	addi	r3,r3,32
     df0:	18c00017 	ldw	r3,0(r3)
     df4:	1906b03a 	or	r3,r3,r4
     df8:	10c00015 	stw	r3,0(r2)
							HEX7_HEX4_pointer = display_hex(count%10) | (display_hex(count/10) << 8)| (display_hex(point%10)<< 16 )| (display_hex(point/10) << 24);
     dfc:	043fc834 	movhi	r16,65312
     e00:	84000c04 	addi	r16,r16,48
     e04:	d0a00017 	ldw	r2,-32768(gp)
     e08:	00c00284 	movi	r3,10
     e0c:	10c7283a 	div	r3,r2,r3
     e10:	18c002a4 	muli	r3,r3,10
     e14:	10c5c83a 	sub	r2,r2,r3
     e18:	1009883a 	mov	r4,r2
     e1c:	00002840 	call	284 <display_hex>
     e20:	1023883a 	mov	r17,r2
     e24:	d0e00017 	ldw	r3,-32768(gp)
     e28:	00800284 	movi	r2,10
     e2c:	1885283a 	div	r2,r3,r2
     e30:	1009883a 	mov	r4,r2
     e34:	00002840 	call	284 <display_hex>
     e38:	1004923a 	slli	r2,r2,8
     e3c:	88a2b03a 	or	r17,r17,r2
     e40:	d0a7bb17 	ldw	r2,-24852(gp)
     e44:	00c00284 	movi	r3,10
     e48:	10c7283a 	div	r3,r2,r3
     e4c:	18c002a4 	muli	r3,r3,10
     e50:	10c5c83a 	sub	r2,r2,r3
     e54:	1009883a 	mov	r4,r2
     e58:	00002840 	call	284 <display_hex>
     e5c:	1004943a 	slli	r2,r2,16
     e60:	88a2b03a 	or	r17,r17,r2
     e64:	d0e7bb17 	ldw	r3,-24852(gp)
     e68:	00800284 	movi	r2,10
     e6c:	1885283a 	div	r2,r3,r2
     e70:	1009883a 	mov	r4,r2
     e74:	00002840 	call	284 <display_hex>
     e78:	1004963a 	slli	r2,r2,24
     e7c:	8884b03a 	or	r2,r17,r2
     e80:	80800015 	stw	r2,0(r16)
							OSSemPost(dispSem);
     e84:	d0a7c517 	ldw	r2,-24812(gp)
     e88:	1009883a 	mov	r4,r2
     e8c:	000b1740 	call	b174 <OSSemPost>
							break;
     e90:	0000d306 	br	11e0 <display_task_HEX_task+0x724>
						case PAUSE:
							OSSemPend(dispSem, 0 , &err);
     e94:	d0a7c517 	ldw	r2,-24812(gp)
     e98:	d1a7c204 	addi	r6,gp,-24824
     e9c:	000b883a 	mov	r5,zero
     ea0:	1009883a 	mov	r4,r2
     ea4:	000adfc0 	call	adfc <OSSemPend>
							HEX3_HEX0_pointer &= 0x00;
     ea8:	00bfc834 	movhi	r2,65312
     eac:	10800804 	addi	r2,r2,32
     eb0:	10800017 	ldw	r2,0(r2)
     eb4:	00bfc834 	movhi	r2,65312
     eb8:	10800804 	addi	r2,r2,32
     ebc:	10000015 	stw	zero,0(r2)
							HEX7_HEX4_pointer &= 0x00;
     ec0:	00bfc834 	movhi	r2,65312
     ec4:	10800c04 	addi	r2,r2,48
     ec8:	10800017 	ldw	r2,0(r2)
     ecc:	00bfc834 	movhi	r2,65312
     ed0:	10800c04 	addi	r2,r2,48
     ed4:	10000015 	stw	zero,0(r2)
							HEX7_HEX4_pointer = display_hex(count%10) | (display_hex(count/10) << 8)| (display_hex(point%10)<< 16 )| (display_hex(point/10) << 24);
     ed8:	043fc834 	movhi	r16,65312
     edc:	84000c04 	addi	r16,r16,48
     ee0:	d0a00017 	ldw	r2,-32768(gp)
     ee4:	00c00284 	movi	r3,10
     ee8:	10c7283a 	div	r3,r2,r3
     eec:	18c002a4 	muli	r3,r3,10
     ef0:	10c5c83a 	sub	r2,r2,r3
     ef4:	1009883a 	mov	r4,r2
     ef8:	00002840 	call	284 <display_hex>
     efc:	1023883a 	mov	r17,r2
     f00:	d0e00017 	ldw	r3,-32768(gp)
     f04:	00800284 	movi	r2,10
     f08:	1885283a 	div	r2,r3,r2
     f0c:	1009883a 	mov	r4,r2
     f10:	00002840 	call	284 <display_hex>
     f14:	1004923a 	slli	r2,r2,8
     f18:	88a2b03a 	or	r17,r17,r2
     f1c:	d0a7bb17 	ldw	r2,-24852(gp)
     f20:	00c00284 	movi	r3,10
     f24:	10c7283a 	div	r3,r2,r3
     f28:	18c002a4 	muli	r3,r3,10
     f2c:	10c5c83a 	sub	r2,r2,r3
     f30:	1009883a 	mov	r4,r2
     f34:	00002840 	call	284 <display_hex>
     f38:	1004943a 	slli	r2,r2,16
     f3c:	88a2b03a 	or	r17,r17,r2
     f40:	d0e7bb17 	ldw	r3,-24852(gp)
     f44:	00800284 	movi	r2,10
     f48:	1885283a 	div	r2,r3,r2
     f4c:	1009883a 	mov	r4,r2
     f50:	00002840 	call	284 <display_hex>
     f54:	1004963a 	slli	r2,r2,24
     f58:	8884b03a 	or	r2,r17,r2
     f5c:	80800015 	stw	r2,0(r16)
							OSSemPost(dispSem);
     f60:	d0a7c517 	ldw	r2,-24812(gp)
     f64:	1009883a 	mov	r4,r2
     f68:	000b1740 	call	b174 <OSSemPost>
							break;
     f6c:	00009c06 	br	11e0 <display_task_HEX_task+0x724>
						case FINISH:
							OSSemPend(dispSem, 0 , &err);
     f70:	d0a7c517 	ldw	r2,-24812(gp)
     f74:	d1a7c204 	addi	r6,gp,-24824
     f78:	000b883a 	mov	r5,zero
     f7c:	1009883a 	mov	r4,r2
     f80:	000adfc0 	call	adfc <OSSemPend>
							HEX3_HEX0_pointer &= 0x00;
     f84:	00bfc834 	movhi	r2,65312
     f88:	10800804 	addi	r2,r2,32
     f8c:	10800017 	ldw	r2,0(r2)
     f90:	00bfc834 	movhi	r2,65312
     f94:	10800804 	addi	r2,r2,32
     f98:	10000015 	stw	zero,0(r2)
							HEX7_HEX4_pointer &= 0x00;
     f9c:	00bfc834 	movhi	r2,65312
     fa0:	10800c04 	addi	r2,r2,48
     fa4:	10800017 	ldw	r2,0(r2)
     fa8:	00bfc834 	movhi	r2,65312
     fac:	10800c04 	addi	r2,r2,48
     fb0:	10000015 	stw	zero,0(r2)
							HEX3_HEX0_pointer = (display_hex(elapse_time%10) & (0xFF)) | ((display_hex((elapse_time%60)/10)<< 8)& 0xFF00) | ((display_hex((elapse_time/60)%10)<< 16) & 0xFF0000) | ((display_hex(elapse_time/600)<< 24)& 0xFF000000);
     fb4:	043fc834 	movhi	r16,65312
     fb8:	84000804 	addi	r16,r16,32
     fbc:	d0a7bc17 	ldw	r2,-24848(gp)
     fc0:	00c00284 	movi	r3,10
     fc4:	10c7283a 	div	r3,r2,r3
     fc8:	18c002a4 	muli	r3,r3,10
     fcc:	10c5c83a 	sub	r2,r2,r3
     fd0:	1009883a 	mov	r4,r2
     fd4:	00002840 	call	284 <display_hex>
     fd8:	14403fcc 	andi	r17,r2,255
     fdc:	d0a7bc17 	ldw	r2,-24848(gp)
     fe0:	00c00f04 	movi	r3,60
     fe4:	10c7283a 	div	r3,r2,r3
     fe8:	18c00f24 	muli	r3,r3,60
     fec:	10c7c83a 	sub	r3,r2,r3
     ff0:	00800284 	movi	r2,10
     ff4:	1885283a 	div	r2,r3,r2
     ff8:	1009883a 	mov	r4,r2
     ffc:	00002840 	call	284 <display_hex>
    1000:	1004923a 	slli	r2,r2,8
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	88a2b03a 	or	r17,r17,r2
    100c:	d0e7bc17 	ldw	r3,-24848(gp)
    1010:	00800f04 	movi	r2,60
    1014:	1885283a 	div	r2,r3,r2
    1018:	00c00284 	movi	r3,10
    101c:	10c7283a 	div	r3,r2,r3
    1020:	18c002a4 	muli	r3,r3,10
    1024:	10c5c83a 	sub	r2,r2,r3
    1028:	1009883a 	mov	r4,r2
    102c:	00002840 	call	284 <display_hex>
    1030:	1004943a 	slli	r2,r2,16
    1034:	10803fec 	andhi	r2,r2,255
    1038:	8884b03a 	or	r2,r17,r2
    103c:	1023883a 	mov	r17,r2
    1040:	d0e7bc17 	ldw	r3,-24848(gp)
    1044:	00809604 	movi	r2,600
    1048:	1885283a 	div	r2,r3,r2
    104c:	1009883a 	mov	r4,r2
    1050:	00002840 	call	284 <display_hex>
    1054:	1004963a 	slli	r2,r2,24
    1058:	8884b03a 	or	r2,r17,r2
    105c:	80800015 	stw	r2,0(r16)
							HEX7_HEX4_pointer = (display_hex(point%10)<< 16 )| (display_hex(point/10) << 24);
    1060:	043fc834 	movhi	r16,65312
    1064:	84000c04 	addi	r16,r16,48
    1068:	d0a7bb17 	ldw	r2,-24852(gp)
    106c:	00c00284 	movi	r3,10
    1070:	10c7283a 	div	r3,r2,r3
    1074:	18c002a4 	muli	r3,r3,10
    1078:	10c5c83a 	sub	r2,r2,r3
    107c:	1009883a 	mov	r4,r2
    1080:	00002840 	call	284 <display_hex>
    1084:	1022943a 	slli	r17,r2,16
    1088:	d0e7bb17 	ldw	r3,-24852(gp)
    108c:	00800284 	movi	r2,10
    1090:	1885283a 	div	r2,r3,r2
    1094:	1009883a 	mov	r4,r2
    1098:	00002840 	call	284 <display_hex>
    109c:	1004963a 	slli	r2,r2,24
    10a0:	8884b03a 	or	r2,r17,r2
    10a4:	80800015 	stw	r2,0(r16)
							OSSemPost(dispSem);
    10a8:	d0a7c517 	ldw	r2,-24812(gp)
    10ac:	1009883a 	mov	r4,r2
    10b0:	000b1740 	call	b174 <OSSemPost>
							break;
    10b4:	00004a06 	br	11e0 <display_task_HEX_task+0x724>
						default:
							OSSemPend(dispSem, 0 , &err);
    10b8:	d0a7c517 	ldw	r2,-24812(gp)
    10bc:	d1a7c204 	addi	r6,gp,-24824
    10c0:	000b883a 	mov	r5,zero
    10c4:	1009883a 	mov	r4,r2
    10c8:	000adfc0 	call	adfc <OSSemPend>
							HEX3_HEX0_pointer &= 0x00;
    10cc:	00bfc834 	movhi	r2,65312
    10d0:	10800804 	addi	r2,r2,32
    10d4:	10800017 	ldw	r2,0(r2)
    10d8:	00bfc834 	movhi	r2,65312
    10dc:	10800804 	addi	r2,r2,32
    10e0:	10000015 	stw	zero,0(r2)
							HEX7_HEX4_pointer &= 0x00;
    10e4:	00bfc834 	movhi	r2,65312
    10e8:	10800c04 	addi	r2,r2,48
    10ec:	10800017 	ldw	r2,0(r2)
    10f0:	00bfc834 	movhi	r2,65312
    10f4:	10800c04 	addi	r2,r2,48
    10f8:	10000015 	stw	zero,0(r2)
							HEX3_HEX0_pointer |= (display_hex(question%10) & 0xFF) | ((display_hex((question/10)%10) << 8) & 0xFF00) | ((display_hex(question/100) << 16) & 0xFF0000);
    10fc:	d0a7bf17 	ldw	r2,-24836(gp)
    1100:	00c00284 	movi	r3,10
    1104:	10c7283a 	div	r3,r2,r3
    1108:	18c002a4 	muli	r3,r3,10
    110c:	10c5c83a 	sub	r2,r2,r3
    1110:	1009883a 	mov	r4,r2
    1114:	00002840 	call	284 <display_hex>
    1118:	14003fcc 	andi	r16,r2,255
    111c:	d0e7bf17 	ldw	r3,-24836(gp)
    1120:	00800284 	movi	r2,10
    1124:	1885283a 	div	r2,r3,r2
    1128:	00c00284 	movi	r3,10
    112c:	10c7283a 	div	r3,r2,r3
    1130:	18c002a4 	muli	r3,r3,10
    1134:	10c5c83a 	sub	r2,r2,r3
    1138:	1009883a 	mov	r4,r2
    113c:	00002840 	call	284 <display_hex>
    1140:	1004923a 	slli	r2,r2,8
    1144:	10bfffcc 	andi	r2,r2,65535
    1148:	80a0b03a 	or	r16,r16,r2
    114c:	d0e7bf17 	ldw	r3,-24836(gp)
    1150:	00801904 	movi	r2,100
    1154:	1885283a 	div	r2,r3,r2
    1158:	1009883a 	mov	r4,r2
    115c:	00002840 	call	284 <display_hex>
    1160:	1004943a 	slli	r2,r2,16
    1164:	10803fec 	andhi	r2,r2,255
    1168:	8088b03a 	or	r4,r16,r2
    116c:	00bfc834 	movhi	r2,65312
    1170:	10800804 	addi	r2,r2,32
    1174:	00ffc834 	movhi	r3,65312
    1178:	18c00804 	addi	r3,r3,32
    117c:	18c00017 	ldw	r3,0(r3)
    1180:	1906b03a 	or	r3,r3,r4
    1184:	10c00015 	stw	r3,0(r2)
							HEX7_HEX4_pointer = display_hex(count%10) | (display_hex(count/10) << 8);
    1188:	043fc834 	movhi	r16,65312
    118c:	84000c04 	addi	r16,r16,48
    1190:	d0a00017 	ldw	r2,-32768(gp)
    1194:	00c00284 	movi	r3,10
    1198:	10c7283a 	div	r3,r2,r3
    119c:	18c002a4 	muli	r3,r3,10
    11a0:	10c5c83a 	sub	r2,r2,r3
    11a4:	1009883a 	mov	r4,r2
    11a8:	00002840 	call	284 <display_hex>
    11ac:	1023883a 	mov	r17,r2
    11b0:	d0e00017 	ldw	r3,-32768(gp)
    11b4:	00800284 	movi	r2,10
    11b8:	1885283a 	div	r2,r3,r2
    11bc:	1009883a 	mov	r4,r2
    11c0:	00002840 	call	284 <display_hex>
    11c4:	1004923a 	slli	r2,r2,8
    11c8:	8884b03a 	or	r2,r17,r2
    11cc:	80800015 	stw	r2,0(r16)
							OSSemPost(dispSem);
    11d0:	d0a7c517 	ldw	r2,-24812(gp)
    11d4:	1009883a 	mov	r4,r2
    11d8:	000b1740 	call	b174 <OSSemPost>
							break;
    11dc:	0001883a 	nop
		}
		OSTaskSuspend(OS_PRIO_SELF); // 12
    11e0:	01003fc4 	movi	r4,255
    11e4:	000c8880 	call	c888 <OSTaskSuspend>
	}
    11e8:	003e3b06 	br	ad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ad8>

000011ec <button_press_task>:
}



void button_press_task(void* pdata)
{
    11ec:	defffd04 	addi	sp,sp,-12
    11f0:	dfc00215 	stw	ra,8(sp)
    11f4:	df000115 	stw	fp,4(sp)
    11f8:	df000104 	addi	fp,sp,4
    11fc:	e13fff15 	stw	r4,-4(fp)

	while (1){
//		printf("button press task running\n");
		LEDG_pointer &= 0x00; // clear LEDG
    1200:	00bfc834 	movhi	r2,65312
    1204:	10800404 	addi	r2,r2,16
    1208:	10800017 	ldw	r2,0(r2)
    120c:	00bfc834 	movhi	r2,65312
    1210:	10800404 	addi	r2,r2,16
    1214:	10000015 	stw	zero,0(r2)
		OSSemPend(dispSem, 0 , &err);
    1218:	d0a7c517 	ldw	r2,-24812(gp)
    121c:	d1a7c204 	addi	r6,gp,-24824
    1220:	000b883a 	mov	r5,zero
    1224:	1009883a 	mov	r4,r2
    1228:	000adfc0 	call	adfc <OSSemPend>
		switch(state){
    122c:	d0a00117 	ldw	r2,-32764(gp)
    1230:	10c00060 	cmpeqi	r3,r2,1
    1234:	1800121e 	bne	r3,zero,1280 <button_press_task+0x94>
    1238:	10c000a0 	cmpeqi	r3,r2,2
    123c:	18002a1e 	bne	r3,zero,12e8 <button_press_task+0xfc>
    1240:	10000126 	beq	r2,zero,1248 <button_press_task+0x5c>
					state = IDLE;
				}

				break;
			default:
				break;
    1244:	00004706 	br	1364 <button_press_task+0x178>
		LEDG_pointer &= 0x00; // clear LEDG
		OSSemPend(dispSem, 0 , &err);
		switch(state){
			case IDLE:

				if(KEY_pointer & 0x02){
    1248:	00bfc834 	movhi	r2,65312
    124c:	10801404 	addi	r2,r2,80
    1250:	10800017 	ldw	r2,0(r2)
    1254:	1080008c 	andi	r2,r2,2
    1258:	10003d26 	beq	r2,zero,1350 <button_press_task+0x164>

					LEDG_pointer = KEY_pointer;
    125c:	00bfc834 	movhi	r2,65312
    1260:	10800404 	addi	r2,r2,16
    1264:	00ffc834 	movhi	r3,65312
    1268:	18c01404 	addi	r3,r3,80
    126c:	18c00017 	ldw	r3,0(r3)
    1270:	10c00015 	stw	r3,0(r2)
					state = COUNT;
    1274:	00800044 	movi	r2,1
    1278:	d0a00115 	stw	r2,-32764(gp)
				}
//				OSSemPost(dispSem);
				break;
    127c:	00003406 	br	1350 <button_press_task+0x164>
			case COUNT:

				if(KEY_pointer & 0x02){
    1280:	00bfc834 	movhi	r2,65312
    1284:	10801404 	addi	r2,r2,80
    1288:	10800017 	ldw	r2,0(r2)
    128c:	1080008c 	andi	r2,r2,2
    1290:	10000826 	beq	r2,zero,12b4 <button_press_task+0xc8>

					LEDG_pointer = KEY_pointer;
    1294:	00bfc834 	movhi	r2,65312
    1298:	10800404 	addi	r2,r2,16
    129c:	00ffc834 	movhi	r3,65312
    12a0:	18c01404 	addi	r3,r3,80
    12a4:	18c00017 	ldw	r3,0(r3)
    12a8:	10c00015 	stw	r3,0(r2)
					state = PAUSE;
    12ac:	00800084 	movi	r2,2
    12b0:	d0a00115 	stw	r2,-32764(gp)
				}

				if (KEY_pointer & 0x04){
    12b4:	00bfc834 	movhi	r2,65312
    12b8:	10801404 	addi	r2,r2,80
    12bc:	10800017 	ldw	r2,0(r2)
    12c0:	1080010c 	andi	r2,r2,4
    12c4:	10002426 	beq	r2,zero,1358 <button_press_task+0x16c>

					LEDG_pointer = KEY_pointer;
    12c8:	00bfc834 	movhi	r2,65312
    12cc:	10800404 	addi	r2,r2,16
    12d0:	00ffc834 	movhi	r3,65312
    12d4:	18c01404 	addi	r3,r3,80
    12d8:	18c00017 	ldw	r3,0(r3)
    12dc:	10c00015 	stw	r3,0(r2)
					submit_answer();
    12e0:	00004340 	call	434 <submit_answer>
				}
//				OSSemPost(dispSem);
				break;
    12e4:	00001c06 	br	1358 <button_press_task+0x16c>
			case PAUSE:

				if(KEY_pointer & 0x02){
    12e8:	00bfc834 	movhi	r2,65312
    12ec:	10801404 	addi	r2,r2,80
    12f0:	10800017 	ldw	r2,0(r2)
    12f4:	1080008c 	andi	r2,r2,2
    12f8:	10000826 	beq	r2,zero,131c <button_press_task+0x130>

					LEDG_pointer = KEY_pointer;
    12fc:	00bfc834 	movhi	r2,65312
    1300:	10800404 	addi	r2,r2,16
    1304:	00ffc834 	movhi	r3,65312
    1308:	18c01404 	addi	r3,r3,80
    130c:	18c00017 	ldw	r3,0(r3)
    1310:	10c00015 	stw	r3,0(r2)
					state = COUNT;
    1314:	00800044 	movi	r2,1
    1318:	d0a00115 	stw	r2,-32764(gp)
				}
				if (KEY_pointer & 0x01){
    131c:	00bfc834 	movhi	r2,65312
    1320:	10801404 	addi	r2,r2,80
    1324:	10800017 	ldw	r2,0(r2)
    1328:	1080004c 	andi	r2,r2,1
    132c:	10000c26 	beq	r2,zero,1360 <button_press_task+0x174>
					LEDG_pointer = KEY_pointer;
    1330:	00bfc834 	movhi	r2,65312
    1334:	10800404 	addi	r2,r2,16
    1338:	00ffc834 	movhi	r3,65312
    133c:	18c01404 	addi	r3,r3,80
    1340:	18c00017 	ldw	r3,0(r3)
    1344:	10c00015 	stw	r3,0(r2)
					state = IDLE;
    1348:	d0200115 	stw	zero,-32764(gp)
				}

				break;
    134c:	00000406 	br	1360 <button_press_task+0x174>

					LEDG_pointer = KEY_pointer;
					state = COUNT;
				}
//				OSSemPost(dispSem);
				break;
    1350:	0001883a 	nop
    1354:	00000306 	br	1364 <button_press_task+0x178>

					LEDG_pointer = KEY_pointer;
					submit_answer();
				}
//				OSSemPost(dispSem);
				break;
    1358:	0001883a 	nop
    135c:	00000106 	br	1364 <button_press_task+0x178>
				if (KEY_pointer & 0x01){
					LEDG_pointer = KEY_pointer;
					state = IDLE;
				}

				break;
    1360:	0001883a 	nop
			default:
				break;

			}
		mailBoxErr = OSMboxPostOpt(BPMBox, (void*)&state,OS_POST_OPT_BROADCAST);
    1364:	d0a7c117 	ldw	r2,-24828(gp)
    1368:	01800044 	movi	r6,1
    136c:	d1600104 	addi	r5,gp,-32764
    1370:	1009883a 	mov	r4,r2
    1374:	0008f700 	call	8f70 <OSMboxPostOpt>
    1378:	d0a7c005 	stb	r2,-24832(gp)
		switch (mailBoxErr){
    137c:	d0a7c003 	ldbu	r2,-24832(gp)
    1380:	10803fcc 	andi	r2,r2,255
    1384:	10000326 	beq	r2,zero,1394 <button_press_task+0x1a8>
    1388:	10800520 	cmpeqi	r2,r2,20
    138c:	1000051e 	bne	r2,zero,13a4 <button_press_task+0x1b8>
    1390:	00000806 	br	13b4 <button_press_task+0x1c8>
			case OS_NO_ERR:
				// release key and send message
				OSSemPost(dispSem);
    1394:	d0a7c517 	ldw	r2,-24812(gp)
    1398:	1009883a 	mov	r4,r2
    139c:	000b1740 	call	b174 <OSSemPost>
				break;
    13a0:	00000406 	br	13b4 <button_press_task+0x1c8>
			case OS_MBOX_FULL:
				printf("mail box is full full\n");
    13a4:	01000074 	movhi	r4,1
    13a8:	21043504 	addi	r4,r4,4308
    13ac:	00014800 	call	1480 <puts>
				break;
    13b0:	0001883a 	nop
			}
		OSTaskResume(12); // resume display_task_HEX_task
    13b4:	01000304 	movi	r4,12
    13b8:	000c4f40 	call	c4f4 <OSTaskResume>
	}
    13bc:	003f9006 	br	1200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001200>

000013c0 <_puts_r>:
    13c0:	defff604 	addi	sp,sp,-40
    13c4:	dc000715 	stw	r16,28(sp)
    13c8:	2021883a 	mov	r16,r4
    13cc:	2809883a 	mov	r4,r5
    13d0:	dc400815 	stw	r17,32(sp)
    13d4:	dfc00915 	stw	ra,36(sp)
    13d8:	2823883a 	mov	r17,r5
    13dc:	000150c0 	call	150c <strlen>
    13e0:	10c00044 	addi	r3,r2,1
    13e4:	d8800115 	stw	r2,4(sp)
    13e8:	00800074 	movhi	r2,1
    13ec:	10843b04 	addi	r2,r2,4332
    13f0:	d8800215 	stw	r2,8(sp)
    13f4:	00800044 	movi	r2,1
    13f8:	d8800315 	stw	r2,12(sp)
    13fc:	00800084 	movi	r2,2
    1400:	dc400015 	stw	r17,0(sp)
    1404:	d8c00615 	stw	r3,24(sp)
    1408:	dec00415 	stw	sp,16(sp)
    140c:	d8800515 	stw	r2,20(sp)
    1410:	80000226 	beq	r16,zero,141c <_puts_r+0x5c>
    1414:	80800e17 	ldw	r2,56(r16)
    1418:	10001426 	beq	r2,zero,146c <_puts_r+0xac>
    141c:	81400217 	ldw	r5,8(r16)
    1420:	2880030b 	ldhu	r2,12(r5)
    1424:	10c8000c 	andi	r3,r2,8192
    1428:	1800061e 	bne	r3,zero,1444 <_puts_r+0x84>
    142c:	29001917 	ldw	r4,100(r5)
    1430:	00f7ffc4 	movi	r3,-8193
    1434:	10880014 	ori	r2,r2,8192
    1438:	20c6703a 	and	r3,r4,r3
    143c:	2880030d 	sth	r2,12(r5)
    1440:	28c01915 	stw	r3,100(r5)
    1444:	d9800404 	addi	r6,sp,16
    1448:	8009883a 	mov	r4,r16
    144c:	00019440 	call	1944 <__sfvwrite_r>
    1450:	1000091e 	bne	r2,zero,1478 <_puts_r+0xb8>
    1454:	00800284 	movi	r2,10
    1458:	dfc00917 	ldw	ra,36(sp)
    145c:	dc400817 	ldw	r17,32(sp)
    1460:	dc000717 	ldw	r16,28(sp)
    1464:	dec00a04 	addi	sp,sp,40
    1468:	f800283a 	ret
    146c:	8009883a 	mov	r4,r16
    1470:	00018f40 	call	18f4 <__sinit>
    1474:	003fe906 	br	141c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700141c>
    1478:	00bfffc4 	movi	r2,-1
    147c:	003ff606 	br	1458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001458>

00001480 <puts>:
    1480:	00800074 	movhi	r2,1
    1484:	108c4404 	addi	r2,r2,12560
    1488:	200b883a 	mov	r5,r4
    148c:	11000017 	ldw	r4,0(r2)
    1490:	00013c01 	jmpi	13c0 <_puts_r>

00001494 <srand>:
    1494:	00800074 	movhi	r2,1
    1498:	108c4404 	addi	r2,r2,12560
    149c:	10800017 	ldw	r2,0(r2)
    14a0:	11002915 	stw	r4,164(r2)
    14a4:	10002a15 	stw	zero,168(r2)
    14a8:	f800283a 	ret

000014ac <rand>:
    14ac:	00800074 	movhi	r2,1
    14b0:	108c4404 	addi	r2,r2,12560
    14b4:	11c00017 	ldw	r7,0(r2)
    14b8:	01532574 	movhi	r5,19605
    14bc:	019614b4 	movhi	r6,22610
    14c0:	38c02917 	ldw	r3,164(r7)
    14c4:	39002a17 	ldw	r4,168(r7)
    14c8:	295fcb44 	addi	r5,r5,32557
    14cc:	31bd0b44 	addi	r6,r6,-3027
    14d0:	1951383a 	mul	r8,r3,r5
    14d4:	2149383a 	mul	r4,r4,r5
    14d8:	198d383a 	mul	r6,r3,r6
    14dc:	194a383a 	mulxuu	r5,r3,r5
    14e0:	40800044 	addi	r2,r8,1
    14e4:	2187883a 	add	r3,r4,r6
    14e8:	1949883a 	add	r4,r3,r5
    14ec:	38802915 	stw	r2,164(r7)
    14f0:	1207803a 	cmpltu	r3,r2,r8
    14f4:	00a00034 	movhi	r2,32768
    14f8:	1907883a 	add	r3,r3,r4
    14fc:	10bfffc4 	addi	r2,r2,-1
    1500:	38c02a15 	stw	r3,168(r7)
    1504:	1884703a 	and	r2,r3,r2
    1508:	f800283a 	ret

0000150c <strlen>:
    150c:	208000cc 	andi	r2,r4,3
    1510:	10002026 	beq	r2,zero,1594 <strlen+0x88>
    1514:	20800007 	ldb	r2,0(r4)
    1518:	10002026 	beq	r2,zero,159c <strlen+0x90>
    151c:	2005883a 	mov	r2,r4
    1520:	00000206 	br	152c <strlen+0x20>
    1524:	10c00007 	ldb	r3,0(r2)
    1528:	18001826 	beq	r3,zero,158c <strlen+0x80>
    152c:	10800044 	addi	r2,r2,1
    1530:	10c000cc 	andi	r3,r2,3
    1534:	183ffb1e 	bne	r3,zero,1524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001524>
    1538:	10c00017 	ldw	r3,0(r2)
    153c:	01ffbff4 	movhi	r7,65279
    1540:	39ffbfc4 	addi	r7,r7,-257
    1544:	00ca303a 	nor	r5,zero,r3
    1548:	01a02074 	movhi	r6,32897
    154c:	19c7883a 	add	r3,r3,r7
    1550:	31a02004 	addi	r6,r6,-32640
    1554:	1946703a 	and	r3,r3,r5
    1558:	1986703a 	and	r3,r3,r6
    155c:	1800091e 	bne	r3,zero,1584 <strlen+0x78>
    1560:	10800104 	addi	r2,r2,4
    1564:	10c00017 	ldw	r3,0(r2)
    1568:	19cb883a 	add	r5,r3,r7
    156c:	00c6303a 	nor	r3,zero,r3
    1570:	28c6703a 	and	r3,r5,r3
    1574:	1986703a 	and	r3,r3,r6
    1578:	183ff926 	beq	r3,zero,1560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001560>
    157c:	00000106 	br	1584 <strlen+0x78>
    1580:	10800044 	addi	r2,r2,1
    1584:	10c00007 	ldb	r3,0(r2)
    1588:	183ffd1e 	bne	r3,zero,1580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001580>
    158c:	1105c83a 	sub	r2,r2,r4
    1590:	f800283a 	ret
    1594:	2005883a 	mov	r2,r4
    1598:	003fe706 	br	1538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001538>
    159c:	0005883a 	mov	r2,zero
    15a0:	f800283a 	ret

000015a4 <__fp_unlock>:
    15a4:	0005883a 	mov	r2,zero
    15a8:	f800283a 	ret

000015ac <_cleanup_r>:
    15ac:	01400034 	movhi	r5,0
    15b0:	294d5004 	addi	r5,r5,13632
    15b4:	0001ec41 	jmpi	1ec4 <_fwalk_reent>

000015b8 <__sinit.part.1>:
    15b8:	defff704 	addi	sp,sp,-36
    15bc:	00c00034 	movhi	r3,0
    15c0:	dfc00815 	stw	ra,32(sp)
    15c4:	ddc00715 	stw	r23,28(sp)
    15c8:	dd800615 	stw	r22,24(sp)
    15cc:	dd400515 	stw	r21,20(sp)
    15d0:	dd000415 	stw	r20,16(sp)
    15d4:	dcc00315 	stw	r19,12(sp)
    15d8:	dc800215 	stw	r18,8(sp)
    15dc:	dc400115 	stw	r17,4(sp)
    15e0:	dc000015 	stw	r16,0(sp)
    15e4:	18c56b04 	addi	r3,r3,5548
    15e8:	24000117 	ldw	r16,4(r4)
    15ec:	20c00f15 	stw	r3,60(r4)
    15f0:	2080bb04 	addi	r2,r4,748
    15f4:	00c000c4 	movi	r3,3
    15f8:	20c0b915 	stw	r3,740(r4)
    15fc:	2080ba15 	stw	r2,744(r4)
    1600:	2000b815 	stw	zero,736(r4)
    1604:	05c00204 	movi	r23,8
    1608:	00800104 	movi	r2,4
    160c:	2025883a 	mov	r18,r4
    1610:	b80d883a 	mov	r6,r23
    1614:	81001704 	addi	r4,r16,92
    1618:	000b883a 	mov	r5,zero
    161c:	80000015 	stw	zero,0(r16)
    1620:	80000115 	stw	zero,4(r16)
    1624:	80000215 	stw	zero,8(r16)
    1628:	8080030d 	sth	r2,12(r16)
    162c:	80001915 	stw	zero,100(r16)
    1630:	8000038d 	sth	zero,14(r16)
    1634:	80000415 	stw	zero,16(r16)
    1638:	80000515 	stw	zero,20(r16)
    163c:	80000615 	stw	zero,24(r16)
    1640:	0002b1c0 	call	2b1c <memset>
    1644:	05800034 	movhi	r22,0
    1648:	94400217 	ldw	r17,8(r18)
    164c:	05400034 	movhi	r21,0
    1650:	05000034 	movhi	r20,0
    1654:	04c00034 	movhi	r19,0
    1658:	b58c7f04 	addi	r22,r22,12796
    165c:	ad4c9604 	addi	r21,r21,12888
    1660:	a50cb504 	addi	r20,r20,13012
    1664:	9ccccc04 	addi	r19,r19,13104
    1668:	85800815 	stw	r22,32(r16)
    166c:	85400915 	stw	r21,36(r16)
    1670:	85000a15 	stw	r20,40(r16)
    1674:	84c00b15 	stw	r19,44(r16)
    1678:	84000715 	stw	r16,28(r16)
    167c:	00800284 	movi	r2,10
    1680:	8880030d 	sth	r2,12(r17)
    1684:	00800044 	movi	r2,1
    1688:	b80d883a 	mov	r6,r23
    168c:	89001704 	addi	r4,r17,92
    1690:	000b883a 	mov	r5,zero
    1694:	88000015 	stw	zero,0(r17)
    1698:	88000115 	stw	zero,4(r17)
    169c:	88000215 	stw	zero,8(r17)
    16a0:	88001915 	stw	zero,100(r17)
    16a4:	8880038d 	sth	r2,14(r17)
    16a8:	88000415 	stw	zero,16(r17)
    16ac:	88000515 	stw	zero,20(r17)
    16b0:	88000615 	stw	zero,24(r17)
    16b4:	0002b1c0 	call	2b1c <memset>
    16b8:	94000317 	ldw	r16,12(r18)
    16bc:	00800484 	movi	r2,18
    16c0:	8c400715 	stw	r17,28(r17)
    16c4:	8d800815 	stw	r22,32(r17)
    16c8:	8d400915 	stw	r21,36(r17)
    16cc:	8d000a15 	stw	r20,40(r17)
    16d0:	8cc00b15 	stw	r19,44(r17)
    16d4:	8080030d 	sth	r2,12(r16)
    16d8:	00800084 	movi	r2,2
    16dc:	80000015 	stw	zero,0(r16)
    16e0:	80000115 	stw	zero,4(r16)
    16e4:	80000215 	stw	zero,8(r16)
    16e8:	80001915 	stw	zero,100(r16)
    16ec:	8080038d 	sth	r2,14(r16)
    16f0:	80000415 	stw	zero,16(r16)
    16f4:	80000515 	stw	zero,20(r16)
    16f8:	80000615 	stw	zero,24(r16)
    16fc:	b80d883a 	mov	r6,r23
    1700:	000b883a 	mov	r5,zero
    1704:	81001704 	addi	r4,r16,92
    1708:	0002b1c0 	call	2b1c <memset>
    170c:	00800044 	movi	r2,1
    1710:	84000715 	stw	r16,28(r16)
    1714:	85800815 	stw	r22,32(r16)
    1718:	85400915 	stw	r21,36(r16)
    171c:	85000a15 	stw	r20,40(r16)
    1720:	84c00b15 	stw	r19,44(r16)
    1724:	90800e15 	stw	r2,56(r18)
    1728:	dfc00817 	ldw	ra,32(sp)
    172c:	ddc00717 	ldw	r23,28(sp)
    1730:	dd800617 	ldw	r22,24(sp)
    1734:	dd400517 	ldw	r21,20(sp)
    1738:	dd000417 	ldw	r20,16(sp)
    173c:	dcc00317 	ldw	r19,12(sp)
    1740:	dc800217 	ldw	r18,8(sp)
    1744:	dc400117 	ldw	r17,4(sp)
    1748:	dc000017 	ldw	r16,0(sp)
    174c:	dec00904 	addi	sp,sp,36
    1750:	f800283a 	ret

00001754 <__fp_lock>:
    1754:	0005883a 	mov	r2,zero
    1758:	f800283a 	ret

0000175c <__sfmoreglue>:
    175c:	defffc04 	addi	sp,sp,-16
    1760:	dc400115 	stw	r17,4(sp)
    1764:	2c7fffc4 	addi	r17,r5,-1
    1768:	8c401a24 	muli	r17,r17,104
    176c:	dc800215 	stw	r18,8(sp)
    1770:	2825883a 	mov	r18,r5
    1774:	89401d04 	addi	r5,r17,116
    1778:	dc000015 	stw	r16,0(sp)
    177c:	dfc00315 	stw	ra,12(sp)
    1780:	0001f880 	call	1f88 <_malloc_r>
    1784:	1021883a 	mov	r16,r2
    1788:	10000726 	beq	r2,zero,17a8 <__sfmoreglue+0x4c>
    178c:	11000304 	addi	r4,r2,12
    1790:	10000015 	stw	zero,0(r2)
    1794:	14800115 	stw	r18,4(r2)
    1798:	11000215 	stw	r4,8(r2)
    179c:	89801a04 	addi	r6,r17,104
    17a0:	000b883a 	mov	r5,zero
    17a4:	0002b1c0 	call	2b1c <memset>
    17a8:	8005883a 	mov	r2,r16
    17ac:	dfc00317 	ldw	ra,12(sp)
    17b0:	dc800217 	ldw	r18,8(sp)
    17b4:	dc400117 	ldw	r17,4(sp)
    17b8:	dc000017 	ldw	r16,0(sp)
    17bc:	dec00404 	addi	sp,sp,16
    17c0:	f800283a 	ret

000017c4 <__sfp>:
    17c4:	defffb04 	addi	sp,sp,-20
    17c8:	dc000015 	stw	r16,0(sp)
    17cc:	04000074 	movhi	r16,1
    17d0:	840c4304 	addi	r16,r16,12556
    17d4:	dcc00315 	stw	r19,12(sp)
    17d8:	2027883a 	mov	r19,r4
    17dc:	81000017 	ldw	r4,0(r16)
    17e0:	dfc00415 	stw	ra,16(sp)
    17e4:	dc800215 	stw	r18,8(sp)
    17e8:	20800e17 	ldw	r2,56(r4)
    17ec:	dc400115 	stw	r17,4(sp)
    17f0:	1000021e 	bne	r2,zero,17fc <__sfp+0x38>
    17f4:	00015b80 	call	15b8 <__sinit.part.1>
    17f8:	81000017 	ldw	r4,0(r16)
    17fc:	2480b804 	addi	r18,r4,736
    1800:	047fffc4 	movi	r17,-1
    1804:	91000117 	ldw	r4,4(r18)
    1808:	94000217 	ldw	r16,8(r18)
    180c:	213fffc4 	addi	r4,r4,-1
    1810:	20000a16 	blt	r4,zero,183c <__sfp+0x78>
    1814:	8080030f 	ldh	r2,12(r16)
    1818:	10000c26 	beq	r2,zero,184c <__sfp+0x88>
    181c:	80c01d04 	addi	r3,r16,116
    1820:	00000206 	br	182c <__sfp+0x68>
    1824:	18bfe60f 	ldh	r2,-104(r3)
    1828:	10000826 	beq	r2,zero,184c <__sfp+0x88>
    182c:	213fffc4 	addi	r4,r4,-1
    1830:	1c3ffd04 	addi	r16,r3,-12
    1834:	18c01a04 	addi	r3,r3,104
    1838:	247ffa1e 	bne	r4,r17,1824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001824>
    183c:	90800017 	ldw	r2,0(r18)
    1840:	10001d26 	beq	r2,zero,18b8 <__sfp+0xf4>
    1844:	1025883a 	mov	r18,r2
    1848:	003fee06 	br	1804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001804>
    184c:	00bfffc4 	movi	r2,-1
    1850:	8080038d 	sth	r2,14(r16)
    1854:	00800044 	movi	r2,1
    1858:	8080030d 	sth	r2,12(r16)
    185c:	80001915 	stw	zero,100(r16)
    1860:	80000015 	stw	zero,0(r16)
    1864:	80000215 	stw	zero,8(r16)
    1868:	80000115 	stw	zero,4(r16)
    186c:	80000415 	stw	zero,16(r16)
    1870:	80000515 	stw	zero,20(r16)
    1874:	80000615 	stw	zero,24(r16)
    1878:	01800204 	movi	r6,8
    187c:	000b883a 	mov	r5,zero
    1880:	81001704 	addi	r4,r16,92
    1884:	0002b1c0 	call	2b1c <memset>
    1888:	8005883a 	mov	r2,r16
    188c:	80000c15 	stw	zero,48(r16)
    1890:	80000d15 	stw	zero,52(r16)
    1894:	80001115 	stw	zero,68(r16)
    1898:	80001215 	stw	zero,72(r16)
    189c:	dfc00417 	ldw	ra,16(sp)
    18a0:	dcc00317 	ldw	r19,12(sp)
    18a4:	dc800217 	ldw	r18,8(sp)
    18a8:	dc400117 	ldw	r17,4(sp)
    18ac:	dc000017 	ldw	r16,0(sp)
    18b0:	dec00504 	addi	sp,sp,20
    18b4:	f800283a 	ret
    18b8:	01400104 	movi	r5,4
    18bc:	9809883a 	mov	r4,r19
    18c0:	000175c0 	call	175c <__sfmoreglue>
    18c4:	90800015 	stw	r2,0(r18)
    18c8:	103fde1e 	bne	r2,zero,1844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001844>
    18cc:	00800304 	movi	r2,12
    18d0:	98800015 	stw	r2,0(r19)
    18d4:	0005883a 	mov	r2,zero
    18d8:	003ff006 	br	189c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700189c>

000018dc <_cleanup>:
    18dc:	00800074 	movhi	r2,1
    18e0:	108c4304 	addi	r2,r2,12556
    18e4:	11000017 	ldw	r4,0(r2)
    18e8:	01400034 	movhi	r5,0
    18ec:	294d5004 	addi	r5,r5,13632
    18f0:	0001ec41 	jmpi	1ec4 <_fwalk_reent>

000018f4 <__sinit>:
    18f4:	20800e17 	ldw	r2,56(r4)
    18f8:	10000126 	beq	r2,zero,1900 <__sinit+0xc>
    18fc:	f800283a 	ret
    1900:	00015b81 	jmpi	15b8 <__sinit.part.1>

00001904 <__sfp_lock_acquire>:
    1904:	f800283a 	ret

00001908 <__sfp_lock_release>:
    1908:	f800283a 	ret

0000190c <__sinit_lock_acquire>:
    190c:	f800283a 	ret

00001910 <__sinit_lock_release>:
    1910:	f800283a 	ret

00001914 <__fp_lock_all>:
    1914:	00800074 	movhi	r2,1
    1918:	108c4404 	addi	r2,r2,12560
    191c:	11000017 	ldw	r4,0(r2)
    1920:	01400034 	movhi	r5,0
    1924:	2945d504 	addi	r5,r5,5972
    1928:	0001e001 	jmpi	1e00 <_fwalk>

0000192c <__fp_unlock_all>:
    192c:	00800074 	movhi	r2,1
    1930:	108c4404 	addi	r2,r2,12560
    1934:	11000017 	ldw	r4,0(r2)
    1938:	01400034 	movhi	r5,0
    193c:	29456904 	addi	r5,r5,5540
    1940:	0001e001 	jmpi	1e00 <_fwalk>

00001944 <__sfvwrite_r>:
    1944:	30800217 	ldw	r2,8(r6)
    1948:	10006726 	beq	r2,zero,1ae8 <__sfvwrite_r+0x1a4>
    194c:	28c0030b 	ldhu	r3,12(r5)
    1950:	defff404 	addi	sp,sp,-48
    1954:	dd400715 	stw	r21,28(sp)
    1958:	dd000615 	stw	r20,24(sp)
    195c:	dc000215 	stw	r16,8(sp)
    1960:	dfc00b15 	stw	ra,44(sp)
    1964:	df000a15 	stw	fp,40(sp)
    1968:	ddc00915 	stw	r23,36(sp)
    196c:	dd800815 	stw	r22,32(sp)
    1970:	dcc00515 	stw	r19,20(sp)
    1974:	dc800415 	stw	r18,16(sp)
    1978:	dc400315 	stw	r17,12(sp)
    197c:	1880020c 	andi	r2,r3,8
    1980:	2821883a 	mov	r16,r5
    1984:	202b883a 	mov	r21,r4
    1988:	3029883a 	mov	r20,r6
    198c:	10002726 	beq	r2,zero,1a2c <__sfvwrite_r+0xe8>
    1990:	28800417 	ldw	r2,16(r5)
    1994:	10002526 	beq	r2,zero,1a2c <__sfvwrite_r+0xe8>
    1998:	1880008c 	andi	r2,r3,2
    199c:	a4400017 	ldw	r17,0(r20)
    19a0:	10002a26 	beq	r2,zero,1a4c <__sfvwrite_r+0x108>
    19a4:	05a00034 	movhi	r22,32768
    19a8:	0027883a 	mov	r19,zero
    19ac:	0025883a 	mov	r18,zero
    19b0:	b5bf0004 	addi	r22,r22,-1024
    19b4:	980d883a 	mov	r6,r19
    19b8:	a809883a 	mov	r4,r21
    19bc:	90004626 	beq	r18,zero,1ad8 <__sfvwrite_r+0x194>
    19c0:	900f883a 	mov	r7,r18
    19c4:	b480022e 	bgeu	r22,r18,19d0 <__sfvwrite_r+0x8c>
    19c8:	01e00034 	movhi	r7,32768
    19cc:	39ff0004 	addi	r7,r7,-1024
    19d0:	80800917 	ldw	r2,36(r16)
    19d4:	81400717 	ldw	r5,28(r16)
    19d8:	103ee83a 	callr	r2
    19dc:	0080570e 	bge	zero,r2,1b3c <__sfvwrite_r+0x1f8>
    19e0:	a0c00217 	ldw	r3,8(r20)
    19e4:	98a7883a 	add	r19,r19,r2
    19e8:	90a5c83a 	sub	r18,r18,r2
    19ec:	1885c83a 	sub	r2,r3,r2
    19f0:	a0800215 	stw	r2,8(r20)
    19f4:	103fef1e 	bne	r2,zero,19b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019b4>
    19f8:	0005883a 	mov	r2,zero
    19fc:	dfc00b17 	ldw	ra,44(sp)
    1a00:	df000a17 	ldw	fp,40(sp)
    1a04:	ddc00917 	ldw	r23,36(sp)
    1a08:	dd800817 	ldw	r22,32(sp)
    1a0c:	dd400717 	ldw	r21,28(sp)
    1a10:	dd000617 	ldw	r20,24(sp)
    1a14:	dcc00517 	ldw	r19,20(sp)
    1a18:	dc800417 	ldw	r18,16(sp)
    1a1c:	dc400317 	ldw	r17,12(sp)
    1a20:	dc000217 	ldw	r16,8(sp)
    1a24:	dec00c04 	addi	sp,sp,48
    1a28:	f800283a 	ret
    1a2c:	800b883a 	mov	r5,r16
    1a30:	a809883a 	mov	r4,r21
    1a34:	00033980 	call	3398 <__swsetup_r>
    1a38:	1000eb1e 	bne	r2,zero,1de8 <__sfvwrite_r+0x4a4>
    1a3c:	80c0030b 	ldhu	r3,12(r16)
    1a40:	a4400017 	ldw	r17,0(r20)
    1a44:	1880008c 	andi	r2,r3,2
    1a48:	103fd61e 	bne	r2,zero,19a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019a4>
    1a4c:	1880004c 	andi	r2,r3,1
    1a50:	10003f1e 	bne	r2,zero,1b50 <__sfvwrite_r+0x20c>
    1a54:	0039883a 	mov	fp,zero
    1a58:	0025883a 	mov	r18,zero
    1a5c:	90001a26 	beq	r18,zero,1ac8 <__sfvwrite_r+0x184>
    1a60:	1880800c 	andi	r2,r3,512
    1a64:	84c00217 	ldw	r19,8(r16)
    1a68:	10002126 	beq	r2,zero,1af0 <__sfvwrite_r+0x1ac>
    1a6c:	982f883a 	mov	r23,r19
    1a70:	94c09336 	bltu	r18,r19,1cc0 <__sfvwrite_r+0x37c>
    1a74:	1881200c 	andi	r2,r3,1152
    1a78:	10009e1e 	bne	r2,zero,1cf4 <__sfvwrite_r+0x3b0>
    1a7c:	81000017 	ldw	r4,0(r16)
    1a80:	b80d883a 	mov	r6,r23
    1a84:	e00b883a 	mov	r5,fp
    1a88:	00029c00 	call	29c0 <memmove>
    1a8c:	80c00217 	ldw	r3,8(r16)
    1a90:	81000017 	ldw	r4,0(r16)
    1a94:	9005883a 	mov	r2,r18
    1a98:	1ce7c83a 	sub	r19,r3,r19
    1a9c:	25cf883a 	add	r7,r4,r23
    1aa0:	84c00215 	stw	r19,8(r16)
    1aa4:	81c00015 	stw	r7,0(r16)
    1aa8:	a0c00217 	ldw	r3,8(r20)
    1aac:	e0b9883a 	add	fp,fp,r2
    1ab0:	90a5c83a 	sub	r18,r18,r2
    1ab4:	18a7c83a 	sub	r19,r3,r2
    1ab8:	a4c00215 	stw	r19,8(r20)
    1abc:	983fce26 	beq	r19,zero,19f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019f8>
    1ac0:	80c0030b 	ldhu	r3,12(r16)
    1ac4:	903fe61e 	bne	r18,zero,1a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a60>
    1ac8:	8f000017 	ldw	fp,0(r17)
    1acc:	8c800117 	ldw	r18,4(r17)
    1ad0:	8c400204 	addi	r17,r17,8
    1ad4:	003fe106 	br	1a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a5c>
    1ad8:	8cc00017 	ldw	r19,0(r17)
    1adc:	8c800117 	ldw	r18,4(r17)
    1ae0:	8c400204 	addi	r17,r17,8
    1ae4:	003fb306 	br	19b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019b4>
    1ae8:	0005883a 	mov	r2,zero
    1aec:	f800283a 	ret
    1af0:	81000017 	ldw	r4,0(r16)
    1af4:	80800417 	ldw	r2,16(r16)
    1af8:	11005736 	bltu	r2,r4,1c58 <__sfvwrite_r+0x314>
    1afc:	85c00517 	ldw	r23,20(r16)
    1b00:	95c05536 	bltu	r18,r23,1c58 <__sfvwrite_r+0x314>
    1b04:	00a00034 	movhi	r2,32768
    1b08:	10bfffc4 	addi	r2,r2,-1
    1b0c:	9009883a 	mov	r4,r18
    1b10:	1480012e 	bgeu	r2,r18,1b18 <__sfvwrite_r+0x1d4>
    1b14:	1009883a 	mov	r4,r2
    1b18:	b80b883a 	mov	r5,r23
    1b1c:	000404c0 	call	404c <__divsi3>
    1b20:	15cf383a 	mul	r7,r2,r23
    1b24:	81400717 	ldw	r5,28(r16)
    1b28:	80800917 	ldw	r2,36(r16)
    1b2c:	e00d883a 	mov	r6,fp
    1b30:	a809883a 	mov	r4,r21
    1b34:	103ee83a 	callr	r2
    1b38:	00bfdb16 	blt	zero,r2,1aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001aa8>
    1b3c:	8080030b 	ldhu	r2,12(r16)
    1b40:	10801014 	ori	r2,r2,64
    1b44:	8080030d 	sth	r2,12(r16)
    1b48:	00bfffc4 	movi	r2,-1
    1b4c:	003fab06 	br	19fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019fc>
    1b50:	0027883a 	mov	r19,zero
    1b54:	0011883a 	mov	r8,zero
    1b58:	0039883a 	mov	fp,zero
    1b5c:	0025883a 	mov	r18,zero
    1b60:	90001f26 	beq	r18,zero,1be0 <__sfvwrite_r+0x29c>
    1b64:	40005a26 	beq	r8,zero,1cd0 <__sfvwrite_r+0x38c>
    1b68:	982d883a 	mov	r22,r19
    1b6c:	94c0012e 	bgeu	r18,r19,1b74 <__sfvwrite_r+0x230>
    1b70:	902d883a 	mov	r22,r18
    1b74:	81000017 	ldw	r4,0(r16)
    1b78:	80800417 	ldw	r2,16(r16)
    1b7c:	b02f883a 	mov	r23,r22
    1b80:	81c00517 	ldw	r7,20(r16)
    1b84:	1100032e 	bgeu	r2,r4,1b94 <__sfvwrite_r+0x250>
    1b88:	80c00217 	ldw	r3,8(r16)
    1b8c:	38c7883a 	add	r3,r7,r3
    1b90:	1d801816 	blt	r3,r22,1bf4 <__sfvwrite_r+0x2b0>
    1b94:	b1c03e16 	blt	r22,r7,1c90 <__sfvwrite_r+0x34c>
    1b98:	80800917 	ldw	r2,36(r16)
    1b9c:	81400717 	ldw	r5,28(r16)
    1ba0:	e00d883a 	mov	r6,fp
    1ba4:	da000115 	stw	r8,4(sp)
    1ba8:	a809883a 	mov	r4,r21
    1bac:	103ee83a 	callr	r2
    1bb0:	102f883a 	mov	r23,r2
    1bb4:	da000117 	ldw	r8,4(sp)
    1bb8:	00bfe00e 	bge	zero,r2,1b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b3c>
    1bbc:	9de7c83a 	sub	r19,r19,r23
    1bc0:	98001f26 	beq	r19,zero,1c40 <__sfvwrite_r+0x2fc>
    1bc4:	a0800217 	ldw	r2,8(r20)
    1bc8:	e5f9883a 	add	fp,fp,r23
    1bcc:	95e5c83a 	sub	r18,r18,r23
    1bd0:	15efc83a 	sub	r23,r2,r23
    1bd4:	a5c00215 	stw	r23,8(r20)
    1bd8:	b83f8726 	beq	r23,zero,19f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019f8>
    1bdc:	903fe11e 	bne	r18,zero,1b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b64>
    1be0:	8f000017 	ldw	fp,0(r17)
    1be4:	8c800117 	ldw	r18,4(r17)
    1be8:	0011883a 	mov	r8,zero
    1bec:	8c400204 	addi	r17,r17,8
    1bf0:	003fdb06 	br	1b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b60>
    1bf4:	180d883a 	mov	r6,r3
    1bf8:	e00b883a 	mov	r5,fp
    1bfc:	da000115 	stw	r8,4(sp)
    1c00:	d8c00015 	stw	r3,0(sp)
    1c04:	00029c00 	call	29c0 <memmove>
    1c08:	d8c00017 	ldw	r3,0(sp)
    1c0c:	80800017 	ldw	r2,0(r16)
    1c10:	800b883a 	mov	r5,r16
    1c14:	a809883a 	mov	r4,r21
    1c18:	10c5883a 	add	r2,r2,r3
    1c1c:	80800015 	stw	r2,0(r16)
    1c20:	d8c00015 	stw	r3,0(sp)
    1c24:	00038600 	call	3860 <_fflush_r>
    1c28:	d8c00017 	ldw	r3,0(sp)
    1c2c:	da000117 	ldw	r8,4(sp)
    1c30:	103fc21e 	bne	r2,zero,1b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b3c>
    1c34:	182f883a 	mov	r23,r3
    1c38:	9de7c83a 	sub	r19,r19,r23
    1c3c:	983fe11e 	bne	r19,zero,1bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bc4>
    1c40:	800b883a 	mov	r5,r16
    1c44:	a809883a 	mov	r4,r21
    1c48:	00038600 	call	3860 <_fflush_r>
    1c4c:	103fbb1e 	bne	r2,zero,1b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b3c>
    1c50:	0011883a 	mov	r8,zero
    1c54:	003fdb06 	br	1bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bc4>
    1c58:	94c0012e 	bgeu	r18,r19,1c60 <__sfvwrite_r+0x31c>
    1c5c:	9027883a 	mov	r19,r18
    1c60:	980d883a 	mov	r6,r19
    1c64:	e00b883a 	mov	r5,fp
    1c68:	00029c00 	call	29c0 <memmove>
    1c6c:	80800217 	ldw	r2,8(r16)
    1c70:	80c00017 	ldw	r3,0(r16)
    1c74:	14c5c83a 	sub	r2,r2,r19
    1c78:	1cc7883a 	add	r3,r3,r19
    1c7c:	80800215 	stw	r2,8(r16)
    1c80:	80c00015 	stw	r3,0(r16)
    1c84:	10004326 	beq	r2,zero,1d94 <__sfvwrite_r+0x450>
    1c88:	9805883a 	mov	r2,r19
    1c8c:	003f8606 	br	1aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001aa8>
    1c90:	b00d883a 	mov	r6,r22
    1c94:	e00b883a 	mov	r5,fp
    1c98:	da000115 	stw	r8,4(sp)
    1c9c:	00029c00 	call	29c0 <memmove>
    1ca0:	80800217 	ldw	r2,8(r16)
    1ca4:	80c00017 	ldw	r3,0(r16)
    1ca8:	da000117 	ldw	r8,4(sp)
    1cac:	1585c83a 	sub	r2,r2,r22
    1cb0:	1dad883a 	add	r22,r3,r22
    1cb4:	80800215 	stw	r2,8(r16)
    1cb8:	85800015 	stw	r22,0(r16)
    1cbc:	003fbf06 	br	1bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bbc>
    1cc0:	81000017 	ldw	r4,0(r16)
    1cc4:	9027883a 	mov	r19,r18
    1cc8:	902f883a 	mov	r23,r18
    1ccc:	003f6c06 	br	1a80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a80>
    1cd0:	900d883a 	mov	r6,r18
    1cd4:	01400284 	movi	r5,10
    1cd8:	e009883a 	mov	r4,fp
    1cdc:	00027940 	call	2794 <memchr>
    1ce0:	10003e26 	beq	r2,zero,1ddc <__sfvwrite_r+0x498>
    1ce4:	10800044 	addi	r2,r2,1
    1ce8:	1727c83a 	sub	r19,r2,fp
    1cec:	02000044 	movi	r8,1
    1cf0:	003f9d06 	br	1b68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b68>
    1cf4:	80800517 	ldw	r2,20(r16)
    1cf8:	81400417 	ldw	r5,16(r16)
    1cfc:	81c00017 	ldw	r7,0(r16)
    1d00:	10a7883a 	add	r19,r2,r2
    1d04:	9885883a 	add	r2,r19,r2
    1d08:	1026d7fa 	srli	r19,r2,31
    1d0c:	396dc83a 	sub	r22,r7,r5
    1d10:	b1000044 	addi	r4,r22,1
    1d14:	9885883a 	add	r2,r19,r2
    1d18:	1027d07a 	srai	r19,r2,1
    1d1c:	2485883a 	add	r2,r4,r18
    1d20:	980d883a 	mov	r6,r19
    1d24:	9880022e 	bgeu	r19,r2,1d30 <__sfvwrite_r+0x3ec>
    1d28:	1027883a 	mov	r19,r2
    1d2c:	100d883a 	mov	r6,r2
    1d30:	18c1000c 	andi	r3,r3,1024
    1d34:	18001c26 	beq	r3,zero,1da8 <__sfvwrite_r+0x464>
    1d38:	300b883a 	mov	r5,r6
    1d3c:	a809883a 	mov	r4,r21
    1d40:	0001f880 	call	1f88 <_malloc_r>
    1d44:	102f883a 	mov	r23,r2
    1d48:	10002926 	beq	r2,zero,1df0 <__sfvwrite_r+0x4ac>
    1d4c:	81400417 	ldw	r5,16(r16)
    1d50:	b00d883a 	mov	r6,r22
    1d54:	1009883a 	mov	r4,r2
    1d58:	00028780 	call	2878 <memcpy>
    1d5c:	8080030b 	ldhu	r2,12(r16)
    1d60:	00fedfc4 	movi	r3,-1153
    1d64:	10c4703a 	and	r2,r2,r3
    1d68:	10802014 	ori	r2,r2,128
    1d6c:	8080030d 	sth	r2,12(r16)
    1d70:	bd89883a 	add	r4,r23,r22
    1d74:	9d8fc83a 	sub	r7,r19,r22
    1d78:	85c00415 	stw	r23,16(r16)
    1d7c:	84c00515 	stw	r19,20(r16)
    1d80:	81000015 	stw	r4,0(r16)
    1d84:	9027883a 	mov	r19,r18
    1d88:	81c00215 	stw	r7,8(r16)
    1d8c:	902f883a 	mov	r23,r18
    1d90:	003f3b06 	br	1a80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a80>
    1d94:	800b883a 	mov	r5,r16
    1d98:	a809883a 	mov	r4,r21
    1d9c:	00038600 	call	3860 <_fflush_r>
    1da0:	103fb926 	beq	r2,zero,1c88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c88>
    1da4:	003f6506 	br	1b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b3c>
    1da8:	a809883a 	mov	r4,r21
    1dac:	0002c440 	call	2c44 <_realloc_r>
    1db0:	102f883a 	mov	r23,r2
    1db4:	103fee1e 	bne	r2,zero,1d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d70>
    1db8:	81400417 	ldw	r5,16(r16)
    1dbc:	a809883a 	mov	r4,r21
    1dc0:	0003a100 	call	3a10 <_free_r>
    1dc4:	8080030b 	ldhu	r2,12(r16)
    1dc8:	00ffdfc4 	movi	r3,-129
    1dcc:	1884703a 	and	r2,r3,r2
    1dd0:	00c00304 	movi	r3,12
    1dd4:	a8c00015 	stw	r3,0(r21)
    1dd8:	003f5906 	br	1b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b40>
    1ddc:	94c00044 	addi	r19,r18,1
    1de0:	02000044 	movi	r8,1
    1de4:	003f6006 	br	1b68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b68>
    1de8:	00bfffc4 	movi	r2,-1
    1dec:	003f0306 	br	19fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019fc>
    1df0:	00800304 	movi	r2,12
    1df4:	a8800015 	stw	r2,0(r21)
    1df8:	8080030b 	ldhu	r2,12(r16)
    1dfc:	003f5006 	br	1b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b40>

00001e00 <_fwalk>:
    1e00:	defff704 	addi	sp,sp,-36
    1e04:	dd000415 	stw	r20,16(sp)
    1e08:	dfc00815 	stw	ra,32(sp)
    1e0c:	ddc00715 	stw	r23,28(sp)
    1e10:	dd800615 	stw	r22,24(sp)
    1e14:	dd400515 	stw	r21,20(sp)
    1e18:	dcc00315 	stw	r19,12(sp)
    1e1c:	dc800215 	stw	r18,8(sp)
    1e20:	dc400115 	stw	r17,4(sp)
    1e24:	dc000015 	stw	r16,0(sp)
    1e28:	2500b804 	addi	r20,r4,736
    1e2c:	a0002326 	beq	r20,zero,1ebc <_fwalk+0xbc>
    1e30:	282b883a 	mov	r21,r5
    1e34:	002f883a 	mov	r23,zero
    1e38:	05800044 	movi	r22,1
    1e3c:	04ffffc4 	movi	r19,-1
    1e40:	a4400117 	ldw	r17,4(r20)
    1e44:	a4800217 	ldw	r18,8(r20)
    1e48:	8c7fffc4 	addi	r17,r17,-1
    1e4c:	88000d16 	blt	r17,zero,1e84 <_fwalk+0x84>
    1e50:	94000304 	addi	r16,r18,12
    1e54:	94800384 	addi	r18,r18,14
    1e58:	8080000b 	ldhu	r2,0(r16)
    1e5c:	8c7fffc4 	addi	r17,r17,-1
    1e60:	813ffd04 	addi	r4,r16,-12
    1e64:	b080042e 	bgeu	r22,r2,1e78 <_fwalk+0x78>
    1e68:	9080000f 	ldh	r2,0(r18)
    1e6c:	14c00226 	beq	r2,r19,1e78 <_fwalk+0x78>
    1e70:	a83ee83a 	callr	r21
    1e74:	b8aeb03a 	or	r23,r23,r2
    1e78:	84001a04 	addi	r16,r16,104
    1e7c:	94801a04 	addi	r18,r18,104
    1e80:	8cfff51e 	bne	r17,r19,1e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e58>
    1e84:	a5000017 	ldw	r20,0(r20)
    1e88:	a03fed1e 	bne	r20,zero,1e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e40>
    1e8c:	b805883a 	mov	r2,r23
    1e90:	dfc00817 	ldw	ra,32(sp)
    1e94:	ddc00717 	ldw	r23,28(sp)
    1e98:	dd800617 	ldw	r22,24(sp)
    1e9c:	dd400517 	ldw	r21,20(sp)
    1ea0:	dd000417 	ldw	r20,16(sp)
    1ea4:	dcc00317 	ldw	r19,12(sp)
    1ea8:	dc800217 	ldw	r18,8(sp)
    1eac:	dc400117 	ldw	r17,4(sp)
    1eb0:	dc000017 	ldw	r16,0(sp)
    1eb4:	dec00904 	addi	sp,sp,36
    1eb8:	f800283a 	ret
    1ebc:	002f883a 	mov	r23,zero
    1ec0:	003ff206 	br	1e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e8c>

00001ec4 <_fwalk_reent>:
    1ec4:	defff704 	addi	sp,sp,-36
    1ec8:	dd000415 	stw	r20,16(sp)
    1ecc:	dfc00815 	stw	ra,32(sp)
    1ed0:	ddc00715 	stw	r23,28(sp)
    1ed4:	dd800615 	stw	r22,24(sp)
    1ed8:	dd400515 	stw	r21,20(sp)
    1edc:	dcc00315 	stw	r19,12(sp)
    1ee0:	dc800215 	stw	r18,8(sp)
    1ee4:	dc400115 	stw	r17,4(sp)
    1ee8:	dc000015 	stw	r16,0(sp)
    1eec:	2500b804 	addi	r20,r4,736
    1ef0:	a0002326 	beq	r20,zero,1f80 <_fwalk_reent+0xbc>
    1ef4:	282b883a 	mov	r21,r5
    1ef8:	2027883a 	mov	r19,r4
    1efc:	002f883a 	mov	r23,zero
    1f00:	05800044 	movi	r22,1
    1f04:	04bfffc4 	movi	r18,-1
    1f08:	a4400117 	ldw	r17,4(r20)
    1f0c:	a4000217 	ldw	r16,8(r20)
    1f10:	8c7fffc4 	addi	r17,r17,-1
    1f14:	88000c16 	blt	r17,zero,1f48 <_fwalk_reent+0x84>
    1f18:	84000304 	addi	r16,r16,12
    1f1c:	8080000b 	ldhu	r2,0(r16)
    1f20:	8c7fffc4 	addi	r17,r17,-1
    1f24:	817ffd04 	addi	r5,r16,-12
    1f28:	b080052e 	bgeu	r22,r2,1f40 <_fwalk_reent+0x7c>
    1f2c:	8080008f 	ldh	r2,2(r16)
    1f30:	9809883a 	mov	r4,r19
    1f34:	14800226 	beq	r2,r18,1f40 <_fwalk_reent+0x7c>
    1f38:	a83ee83a 	callr	r21
    1f3c:	b8aeb03a 	or	r23,r23,r2
    1f40:	84001a04 	addi	r16,r16,104
    1f44:	8cbff51e 	bne	r17,r18,1f1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f1c>
    1f48:	a5000017 	ldw	r20,0(r20)
    1f4c:	a03fee1e 	bne	r20,zero,1f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f08>
    1f50:	b805883a 	mov	r2,r23
    1f54:	dfc00817 	ldw	ra,32(sp)
    1f58:	ddc00717 	ldw	r23,28(sp)
    1f5c:	dd800617 	ldw	r22,24(sp)
    1f60:	dd400517 	ldw	r21,20(sp)
    1f64:	dd000417 	ldw	r20,16(sp)
    1f68:	dcc00317 	ldw	r19,12(sp)
    1f6c:	dc800217 	ldw	r18,8(sp)
    1f70:	dc400117 	ldw	r17,4(sp)
    1f74:	dc000017 	ldw	r16,0(sp)
    1f78:	dec00904 	addi	sp,sp,36
    1f7c:	f800283a 	ret
    1f80:	002f883a 	mov	r23,zero
    1f84:	003ff206 	br	1f50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f50>

00001f88 <_malloc_r>:
    1f88:	defff504 	addi	sp,sp,-44
    1f8c:	dc800315 	stw	r18,12(sp)
    1f90:	dfc00a15 	stw	ra,40(sp)
    1f94:	df000915 	stw	fp,36(sp)
    1f98:	ddc00815 	stw	r23,32(sp)
    1f9c:	dd800715 	stw	r22,28(sp)
    1fa0:	dd400615 	stw	r21,24(sp)
    1fa4:	dd000515 	stw	r20,20(sp)
    1fa8:	dcc00415 	stw	r19,16(sp)
    1fac:	dc400215 	stw	r17,8(sp)
    1fb0:	dc000115 	stw	r16,4(sp)
    1fb4:	288002c4 	addi	r2,r5,11
    1fb8:	00c00584 	movi	r3,22
    1fbc:	2025883a 	mov	r18,r4
    1fc0:	18807f2e 	bgeu	r3,r2,21c0 <_malloc_r+0x238>
    1fc4:	047ffe04 	movi	r17,-8
    1fc8:	1462703a 	and	r17,r2,r17
    1fcc:	8800a316 	blt	r17,zero,225c <_malloc_r+0x2d4>
    1fd0:	8940a236 	bltu	r17,r5,225c <_malloc_r+0x2d4>
    1fd4:	0004c600 	call	4c60 <__malloc_lock>
    1fd8:	00807dc4 	movi	r2,503
    1fdc:	1441e92e 	bgeu	r2,r17,2784 <_malloc_r+0x7fc>
    1fe0:	8804d27a 	srli	r2,r17,9
    1fe4:	1000a126 	beq	r2,zero,226c <_malloc_r+0x2e4>
    1fe8:	00c00104 	movi	r3,4
    1fec:	18811e36 	bltu	r3,r2,2468 <_malloc_r+0x4e0>
    1ff0:	8804d1ba 	srli	r2,r17,6
    1ff4:	12000e44 	addi	r8,r2,57
    1ff8:	11c00e04 	addi	r7,r2,56
    1ffc:	4209883a 	add	r4,r8,r8
    2000:	04c00074 	movhi	r19,1
    2004:	2109883a 	add	r4,r4,r4
    2008:	9cc5f704 	addi	r19,r19,6108
    200c:	2109883a 	add	r4,r4,r4
    2010:	9909883a 	add	r4,r19,r4
    2014:	24000117 	ldw	r16,4(r4)
    2018:	213ffe04 	addi	r4,r4,-8
    201c:	24009726 	beq	r4,r16,227c <_malloc_r+0x2f4>
    2020:	80800117 	ldw	r2,4(r16)
    2024:	01bfff04 	movi	r6,-4
    2028:	014003c4 	movi	r5,15
    202c:	1184703a 	and	r2,r2,r6
    2030:	1447c83a 	sub	r3,r2,r17
    2034:	28c00716 	blt	r5,r3,2054 <_malloc_r+0xcc>
    2038:	1800920e 	bge	r3,zero,2284 <_malloc_r+0x2fc>
    203c:	84000317 	ldw	r16,12(r16)
    2040:	24008e26 	beq	r4,r16,227c <_malloc_r+0x2f4>
    2044:	80800117 	ldw	r2,4(r16)
    2048:	1184703a 	and	r2,r2,r6
    204c:	1447c83a 	sub	r3,r2,r17
    2050:	28fff90e 	bge	r5,r3,2038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002038>
    2054:	3809883a 	mov	r4,r7
    2058:	01800074 	movhi	r6,1
    205c:	9c000417 	ldw	r16,16(r19)
    2060:	3185f704 	addi	r6,r6,6108
    2064:	32000204 	addi	r8,r6,8
    2068:	82013426 	beq	r16,r8,253c <_malloc_r+0x5b4>
    206c:	80c00117 	ldw	r3,4(r16)
    2070:	00bfff04 	movi	r2,-4
    2074:	188e703a 	and	r7,r3,r2
    2078:	3c45c83a 	sub	r2,r7,r17
    207c:	00c003c4 	movi	r3,15
    2080:	18811f16 	blt	r3,r2,2500 <_malloc_r+0x578>
    2084:	32000515 	stw	r8,20(r6)
    2088:	32000415 	stw	r8,16(r6)
    208c:	10007f0e 	bge	r2,zero,228c <_malloc_r+0x304>
    2090:	00807fc4 	movi	r2,511
    2094:	11c0fd36 	bltu	r2,r7,248c <_malloc_r+0x504>
    2098:	3806d0fa 	srli	r3,r7,3
    209c:	01c00044 	movi	r7,1
    20a0:	30800117 	ldw	r2,4(r6)
    20a4:	19400044 	addi	r5,r3,1
    20a8:	294b883a 	add	r5,r5,r5
    20ac:	1807d0ba 	srai	r3,r3,2
    20b0:	294b883a 	add	r5,r5,r5
    20b4:	294b883a 	add	r5,r5,r5
    20b8:	298b883a 	add	r5,r5,r6
    20bc:	38c6983a 	sll	r3,r7,r3
    20c0:	29c00017 	ldw	r7,0(r5)
    20c4:	2a7ffe04 	addi	r9,r5,-8
    20c8:	1886b03a 	or	r3,r3,r2
    20cc:	82400315 	stw	r9,12(r16)
    20d0:	81c00215 	stw	r7,8(r16)
    20d4:	30c00115 	stw	r3,4(r6)
    20d8:	2c000015 	stw	r16,0(r5)
    20dc:	3c000315 	stw	r16,12(r7)
    20e0:	2005d0ba 	srai	r2,r4,2
    20e4:	01400044 	movi	r5,1
    20e8:	288a983a 	sll	r5,r5,r2
    20ec:	19406f36 	bltu	r3,r5,22ac <_malloc_r+0x324>
    20f0:	28c4703a 	and	r2,r5,r3
    20f4:	10000a1e 	bne	r2,zero,2120 <_malloc_r+0x198>
    20f8:	00bfff04 	movi	r2,-4
    20fc:	294b883a 	add	r5,r5,r5
    2100:	2088703a 	and	r4,r4,r2
    2104:	28c4703a 	and	r2,r5,r3
    2108:	21000104 	addi	r4,r4,4
    210c:	1000041e 	bne	r2,zero,2120 <_malloc_r+0x198>
    2110:	294b883a 	add	r5,r5,r5
    2114:	28c4703a 	and	r2,r5,r3
    2118:	21000104 	addi	r4,r4,4
    211c:	103ffc26 	beq	r2,zero,2110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002110>
    2120:	02bfff04 	movi	r10,-4
    2124:	024003c4 	movi	r9,15
    2128:	21800044 	addi	r6,r4,1
    212c:	318d883a 	add	r6,r6,r6
    2130:	318d883a 	add	r6,r6,r6
    2134:	318d883a 	add	r6,r6,r6
    2138:	998d883a 	add	r6,r19,r6
    213c:	333ffe04 	addi	r12,r6,-8
    2140:	2017883a 	mov	r11,r4
    2144:	31800104 	addi	r6,r6,4
    2148:	34000017 	ldw	r16,0(r6)
    214c:	31fffd04 	addi	r7,r6,-12
    2150:	81c0041e 	bne	r16,r7,2164 <_malloc_r+0x1dc>
    2154:	0000fb06 	br	2544 <_malloc_r+0x5bc>
    2158:	1801030e 	bge	r3,zero,2568 <_malloc_r+0x5e0>
    215c:	84000317 	ldw	r16,12(r16)
    2160:	81c0f826 	beq	r16,r7,2544 <_malloc_r+0x5bc>
    2164:	80800117 	ldw	r2,4(r16)
    2168:	1284703a 	and	r2,r2,r10
    216c:	1447c83a 	sub	r3,r2,r17
    2170:	48fff90e 	bge	r9,r3,2158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002158>
    2174:	80800317 	ldw	r2,12(r16)
    2178:	81000217 	ldw	r4,8(r16)
    217c:	89400054 	ori	r5,r17,1
    2180:	81400115 	stw	r5,4(r16)
    2184:	20800315 	stw	r2,12(r4)
    2188:	11000215 	stw	r4,8(r2)
    218c:	8463883a 	add	r17,r16,r17
    2190:	9c400515 	stw	r17,20(r19)
    2194:	9c400415 	stw	r17,16(r19)
    2198:	18800054 	ori	r2,r3,1
    219c:	88800115 	stw	r2,4(r17)
    21a0:	8a000315 	stw	r8,12(r17)
    21a4:	8a000215 	stw	r8,8(r17)
    21a8:	88e3883a 	add	r17,r17,r3
    21ac:	88c00015 	stw	r3,0(r17)
    21b0:	9009883a 	mov	r4,r18
    21b4:	0004d800 	call	4d80 <__malloc_unlock>
    21b8:	80800204 	addi	r2,r16,8
    21bc:	00001b06 	br	222c <_malloc_r+0x2a4>
    21c0:	04400404 	movi	r17,16
    21c4:	89402536 	bltu	r17,r5,225c <_malloc_r+0x2d4>
    21c8:	0004c600 	call	4c60 <__malloc_lock>
    21cc:	00800184 	movi	r2,6
    21d0:	01000084 	movi	r4,2
    21d4:	04c00074 	movhi	r19,1
    21d8:	1085883a 	add	r2,r2,r2
    21dc:	9cc5f704 	addi	r19,r19,6108
    21e0:	1085883a 	add	r2,r2,r2
    21e4:	9885883a 	add	r2,r19,r2
    21e8:	14000117 	ldw	r16,4(r2)
    21ec:	10fffe04 	addi	r3,r2,-8
    21f0:	80c0d926 	beq	r16,r3,2558 <_malloc_r+0x5d0>
    21f4:	80c00117 	ldw	r3,4(r16)
    21f8:	81000317 	ldw	r4,12(r16)
    21fc:	00bfff04 	movi	r2,-4
    2200:	1884703a 	and	r2,r3,r2
    2204:	81400217 	ldw	r5,8(r16)
    2208:	8085883a 	add	r2,r16,r2
    220c:	10c00117 	ldw	r3,4(r2)
    2210:	29000315 	stw	r4,12(r5)
    2214:	21400215 	stw	r5,8(r4)
    2218:	18c00054 	ori	r3,r3,1
    221c:	10c00115 	stw	r3,4(r2)
    2220:	9009883a 	mov	r4,r18
    2224:	0004d800 	call	4d80 <__malloc_unlock>
    2228:	80800204 	addi	r2,r16,8
    222c:	dfc00a17 	ldw	ra,40(sp)
    2230:	df000917 	ldw	fp,36(sp)
    2234:	ddc00817 	ldw	r23,32(sp)
    2238:	dd800717 	ldw	r22,28(sp)
    223c:	dd400617 	ldw	r21,24(sp)
    2240:	dd000517 	ldw	r20,20(sp)
    2244:	dcc00417 	ldw	r19,16(sp)
    2248:	dc800317 	ldw	r18,12(sp)
    224c:	dc400217 	ldw	r17,8(sp)
    2250:	dc000117 	ldw	r16,4(sp)
    2254:	dec00b04 	addi	sp,sp,44
    2258:	f800283a 	ret
    225c:	00800304 	movi	r2,12
    2260:	90800015 	stw	r2,0(r18)
    2264:	0005883a 	mov	r2,zero
    2268:	003ff006 	br	222c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700222c>
    226c:	01002004 	movi	r4,128
    2270:	02001004 	movi	r8,64
    2274:	01c00fc4 	movi	r7,63
    2278:	003f6106 	br	2000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002000>
    227c:	4009883a 	mov	r4,r8
    2280:	003f7506 	br	2058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002058>
    2284:	81000317 	ldw	r4,12(r16)
    2288:	003fde06 	br	2204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002204>
    228c:	81c5883a 	add	r2,r16,r7
    2290:	11400117 	ldw	r5,4(r2)
    2294:	9009883a 	mov	r4,r18
    2298:	29400054 	ori	r5,r5,1
    229c:	11400115 	stw	r5,4(r2)
    22a0:	0004d800 	call	4d80 <__malloc_unlock>
    22a4:	80800204 	addi	r2,r16,8
    22a8:	003fe006 	br	222c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700222c>
    22ac:	9c000217 	ldw	r16,8(r19)
    22b0:	00bfff04 	movi	r2,-4
    22b4:	85800117 	ldw	r22,4(r16)
    22b8:	b0ac703a 	and	r22,r22,r2
    22bc:	b4400336 	bltu	r22,r17,22cc <_malloc_r+0x344>
    22c0:	b445c83a 	sub	r2,r22,r17
    22c4:	00c003c4 	movi	r3,15
    22c8:	18805d16 	blt	r3,r2,2440 <_malloc_r+0x4b8>
    22cc:	05c00074 	movhi	r23,1
    22d0:	00800074 	movhi	r2,1
    22d4:	10940904 	addi	r2,r2,20516
    22d8:	bdcc4504 	addi	r23,r23,12564
    22dc:	15400017 	ldw	r21,0(r2)
    22e0:	b8c00017 	ldw	r3,0(r23)
    22e4:	00bfffc4 	movi	r2,-1
    22e8:	858d883a 	add	r6,r16,r22
    22ec:	8d6b883a 	add	r21,r17,r21
    22f0:	1880ea26 	beq	r3,r2,269c <_malloc_r+0x714>
    22f4:	ad4403c4 	addi	r21,r21,4111
    22f8:	00bc0004 	movi	r2,-4096
    22fc:	a8aa703a 	and	r21,r21,r2
    2300:	a80b883a 	mov	r5,r21
    2304:	9009883a 	mov	r4,r18
    2308:	d9800015 	stw	r6,0(sp)
    230c:	00031a80 	call	31a8 <_sbrk_r>
    2310:	1029883a 	mov	r20,r2
    2314:	00bfffc4 	movi	r2,-1
    2318:	d9800017 	ldw	r6,0(sp)
    231c:	a080e826 	beq	r20,r2,26c0 <_malloc_r+0x738>
    2320:	a180a636 	bltu	r20,r6,25bc <_malloc_r+0x634>
    2324:	07000074 	movhi	fp,1
    2328:	e7142b04 	addi	fp,fp,20652
    232c:	e0800017 	ldw	r2,0(fp)
    2330:	a887883a 	add	r3,r21,r2
    2334:	e0c00015 	stw	r3,0(fp)
    2338:	3500e626 	beq	r6,r20,26d4 <_malloc_r+0x74c>
    233c:	b9000017 	ldw	r4,0(r23)
    2340:	00bfffc4 	movi	r2,-1
    2344:	2080ee26 	beq	r4,r2,2700 <_malloc_r+0x778>
    2348:	a185c83a 	sub	r2,r20,r6
    234c:	10c5883a 	add	r2,r2,r3
    2350:	e0800015 	stw	r2,0(fp)
    2354:	a0c001cc 	andi	r3,r20,7
    2358:	1800bc26 	beq	r3,zero,264c <_malloc_r+0x6c4>
    235c:	a0e9c83a 	sub	r20,r20,r3
    2360:	00840204 	movi	r2,4104
    2364:	a5000204 	addi	r20,r20,8
    2368:	10c7c83a 	sub	r3,r2,r3
    236c:	a545883a 	add	r2,r20,r21
    2370:	1083ffcc 	andi	r2,r2,4095
    2374:	18abc83a 	sub	r21,r3,r2
    2378:	a80b883a 	mov	r5,r21
    237c:	9009883a 	mov	r4,r18
    2380:	00031a80 	call	31a8 <_sbrk_r>
    2384:	00ffffc4 	movi	r3,-1
    2388:	10c0e126 	beq	r2,r3,2710 <_malloc_r+0x788>
    238c:	1505c83a 	sub	r2,r2,r20
    2390:	1545883a 	add	r2,r2,r21
    2394:	10800054 	ori	r2,r2,1
    2398:	e0c00017 	ldw	r3,0(fp)
    239c:	9d000215 	stw	r20,8(r19)
    23a0:	a0800115 	stw	r2,4(r20)
    23a4:	a8c7883a 	add	r3,r21,r3
    23a8:	e0c00015 	stw	r3,0(fp)
    23ac:	84c00e26 	beq	r16,r19,23e8 <_malloc_r+0x460>
    23b0:	018003c4 	movi	r6,15
    23b4:	3580a72e 	bgeu	r6,r22,2654 <_malloc_r+0x6cc>
    23b8:	81400117 	ldw	r5,4(r16)
    23bc:	013ffe04 	movi	r4,-8
    23c0:	b0bffd04 	addi	r2,r22,-12
    23c4:	1104703a 	and	r2,r2,r4
    23c8:	2900004c 	andi	r4,r5,1
    23cc:	2088b03a 	or	r4,r4,r2
    23d0:	81000115 	stw	r4,4(r16)
    23d4:	01400144 	movi	r5,5
    23d8:	8089883a 	add	r4,r16,r2
    23dc:	21400115 	stw	r5,4(r4)
    23e0:	21400215 	stw	r5,8(r4)
    23e4:	3080cd36 	bltu	r6,r2,271c <_malloc_r+0x794>
    23e8:	00800074 	movhi	r2,1
    23ec:	10940804 	addi	r2,r2,20512
    23f0:	11000017 	ldw	r4,0(r2)
    23f4:	20c0012e 	bgeu	r4,r3,23fc <_malloc_r+0x474>
    23f8:	10c00015 	stw	r3,0(r2)
    23fc:	00800074 	movhi	r2,1
    2400:	10940704 	addi	r2,r2,20508
    2404:	11000017 	ldw	r4,0(r2)
    2408:	9c000217 	ldw	r16,8(r19)
    240c:	20c0012e 	bgeu	r4,r3,2414 <_malloc_r+0x48c>
    2410:	10c00015 	stw	r3,0(r2)
    2414:	80c00117 	ldw	r3,4(r16)
    2418:	00bfff04 	movi	r2,-4
    241c:	1886703a 	and	r3,r3,r2
    2420:	1c45c83a 	sub	r2,r3,r17
    2424:	1c400236 	bltu	r3,r17,2430 <_malloc_r+0x4a8>
    2428:	00c003c4 	movi	r3,15
    242c:	18800416 	blt	r3,r2,2440 <_malloc_r+0x4b8>
    2430:	9009883a 	mov	r4,r18
    2434:	0004d800 	call	4d80 <__malloc_unlock>
    2438:	0005883a 	mov	r2,zero
    243c:	003f7b06 	br	222c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700222c>
    2440:	88c00054 	ori	r3,r17,1
    2444:	80c00115 	stw	r3,4(r16)
    2448:	8463883a 	add	r17,r16,r17
    244c:	10800054 	ori	r2,r2,1
    2450:	9c400215 	stw	r17,8(r19)
    2454:	88800115 	stw	r2,4(r17)
    2458:	9009883a 	mov	r4,r18
    245c:	0004d800 	call	4d80 <__malloc_unlock>
    2460:	80800204 	addi	r2,r16,8
    2464:	003f7106 	br	222c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700222c>
    2468:	00c00504 	movi	r3,20
    246c:	18804a2e 	bgeu	r3,r2,2598 <_malloc_r+0x610>
    2470:	00c01504 	movi	r3,84
    2474:	18806e36 	bltu	r3,r2,2630 <_malloc_r+0x6a8>
    2478:	8804d33a 	srli	r2,r17,12
    247c:	12001bc4 	addi	r8,r2,111
    2480:	11c01b84 	addi	r7,r2,110
    2484:	4209883a 	add	r4,r8,r8
    2488:	003edd06 	br	2000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002000>
    248c:	3804d27a 	srli	r2,r7,9
    2490:	00c00104 	movi	r3,4
    2494:	1880442e 	bgeu	r3,r2,25a8 <_malloc_r+0x620>
    2498:	00c00504 	movi	r3,20
    249c:	18808136 	bltu	r3,r2,26a4 <_malloc_r+0x71c>
    24a0:	11401704 	addi	r5,r2,92
    24a4:	10c016c4 	addi	r3,r2,91
    24a8:	294b883a 	add	r5,r5,r5
    24ac:	294b883a 	add	r5,r5,r5
    24b0:	294b883a 	add	r5,r5,r5
    24b4:	994b883a 	add	r5,r19,r5
    24b8:	28800017 	ldw	r2,0(r5)
    24bc:	01800074 	movhi	r6,1
    24c0:	297ffe04 	addi	r5,r5,-8
    24c4:	3185f704 	addi	r6,r6,6108
    24c8:	28806526 	beq	r5,r2,2660 <_malloc_r+0x6d8>
    24cc:	01bfff04 	movi	r6,-4
    24d0:	10c00117 	ldw	r3,4(r2)
    24d4:	1986703a 	and	r3,r3,r6
    24d8:	38c0022e 	bgeu	r7,r3,24e4 <_malloc_r+0x55c>
    24dc:	10800217 	ldw	r2,8(r2)
    24e0:	28bffb1e 	bne	r5,r2,24d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024d0>
    24e4:	11400317 	ldw	r5,12(r2)
    24e8:	98c00117 	ldw	r3,4(r19)
    24ec:	81400315 	stw	r5,12(r16)
    24f0:	80800215 	stw	r2,8(r16)
    24f4:	2c000215 	stw	r16,8(r5)
    24f8:	14000315 	stw	r16,12(r2)
    24fc:	003ef806 	br	20e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020e0>
    2500:	88c00054 	ori	r3,r17,1
    2504:	80c00115 	stw	r3,4(r16)
    2508:	8463883a 	add	r17,r16,r17
    250c:	34400515 	stw	r17,20(r6)
    2510:	34400415 	stw	r17,16(r6)
    2514:	10c00054 	ori	r3,r2,1
    2518:	8a000315 	stw	r8,12(r17)
    251c:	8a000215 	stw	r8,8(r17)
    2520:	88c00115 	stw	r3,4(r17)
    2524:	88a3883a 	add	r17,r17,r2
    2528:	88800015 	stw	r2,0(r17)
    252c:	9009883a 	mov	r4,r18
    2530:	0004d800 	call	4d80 <__malloc_unlock>
    2534:	80800204 	addi	r2,r16,8
    2538:	003f3c06 	br	222c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700222c>
    253c:	30c00117 	ldw	r3,4(r6)
    2540:	003ee706 	br	20e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020e0>
    2544:	5ac00044 	addi	r11,r11,1
    2548:	588000cc 	andi	r2,r11,3
    254c:	31800204 	addi	r6,r6,8
    2550:	103efd1e 	bne	r2,zero,2148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002148>
    2554:	00002406 	br	25e8 <_malloc_r+0x660>
    2558:	14000317 	ldw	r16,12(r2)
    255c:	143f251e 	bne	r2,r16,21f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021f4>
    2560:	21000084 	addi	r4,r4,2
    2564:	003ebc06 	br	2058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002058>
    2568:	8085883a 	add	r2,r16,r2
    256c:	10c00117 	ldw	r3,4(r2)
    2570:	81000317 	ldw	r4,12(r16)
    2574:	81400217 	ldw	r5,8(r16)
    2578:	18c00054 	ori	r3,r3,1
    257c:	10c00115 	stw	r3,4(r2)
    2580:	29000315 	stw	r4,12(r5)
    2584:	21400215 	stw	r5,8(r4)
    2588:	9009883a 	mov	r4,r18
    258c:	0004d800 	call	4d80 <__malloc_unlock>
    2590:	80800204 	addi	r2,r16,8
    2594:	003f2506 	br	222c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700222c>
    2598:	12001704 	addi	r8,r2,92
    259c:	11c016c4 	addi	r7,r2,91
    25a0:	4209883a 	add	r4,r8,r8
    25a4:	003e9606 	br	2000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002000>
    25a8:	3804d1ba 	srli	r2,r7,6
    25ac:	11400e44 	addi	r5,r2,57
    25b0:	10c00e04 	addi	r3,r2,56
    25b4:	294b883a 	add	r5,r5,r5
    25b8:	003fbc06 	br	24ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024ac>
    25bc:	84ff5926 	beq	r16,r19,2324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002324>
    25c0:	00800074 	movhi	r2,1
    25c4:	1085f704 	addi	r2,r2,6108
    25c8:	14000217 	ldw	r16,8(r2)
    25cc:	00bfff04 	movi	r2,-4
    25d0:	80c00117 	ldw	r3,4(r16)
    25d4:	1886703a 	and	r3,r3,r2
    25d8:	003f9106 	br	2420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002420>
    25dc:	60800217 	ldw	r2,8(r12)
    25e0:	213fffc4 	addi	r4,r4,-1
    25e4:	1300651e 	bne	r2,r12,277c <_malloc_r+0x7f4>
    25e8:	208000cc 	andi	r2,r4,3
    25ec:	633ffe04 	addi	r12,r12,-8
    25f0:	103ffa1e 	bne	r2,zero,25dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025dc>
    25f4:	98800117 	ldw	r2,4(r19)
    25f8:	0146303a 	nor	r3,zero,r5
    25fc:	1884703a 	and	r2,r3,r2
    2600:	98800115 	stw	r2,4(r19)
    2604:	294b883a 	add	r5,r5,r5
    2608:	117f2836 	bltu	r2,r5,22ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022ac>
    260c:	283f2726 	beq	r5,zero,22ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022ac>
    2610:	2886703a 	and	r3,r5,r2
    2614:	5809883a 	mov	r4,r11
    2618:	183ec31e 	bne	r3,zero,2128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002128>
    261c:	294b883a 	add	r5,r5,r5
    2620:	2886703a 	and	r3,r5,r2
    2624:	21000104 	addi	r4,r4,4
    2628:	183ffc26 	beq	r3,zero,261c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700261c>
    262c:	003ebe06 	br	2128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002128>
    2630:	00c05504 	movi	r3,340
    2634:	18801236 	bltu	r3,r2,2680 <_malloc_r+0x6f8>
    2638:	8804d3fa 	srli	r2,r17,15
    263c:	12001e04 	addi	r8,r2,120
    2640:	11c01dc4 	addi	r7,r2,119
    2644:	4209883a 	add	r4,r8,r8
    2648:	003e6d06 	br	2000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002000>
    264c:	00c40004 	movi	r3,4096
    2650:	003f4606 	br	236c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700236c>
    2654:	00800044 	movi	r2,1
    2658:	a0800115 	stw	r2,4(r20)
    265c:	003f7406 	br	2430 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002430>
    2660:	1805d0ba 	srai	r2,r3,2
    2664:	01c00044 	movi	r7,1
    2668:	30c00117 	ldw	r3,4(r6)
    266c:	388e983a 	sll	r7,r7,r2
    2670:	2805883a 	mov	r2,r5
    2674:	38c6b03a 	or	r3,r7,r3
    2678:	30c00115 	stw	r3,4(r6)
    267c:	003f9b06 	br	24ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024ec>
    2680:	00c15504 	movi	r3,1364
    2684:	18801a36 	bltu	r3,r2,26f0 <_malloc_r+0x768>
    2688:	8804d4ba 	srli	r2,r17,18
    268c:	12001f44 	addi	r8,r2,125
    2690:	11c01f04 	addi	r7,r2,124
    2694:	4209883a 	add	r4,r8,r8
    2698:	003e5906 	br	2000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002000>
    269c:	ad400404 	addi	r21,r21,16
    26a0:	003f1706 	br	2300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002300>
    26a4:	00c01504 	movi	r3,84
    26a8:	18802336 	bltu	r3,r2,2738 <_malloc_r+0x7b0>
    26ac:	3804d33a 	srli	r2,r7,12
    26b0:	11401bc4 	addi	r5,r2,111
    26b4:	10c01b84 	addi	r3,r2,110
    26b8:	294b883a 	add	r5,r5,r5
    26bc:	003f7b06 	br	24ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024ac>
    26c0:	9c000217 	ldw	r16,8(r19)
    26c4:	00bfff04 	movi	r2,-4
    26c8:	80c00117 	ldw	r3,4(r16)
    26cc:	1886703a 	and	r3,r3,r2
    26d0:	003f5306 	br	2420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002420>
    26d4:	3083ffcc 	andi	r2,r6,4095
    26d8:	103f181e 	bne	r2,zero,233c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700233c>
    26dc:	99000217 	ldw	r4,8(r19)
    26e0:	b545883a 	add	r2,r22,r21
    26e4:	10800054 	ori	r2,r2,1
    26e8:	20800115 	stw	r2,4(r4)
    26ec:	003f3e06 	br	23e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023e8>
    26f0:	01003f84 	movi	r4,254
    26f4:	02001fc4 	movi	r8,127
    26f8:	01c01f84 	movi	r7,126
    26fc:	003e4006 	br	2000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002000>
    2700:	00800074 	movhi	r2,1
    2704:	108c4504 	addi	r2,r2,12564
    2708:	15000015 	stw	r20,0(r2)
    270c:	003f1106 	br	2354 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002354>
    2710:	00800044 	movi	r2,1
    2714:	002b883a 	mov	r21,zero
    2718:	003f1f06 	br	2398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002398>
    271c:	81400204 	addi	r5,r16,8
    2720:	9009883a 	mov	r4,r18
    2724:	0003a100 	call	3a10 <_free_r>
    2728:	00800074 	movhi	r2,1
    272c:	10942b04 	addi	r2,r2,20652
    2730:	10c00017 	ldw	r3,0(r2)
    2734:	003f2c06 	br	23e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023e8>
    2738:	00c05504 	movi	r3,340
    273c:	18800536 	bltu	r3,r2,2754 <_malloc_r+0x7cc>
    2740:	3804d3fa 	srli	r2,r7,15
    2744:	11401e04 	addi	r5,r2,120
    2748:	10c01dc4 	addi	r3,r2,119
    274c:	294b883a 	add	r5,r5,r5
    2750:	003f5606 	br	24ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024ac>
    2754:	00c15504 	movi	r3,1364
    2758:	18800536 	bltu	r3,r2,2770 <_malloc_r+0x7e8>
    275c:	3804d4ba 	srli	r2,r7,18
    2760:	11401f44 	addi	r5,r2,125
    2764:	10c01f04 	addi	r3,r2,124
    2768:	294b883a 	add	r5,r5,r5
    276c:	003f4f06 	br	24ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024ac>
    2770:	01403f84 	movi	r5,254
    2774:	00c01f84 	movi	r3,126
    2778:	003f4c06 	br	24ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024ac>
    277c:	98800117 	ldw	r2,4(r19)
    2780:	003fa006 	br	2604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002604>
    2784:	8808d0fa 	srli	r4,r17,3
    2788:	20800044 	addi	r2,r4,1
    278c:	1085883a 	add	r2,r2,r2
    2790:	003e9006 	br	21d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021d4>

00002794 <memchr>:
    2794:	208000cc 	andi	r2,r4,3
    2798:	280f883a 	mov	r7,r5
    279c:	10003426 	beq	r2,zero,2870 <memchr+0xdc>
    27a0:	30bfffc4 	addi	r2,r6,-1
    27a4:	30001a26 	beq	r6,zero,2810 <memchr+0x7c>
    27a8:	20c00003 	ldbu	r3,0(r4)
    27ac:	29803fcc 	andi	r6,r5,255
    27b0:	30c0051e 	bne	r6,r3,27c8 <memchr+0x34>
    27b4:	00001806 	br	2818 <memchr+0x84>
    27b8:	10001526 	beq	r2,zero,2810 <memchr+0x7c>
    27bc:	20c00003 	ldbu	r3,0(r4)
    27c0:	10bfffc4 	addi	r2,r2,-1
    27c4:	30c01426 	beq	r6,r3,2818 <memchr+0x84>
    27c8:	21000044 	addi	r4,r4,1
    27cc:	20c000cc 	andi	r3,r4,3
    27d0:	183ff91e 	bne	r3,zero,27b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027b8>
    27d4:	020000c4 	movi	r8,3
    27d8:	40801136 	bltu	r8,r2,2820 <memchr+0x8c>
    27dc:	10000c26 	beq	r2,zero,2810 <memchr+0x7c>
    27e0:	20c00003 	ldbu	r3,0(r4)
    27e4:	29403fcc 	andi	r5,r5,255
    27e8:	28c00b26 	beq	r5,r3,2818 <memchr+0x84>
    27ec:	20c00044 	addi	r3,r4,1
    27f0:	39803fcc 	andi	r6,r7,255
    27f4:	2089883a 	add	r4,r4,r2
    27f8:	00000306 	br	2808 <memchr+0x74>
    27fc:	18c00044 	addi	r3,r3,1
    2800:	197fffc3 	ldbu	r5,-1(r3)
    2804:	31400526 	beq	r6,r5,281c <memchr+0x88>
    2808:	1805883a 	mov	r2,r3
    280c:	20fffb1e 	bne	r4,r3,27fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027fc>
    2810:	0005883a 	mov	r2,zero
    2814:	f800283a 	ret
    2818:	2005883a 	mov	r2,r4
    281c:	f800283a 	ret
    2820:	28c03fcc 	andi	r3,r5,255
    2824:	1812923a 	slli	r9,r3,8
    2828:	02ffbff4 	movhi	r11,65279
    282c:	02a02074 	movhi	r10,32897
    2830:	48d2b03a 	or	r9,r9,r3
    2834:	4806943a 	slli	r3,r9,16
    2838:	5affbfc4 	addi	r11,r11,-257
    283c:	52a02004 	addi	r10,r10,-32640
    2840:	48d2b03a 	or	r9,r9,r3
    2844:	20c00017 	ldw	r3,0(r4)
    2848:	48c6f03a 	xor	r3,r9,r3
    284c:	1acd883a 	add	r6,r3,r11
    2850:	00c6303a 	nor	r3,zero,r3
    2854:	30c6703a 	and	r3,r6,r3
    2858:	1a86703a 	and	r3,r3,r10
    285c:	183fe01e 	bne	r3,zero,27e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027e0>
    2860:	10bfff04 	addi	r2,r2,-4
    2864:	21000104 	addi	r4,r4,4
    2868:	40bff636 	bltu	r8,r2,2844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002844>
    286c:	003fdb06 	br	27dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027dc>
    2870:	3005883a 	mov	r2,r6
    2874:	003fd706 	br	27d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027d4>

00002878 <memcpy>:
    2878:	defffd04 	addi	sp,sp,-12
    287c:	dfc00215 	stw	ra,8(sp)
    2880:	dc400115 	stw	r17,4(sp)
    2884:	dc000015 	stw	r16,0(sp)
    2888:	00c003c4 	movi	r3,15
    288c:	2005883a 	mov	r2,r4
    2890:	1980452e 	bgeu	r3,r6,29a8 <memcpy+0x130>
    2894:	2906b03a 	or	r3,r5,r4
    2898:	18c000cc 	andi	r3,r3,3
    289c:	1800441e 	bne	r3,zero,29b0 <memcpy+0x138>
    28a0:	347ffc04 	addi	r17,r6,-16
    28a4:	8822d13a 	srli	r17,r17,4
    28a8:	28c00104 	addi	r3,r5,4
    28ac:	23400104 	addi	r13,r4,4
    28b0:	8820913a 	slli	r16,r17,4
    28b4:	2b000204 	addi	r12,r5,8
    28b8:	22c00204 	addi	r11,r4,8
    28bc:	84000504 	addi	r16,r16,20
    28c0:	2a800304 	addi	r10,r5,12
    28c4:	22400304 	addi	r9,r4,12
    28c8:	2c21883a 	add	r16,r5,r16
    28cc:	2811883a 	mov	r8,r5
    28d0:	200f883a 	mov	r7,r4
    28d4:	41000017 	ldw	r4,0(r8)
    28d8:	1fc00017 	ldw	ra,0(r3)
    28dc:	63c00017 	ldw	r15,0(r12)
    28e0:	39000015 	stw	r4,0(r7)
    28e4:	53800017 	ldw	r14,0(r10)
    28e8:	6fc00015 	stw	ra,0(r13)
    28ec:	5bc00015 	stw	r15,0(r11)
    28f0:	4b800015 	stw	r14,0(r9)
    28f4:	18c00404 	addi	r3,r3,16
    28f8:	39c00404 	addi	r7,r7,16
    28fc:	42000404 	addi	r8,r8,16
    2900:	6b400404 	addi	r13,r13,16
    2904:	63000404 	addi	r12,r12,16
    2908:	5ac00404 	addi	r11,r11,16
    290c:	52800404 	addi	r10,r10,16
    2910:	4a400404 	addi	r9,r9,16
    2914:	1c3fef1e 	bne	r3,r16,28d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028d4>
    2918:	89c00044 	addi	r7,r17,1
    291c:	380e913a 	slli	r7,r7,4
    2920:	310003cc 	andi	r4,r6,15
    2924:	02c000c4 	movi	r11,3
    2928:	11c7883a 	add	r3,r2,r7
    292c:	29cb883a 	add	r5,r5,r7
    2930:	5900212e 	bgeu	r11,r4,29b8 <memcpy+0x140>
    2934:	1813883a 	mov	r9,r3
    2938:	2811883a 	mov	r8,r5
    293c:	200f883a 	mov	r7,r4
    2940:	42800017 	ldw	r10,0(r8)
    2944:	4a400104 	addi	r9,r9,4
    2948:	39ffff04 	addi	r7,r7,-4
    294c:	4abfff15 	stw	r10,-4(r9)
    2950:	42000104 	addi	r8,r8,4
    2954:	59fffa36 	bltu	r11,r7,2940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002940>
    2958:	213fff04 	addi	r4,r4,-4
    295c:	2008d0ba 	srli	r4,r4,2
    2960:	318000cc 	andi	r6,r6,3
    2964:	21000044 	addi	r4,r4,1
    2968:	2109883a 	add	r4,r4,r4
    296c:	2109883a 	add	r4,r4,r4
    2970:	1907883a 	add	r3,r3,r4
    2974:	290b883a 	add	r5,r5,r4
    2978:	30000626 	beq	r6,zero,2994 <memcpy+0x11c>
    297c:	198d883a 	add	r6,r3,r6
    2980:	29c00003 	ldbu	r7,0(r5)
    2984:	18c00044 	addi	r3,r3,1
    2988:	29400044 	addi	r5,r5,1
    298c:	19ffffc5 	stb	r7,-1(r3)
    2990:	19bffb1e 	bne	r3,r6,2980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002980>
    2994:	dfc00217 	ldw	ra,8(sp)
    2998:	dc400117 	ldw	r17,4(sp)
    299c:	dc000017 	ldw	r16,0(sp)
    29a0:	dec00304 	addi	sp,sp,12
    29a4:	f800283a 	ret
    29a8:	2007883a 	mov	r3,r4
    29ac:	003ff206 	br	2978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002978>
    29b0:	2007883a 	mov	r3,r4
    29b4:	003ff106 	br	297c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700297c>
    29b8:	200d883a 	mov	r6,r4
    29bc:	003fee06 	br	2978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002978>

000029c0 <memmove>:
    29c0:	2005883a 	mov	r2,r4
    29c4:	29000b2e 	bgeu	r5,r4,29f4 <memmove+0x34>
    29c8:	298f883a 	add	r7,r5,r6
    29cc:	21c0092e 	bgeu	r4,r7,29f4 <memmove+0x34>
    29d0:	2187883a 	add	r3,r4,r6
    29d4:	198bc83a 	sub	r5,r3,r6
    29d8:	30004826 	beq	r6,zero,2afc <memmove+0x13c>
    29dc:	39ffffc4 	addi	r7,r7,-1
    29e0:	39000003 	ldbu	r4,0(r7)
    29e4:	18ffffc4 	addi	r3,r3,-1
    29e8:	19000005 	stb	r4,0(r3)
    29ec:	28fffb1e 	bne	r5,r3,29dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029dc>
    29f0:	f800283a 	ret
    29f4:	00c003c4 	movi	r3,15
    29f8:	1980412e 	bgeu	r3,r6,2b00 <memmove+0x140>
    29fc:	2886b03a 	or	r3,r5,r2
    2a00:	18c000cc 	andi	r3,r3,3
    2a04:	1800401e 	bne	r3,zero,2b08 <memmove+0x148>
    2a08:	33fffc04 	addi	r15,r6,-16
    2a0c:	781ed13a 	srli	r15,r15,4
    2a10:	28c00104 	addi	r3,r5,4
    2a14:	13400104 	addi	r13,r2,4
    2a18:	781c913a 	slli	r14,r15,4
    2a1c:	2b000204 	addi	r12,r5,8
    2a20:	12c00204 	addi	r11,r2,8
    2a24:	73800504 	addi	r14,r14,20
    2a28:	2a800304 	addi	r10,r5,12
    2a2c:	12400304 	addi	r9,r2,12
    2a30:	2b9d883a 	add	r14,r5,r14
    2a34:	2811883a 	mov	r8,r5
    2a38:	100f883a 	mov	r7,r2
    2a3c:	41000017 	ldw	r4,0(r8)
    2a40:	39c00404 	addi	r7,r7,16
    2a44:	18c00404 	addi	r3,r3,16
    2a48:	393ffc15 	stw	r4,-16(r7)
    2a4c:	193ffc17 	ldw	r4,-16(r3)
    2a50:	6b400404 	addi	r13,r13,16
    2a54:	5ac00404 	addi	r11,r11,16
    2a58:	693ffc15 	stw	r4,-16(r13)
    2a5c:	61000017 	ldw	r4,0(r12)
    2a60:	4a400404 	addi	r9,r9,16
    2a64:	42000404 	addi	r8,r8,16
    2a68:	593ffc15 	stw	r4,-16(r11)
    2a6c:	51000017 	ldw	r4,0(r10)
    2a70:	63000404 	addi	r12,r12,16
    2a74:	52800404 	addi	r10,r10,16
    2a78:	493ffc15 	stw	r4,-16(r9)
    2a7c:	1bbfef1e 	bne	r3,r14,2a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a3c>
    2a80:	79000044 	addi	r4,r15,1
    2a84:	2008913a 	slli	r4,r4,4
    2a88:	328003cc 	andi	r10,r6,15
    2a8c:	02c000c4 	movi	r11,3
    2a90:	1107883a 	add	r3,r2,r4
    2a94:	290b883a 	add	r5,r5,r4
    2a98:	5a801e2e 	bgeu	r11,r10,2b14 <memmove+0x154>
    2a9c:	1813883a 	mov	r9,r3
    2aa0:	2811883a 	mov	r8,r5
    2aa4:	500f883a 	mov	r7,r10
    2aa8:	41000017 	ldw	r4,0(r8)
    2aac:	4a400104 	addi	r9,r9,4
    2ab0:	39ffff04 	addi	r7,r7,-4
    2ab4:	493fff15 	stw	r4,-4(r9)
    2ab8:	42000104 	addi	r8,r8,4
    2abc:	59fffa36 	bltu	r11,r7,2aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aa8>
    2ac0:	513fff04 	addi	r4,r10,-4
    2ac4:	2008d0ba 	srli	r4,r4,2
    2ac8:	318000cc 	andi	r6,r6,3
    2acc:	21000044 	addi	r4,r4,1
    2ad0:	2109883a 	add	r4,r4,r4
    2ad4:	2109883a 	add	r4,r4,r4
    2ad8:	1907883a 	add	r3,r3,r4
    2adc:	290b883a 	add	r5,r5,r4
    2ae0:	30000b26 	beq	r6,zero,2b10 <memmove+0x150>
    2ae4:	198d883a 	add	r6,r3,r6
    2ae8:	29c00003 	ldbu	r7,0(r5)
    2aec:	18c00044 	addi	r3,r3,1
    2af0:	29400044 	addi	r5,r5,1
    2af4:	19ffffc5 	stb	r7,-1(r3)
    2af8:	19bffb1e 	bne	r3,r6,2ae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ae8>
    2afc:	f800283a 	ret
    2b00:	1007883a 	mov	r3,r2
    2b04:	003ff606 	br	2ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ae0>
    2b08:	1007883a 	mov	r3,r2
    2b0c:	003ff506 	br	2ae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ae4>
    2b10:	f800283a 	ret
    2b14:	500d883a 	mov	r6,r10
    2b18:	003ff106 	br	2ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ae0>

00002b1c <memset>:
    2b1c:	20c000cc 	andi	r3,r4,3
    2b20:	2005883a 	mov	r2,r4
    2b24:	18004426 	beq	r3,zero,2c38 <memset+0x11c>
    2b28:	31ffffc4 	addi	r7,r6,-1
    2b2c:	30004026 	beq	r6,zero,2c30 <memset+0x114>
    2b30:	2813883a 	mov	r9,r5
    2b34:	200d883a 	mov	r6,r4
    2b38:	2007883a 	mov	r3,r4
    2b3c:	00000406 	br	2b50 <memset+0x34>
    2b40:	3a3fffc4 	addi	r8,r7,-1
    2b44:	31800044 	addi	r6,r6,1
    2b48:	38003926 	beq	r7,zero,2c30 <memset+0x114>
    2b4c:	400f883a 	mov	r7,r8
    2b50:	18c00044 	addi	r3,r3,1
    2b54:	32400005 	stb	r9,0(r6)
    2b58:	1a0000cc 	andi	r8,r3,3
    2b5c:	403ff81e 	bne	r8,zero,2b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b40>
    2b60:	010000c4 	movi	r4,3
    2b64:	21c02d2e 	bgeu	r4,r7,2c1c <memset+0x100>
    2b68:	29003fcc 	andi	r4,r5,255
    2b6c:	200c923a 	slli	r6,r4,8
    2b70:	3108b03a 	or	r4,r6,r4
    2b74:	200c943a 	slli	r6,r4,16
    2b78:	218cb03a 	or	r6,r4,r6
    2b7c:	010003c4 	movi	r4,15
    2b80:	21c0182e 	bgeu	r4,r7,2be4 <memset+0xc8>
    2b84:	3b3ffc04 	addi	r12,r7,-16
    2b88:	6018d13a 	srli	r12,r12,4
    2b8c:	1a000104 	addi	r8,r3,4
    2b90:	1ac00204 	addi	r11,r3,8
    2b94:	6008913a 	slli	r4,r12,4
    2b98:	1a800304 	addi	r10,r3,12
    2b9c:	1813883a 	mov	r9,r3
    2ba0:	21000504 	addi	r4,r4,20
    2ba4:	1909883a 	add	r4,r3,r4
    2ba8:	49800015 	stw	r6,0(r9)
    2bac:	41800015 	stw	r6,0(r8)
    2bb0:	59800015 	stw	r6,0(r11)
    2bb4:	51800015 	stw	r6,0(r10)
    2bb8:	42000404 	addi	r8,r8,16
    2bbc:	4a400404 	addi	r9,r9,16
    2bc0:	5ac00404 	addi	r11,r11,16
    2bc4:	52800404 	addi	r10,r10,16
    2bc8:	413ff71e 	bne	r8,r4,2ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ba8>
    2bcc:	63000044 	addi	r12,r12,1
    2bd0:	6018913a 	slli	r12,r12,4
    2bd4:	39c003cc 	andi	r7,r7,15
    2bd8:	010000c4 	movi	r4,3
    2bdc:	1b07883a 	add	r3,r3,r12
    2be0:	21c00e2e 	bgeu	r4,r7,2c1c <memset+0x100>
    2be4:	1813883a 	mov	r9,r3
    2be8:	3811883a 	mov	r8,r7
    2bec:	010000c4 	movi	r4,3
    2bf0:	49800015 	stw	r6,0(r9)
    2bf4:	423fff04 	addi	r8,r8,-4
    2bf8:	4a400104 	addi	r9,r9,4
    2bfc:	223ffc36 	bltu	r4,r8,2bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bf0>
    2c00:	393fff04 	addi	r4,r7,-4
    2c04:	2008d0ba 	srli	r4,r4,2
    2c08:	39c000cc 	andi	r7,r7,3
    2c0c:	21000044 	addi	r4,r4,1
    2c10:	2109883a 	add	r4,r4,r4
    2c14:	2109883a 	add	r4,r4,r4
    2c18:	1907883a 	add	r3,r3,r4
    2c1c:	38000526 	beq	r7,zero,2c34 <memset+0x118>
    2c20:	19cf883a 	add	r7,r3,r7
    2c24:	19400005 	stb	r5,0(r3)
    2c28:	18c00044 	addi	r3,r3,1
    2c2c:	38fffd1e 	bne	r7,r3,2c24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c24>
    2c30:	f800283a 	ret
    2c34:	f800283a 	ret
    2c38:	2007883a 	mov	r3,r4
    2c3c:	300f883a 	mov	r7,r6
    2c40:	003fc706 	br	2b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b60>

00002c44 <_realloc_r>:
    2c44:	defff604 	addi	sp,sp,-40
    2c48:	dc800215 	stw	r18,8(sp)
    2c4c:	dfc00915 	stw	ra,36(sp)
    2c50:	df000815 	stw	fp,32(sp)
    2c54:	ddc00715 	stw	r23,28(sp)
    2c58:	dd800615 	stw	r22,24(sp)
    2c5c:	dd400515 	stw	r21,20(sp)
    2c60:	dd000415 	stw	r20,16(sp)
    2c64:	dcc00315 	stw	r19,12(sp)
    2c68:	dc400115 	stw	r17,4(sp)
    2c6c:	dc000015 	stw	r16,0(sp)
    2c70:	3025883a 	mov	r18,r6
    2c74:	2800b726 	beq	r5,zero,2f54 <_realloc_r+0x310>
    2c78:	282b883a 	mov	r21,r5
    2c7c:	2029883a 	mov	r20,r4
    2c80:	0004c600 	call	4c60 <__malloc_lock>
    2c84:	a8bfff17 	ldw	r2,-4(r21)
    2c88:	043fff04 	movi	r16,-4
    2c8c:	90c002c4 	addi	r3,r18,11
    2c90:	01000584 	movi	r4,22
    2c94:	acfffe04 	addi	r19,r21,-8
    2c98:	1420703a 	and	r16,r2,r16
    2c9c:	20c0332e 	bgeu	r4,r3,2d6c <_realloc_r+0x128>
    2ca0:	047ffe04 	movi	r17,-8
    2ca4:	1c62703a 	and	r17,r3,r17
    2ca8:	8807883a 	mov	r3,r17
    2cac:	88005816 	blt	r17,zero,2e10 <_realloc_r+0x1cc>
    2cb0:	8c805736 	bltu	r17,r18,2e10 <_realloc_r+0x1cc>
    2cb4:	80c0300e 	bge	r16,r3,2d78 <_realloc_r+0x134>
    2cb8:	07000074 	movhi	fp,1
    2cbc:	e705f704 	addi	fp,fp,6108
    2cc0:	e1c00217 	ldw	r7,8(fp)
    2cc4:	9c09883a 	add	r4,r19,r16
    2cc8:	22000117 	ldw	r8,4(r4)
    2ccc:	21c06326 	beq	r4,r7,2e5c <_realloc_r+0x218>
    2cd0:	017fff84 	movi	r5,-2
    2cd4:	414a703a 	and	r5,r8,r5
    2cd8:	214b883a 	add	r5,r4,r5
    2cdc:	29800117 	ldw	r6,4(r5)
    2ce0:	3180004c 	andi	r6,r6,1
    2ce4:	30003f26 	beq	r6,zero,2de4 <_realloc_r+0x1a0>
    2ce8:	1080004c 	andi	r2,r2,1
    2cec:	10008326 	beq	r2,zero,2efc <_realloc_r+0x2b8>
    2cf0:	900b883a 	mov	r5,r18
    2cf4:	a009883a 	mov	r4,r20
    2cf8:	0001f880 	call	1f88 <_malloc_r>
    2cfc:	1025883a 	mov	r18,r2
    2d00:	10011e26 	beq	r2,zero,317c <_realloc_r+0x538>
    2d04:	a93fff17 	ldw	r4,-4(r21)
    2d08:	10fffe04 	addi	r3,r2,-8
    2d0c:	00bfff84 	movi	r2,-2
    2d10:	2084703a 	and	r2,r4,r2
    2d14:	9885883a 	add	r2,r19,r2
    2d18:	1880ee26 	beq	r3,r2,30d4 <_realloc_r+0x490>
    2d1c:	81bfff04 	addi	r6,r16,-4
    2d20:	00800904 	movi	r2,36
    2d24:	1180b836 	bltu	r2,r6,3008 <_realloc_r+0x3c4>
    2d28:	00c004c4 	movi	r3,19
    2d2c:	19809636 	bltu	r3,r6,2f88 <_realloc_r+0x344>
    2d30:	9005883a 	mov	r2,r18
    2d34:	a807883a 	mov	r3,r21
    2d38:	19000017 	ldw	r4,0(r3)
    2d3c:	11000015 	stw	r4,0(r2)
    2d40:	19000117 	ldw	r4,4(r3)
    2d44:	11000115 	stw	r4,4(r2)
    2d48:	18c00217 	ldw	r3,8(r3)
    2d4c:	10c00215 	stw	r3,8(r2)
    2d50:	a80b883a 	mov	r5,r21
    2d54:	a009883a 	mov	r4,r20
    2d58:	0003a100 	call	3a10 <_free_r>
    2d5c:	a009883a 	mov	r4,r20
    2d60:	0004d800 	call	4d80 <__malloc_unlock>
    2d64:	9005883a 	mov	r2,r18
    2d68:	00001206 	br	2db4 <_realloc_r+0x170>
    2d6c:	00c00404 	movi	r3,16
    2d70:	1823883a 	mov	r17,r3
    2d74:	003fce06 	br	2cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb0>
    2d78:	a825883a 	mov	r18,r21
    2d7c:	8445c83a 	sub	r2,r16,r17
    2d80:	00c003c4 	movi	r3,15
    2d84:	18802636 	bltu	r3,r2,2e20 <_realloc_r+0x1dc>
    2d88:	99800117 	ldw	r6,4(r19)
    2d8c:	9c07883a 	add	r3,r19,r16
    2d90:	3180004c 	andi	r6,r6,1
    2d94:	3420b03a 	or	r16,r6,r16
    2d98:	9c000115 	stw	r16,4(r19)
    2d9c:	18800117 	ldw	r2,4(r3)
    2da0:	10800054 	ori	r2,r2,1
    2da4:	18800115 	stw	r2,4(r3)
    2da8:	a009883a 	mov	r4,r20
    2dac:	0004d800 	call	4d80 <__malloc_unlock>
    2db0:	9005883a 	mov	r2,r18
    2db4:	dfc00917 	ldw	ra,36(sp)
    2db8:	df000817 	ldw	fp,32(sp)
    2dbc:	ddc00717 	ldw	r23,28(sp)
    2dc0:	dd800617 	ldw	r22,24(sp)
    2dc4:	dd400517 	ldw	r21,20(sp)
    2dc8:	dd000417 	ldw	r20,16(sp)
    2dcc:	dcc00317 	ldw	r19,12(sp)
    2dd0:	dc800217 	ldw	r18,8(sp)
    2dd4:	dc400117 	ldw	r17,4(sp)
    2dd8:	dc000017 	ldw	r16,0(sp)
    2ddc:	dec00a04 	addi	sp,sp,40
    2de0:	f800283a 	ret
    2de4:	017fff04 	movi	r5,-4
    2de8:	414a703a 	and	r5,r8,r5
    2dec:	814d883a 	add	r6,r16,r5
    2df0:	30c01f16 	blt	r6,r3,2e70 <_realloc_r+0x22c>
    2df4:	20800317 	ldw	r2,12(r4)
    2df8:	20c00217 	ldw	r3,8(r4)
    2dfc:	a825883a 	mov	r18,r21
    2e00:	3021883a 	mov	r16,r6
    2e04:	18800315 	stw	r2,12(r3)
    2e08:	10c00215 	stw	r3,8(r2)
    2e0c:	003fdb06 	br	2d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d7c>
    2e10:	00800304 	movi	r2,12
    2e14:	a0800015 	stw	r2,0(r20)
    2e18:	0005883a 	mov	r2,zero
    2e1c:	003fe506 	br	2db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002db4>
    2e20:	98c00117 	ldw	r3,4(r19)
    2e24:	9c4b883a 	add	r5,r19,r17
    2e28:	11000054 	ori	r4,r2,1
    2e2c:	18c0004c 	andi	r3,r3,1
    2e30:	1c62b03a 	or	r17,r3,r17
    2e34:	9c400115 	stw	r17,4(r19)
    2e38:	29000115 	stw	r4,4(r5)
    2e3c:	2885883a 	add	r2,r5,r2
    2e40:	10c00117 	ldw	r3,4(r2)
    2e44:	29400204 	addi	r5,r5,8
    2e48:	a009883a 	mov	r4,r20
    2e4c:	18c00054 	ori	r3,r3,1
    2e50:	10c00115 	stw	r3,4(r2)
    2e54:	0003a100 	call	3a10 <_free_r>
    2e58:	003fd306 	br	2da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002da8>
    2e5c:	017fff04 	movi	r5,-4
    2e60:	414a703a 	and	r5,r8,r5
    2e64:	89800404 	addi	r6,r17,16
    2e68:	8151883a 	add	r8,r16,r5
    2e6c:	4180590e 	bge	r8,r6,2fd4 <_realloc_r+0x390>
    2e70:	1080004c 	andi	r2,r2,1
    2e74:	103f9e1e 	bne	r2,zero,2cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf0>
    2e78:	adbffe17 	ldw	r22,-8(r21)
    2e7c:	00bfff04 	movi	r2,-4
    2e80:	9dadc83a 	sub	r22,r19,r22
    2e84:	b1800117 	ldw	r6,4(r22)
    2e88:	3084703a 	and	r2,r6,r2
    2e8c:	20002026 	beq	r4,zero,2f10 <_realloc_r+0x2cc>
    2e90:	80af883a 	add	r23,r16,r2
    2e94:	b96f883a 	add	r23,r23,r5
    2e98:	21c05f26 	beq	r4,r7,3018 <_realloc_r+0x3d4>
    2e9c:	b8c01c16 	blt	r23,r3,2f10 <_realloc_r+0x2cc>
    2ea0:	20800317 	ldw	r2,12(r4)
    2ea4:	20c00217 	ldw	r3,8(r4)
    2ea8:	81bfff04 	addi	r6,r16,-4
    2eac:	01000904 	movi	r4,36
    2eb0:	18800315 	stw	r2,12(r3)
    2eb4:	10c00215 	stw	r3,8(r2)
    2eb8:	b0c00217 	ldw	r3,8(r22)
    2ebc:	b0800317 	ldw	r2,12(r22)
    2ec0:	b4800204 	addi	r18,r22,8
    2ec4:	18800315 	stw	r2,12(r3)
    2ec8:	10c00215 	stw	r3,8(r2)
    2ecc:	21801b36 	bltu	r4,r6,2f3c <_realloc_r+0x2f8>
    2ed0:	008004c4 	movi	r2,19
    2ed4:	1180352e 	bgeu	r2,r6,2fac <_realloc_r+0x368>
    2ed8:	a8800017 	ldw	r2,0(r21)
    2edc:	b0800215 	stw	r2,8(r22)
    2ee0:	a8800117 	ldw	r2,4(r21)
    2ee4:	b0800315 	stw	r2,12(r22)
    2ee8:	008006c4 	movi	r2,27
    2eec:	11807f36 	bltu	r2,r6,30ec <_realloc_r+0x4a8>
    2ef0:	b0800404 	addi	r2,r22,16
    2ef4:	ad400204 	addi	r21,r21,8
    2ef8:	00002d06 	br	2fb0 <_realloc_r+0x36c>
    2efc:	adbffe17 	ldw	r22,-8(r21)
    2f00:	00bfff04 	movi	r2,-4
    2f04:	9dadc83a 	sub	r22,r19,r22
    2f08:	b1000117 	ldw	r4,4(r22)
    2f0c:	2084703a 	and	r2,r4,r2
    2f10:	b03f7726 	beq	r22,zero,2cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf0>
    2f14:	80af883a 	add	r23,r16,r2
    2f18:	b8ff7516 	blt	r23,r3,2cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf0>
    2f1c:	b0800317 	ldw	r2,12(r22)
    2f20:	b0c00217 	ldw	r3,8(r22)
    2f24:	81bfff04 	addi	r6,r16,-4
    2f28:	01000904 	movi	r4,36
    2f2c:	18800315 	stw	r2,12(r3)
    2f30:	10c00215 	stw	r3,8(r2)
    2f34:	b4800204 	addi	r18,r22,8
    2f38:	21bfe52e 	bgeu	r4,r6,2ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed0>
    2f3c:	a80b883a 	mov	r5,r21
    2f40:	9009883a 	mov	r4,r18
    2f44:	00029c00 	call	29c0 <memmove>
    2f48:	b821883a 	mov	r16,r23
    2f4c:	b027883a 	mov	r19,r22
    2f50:	003f8a06 	br	2d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d7c>
    2f54:	300b883a 	mov	r5,r6
    2f58:	dfc00917 	ldw	ra,36(sp)
    2f5c:	df000817 	ldw	fp,32(sp)
    2f60:	ddc00717 	ldw	r23,28(sp)
    2f64:	dd800617 	ldw	r22,24(sp)
    2f68:	dd400517 	ldw	r21,20(sp)
    2f6c:	dd000417 	ldw	r20,16(sp)
    2f70:	dcc00317 	ldw	r19,12(sp)
    2f74:	dc800217 	ldw	r18,8(sp)
    2f78:	dc400117 	ldw	r17,4(sp)
    2f7c:	dc000017 	ldw	r16,0(sp)
    2f80:	dec00a04 	addi	sp,sp,40
    2f84:	0001f881 	jmpi	1f88 <_malloc_r>
    2f88:	a8c00017 	ldw	r3,0(r21)
    2f8c:	90c00015 	stw	r3,0(r18)
    2f90:	a8c00117 	ldw	r3,4(r21)
    2f94:	90c00115 	stw	r3,4(r18)
    2f98:	00c006c4 	movi	r3,27
    2f9c:	19804536 	bltu	r3,r6,30b4 <_realloc_r+0x470>
    2fa0:	90800204 	addi	r2,r18,8
    2fa4:	a8c00204 	addi	r3,r21,8
    2fa8:	003f6306 	br	2d38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d38>
    2fac:	9005883a 	mov	r2,r18
    2fb0:	a8c00017 	ldw	r3,0(r21)
    2fb4:	b821883a 	mov	r16,r23
    2fb8:	b027883a 	mov	r19,r22
    2fbc:	10c00015 	stw	r3,0(r2)
    2fc0:	a8c00117 	ldw	r3,4(r21)
    2fc4:	10c00115 	stw	r3,4(r2)
    2fc8:	a8c00217 	ldw	r3,8(r21)
    2fcc:	10c00215 	stw	r3,8(r2)
    2fd0:	003f6a06 	br	2d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d7c>
    2fd4:	9c67883a 	add	r19,r19,r17
    2fd8:	4445c83a 	sub	r2,r8,r17
    2fdc:	e4c00215 	stw	r19,8(fp)
    2fe0:	10800054 	ori	r2,r2,1
    2fe4:	98800115 	stw	r2,4(r19)
    2fe8:	a8bfff17 	ldw	r2,-4(r21)
    2fec:	a009883a 	mov	r4,r20
    2ff0:	1080004c 	andi	r2,r2,1
    2ff4:	1462b03a 	or	r17,r2,r17
    2ff8:	ac7fff15 	stw	r17,-4(r21)
    2ffc:	0004d800 	call	4d80 <__malloc_unlock>
    3000:	a805883a 	mov	r2,r21
    3004:	003f6b06 	br	2db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002db4>
    3008:	a80b883a 	mov	r5,r21
    300c:	9009883a 	mov	r4,r18
    3010:	00029c00 	call	29c0 <memmove>
    3014:	003f4e06 	br	2d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d50>
    3018:	89000404 	addi	r4,r17,16
    301c:	b93fbc16 	blt	r23,r4,2f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f10>
    3020:	b0800317 	ldw	r2,12(r22)
    3024:	b0c00217 	ldw	r3,8(r22)
    3028:	81bfff04 	addi	r6,r16,-4
    302c:	01000904 	movi	r4,36
    3030:	18800315 	stw	r2,12(r3)
    3034:	10c00215 	stw	r3,8(r2)
    3038:	b4800204 	addi	r18,r22,8
    303c:	21804336 	bltu	r4,r6,314c <_realloc_r+0x508>
    3040:	008004c4 	movi	r2,19
    3044:	11803f2e 	bgeu	r2,r6,3144 <_realloc_r+0x500>
    3048:	a8800017 	ldw	r2,0(r21)
    304c:	b0800215 	stw	r2,8(r22)
    3050:	a8800117 	ldw	r2,4(r21)
    3054:	b0800315 	stw	r2,12(r22)
    3058:	008006c4 	movi	r2,27
    305c:	11803f36 	bltu	r2,r6,315c <_realloc_r+0x518>
    3060:	b0800404 	addi	r2,r22,16
    3064:	ad400204 	addi	r21,r21,8
    3068:	a8c00017 	ldw	r3,0(r21)
    306c:	10c00015 	stw	r3,0(r2)
    3070:	a8c00117 	ldw	r3,4(r21)
    3074:	10c00115 	stw	r3,4(r2)
    3078:	a8c00217 	ldw	r3,8(r21)
    307c:	10c00215 	stw	r3,8(r2)
    3080:	b447883a 	add	r3,r22,r17
    3084:	bc45c83a 	sub	r2,r23,r17
    3088:	e0c00215 	stw	r3,8(fp)
    308c:	10800054 	ori	r2,r2,1
    3090:	18800115 	stw	r2,4(r3)
    3094:	b0800117 	ldw	r2,4(r22)
    3098:	a009883a 	mov	r4,r20
    309c:	1080004c 	andi	r2,r2,1
    30a0:	1462b03a 	or	r17,r2,r17
    30a4:	b4400115 	stw	r17,4(r22)
    30a8:	0004d800 	call	4d80 <__malloc_unlock>
    30ac:	9005883a 	mov	r2,r18
    30b0:	003f4006 	br	2db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002db4>
    30b4:	a8c00217 	ldw	r3,8(r21)
    30b8:	90c00215 	stw	r3,8(r18)
    30bc:	a8c00317 	ldw	r3,12(r21)
    30c0:	90c00315 	stw	r3,12(r18)
    30c4:	30801126 	beq	r6,r2,310c <_realloc_r+0x4c8>
    30c8:	90800404 	addi	r2,r18,16
    30cc:	a8c00404 	addi	r3,r21,16
    30d0:	003f1906 	br	2d38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d38>
    30d4:	90ffff17 	ldw	r3,-4(r18)
    30d8:	00bfff04 	movi	r2,-4
    30dc:	a825883a 	mov	r18,r21
    30e0:	1884703a 	and	r2,r3,r2
    30e4:	80a1883a 	add	r16,r16,r2
    30e8:	003f2406 	br	2d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d7c>
    30ec:	a8800217 	ldw	r2,8(r21)
    30f0:	b0800415 	stw	r2,16(r22)
    30f4:	a8800317 	ldw	r2,12(r21)
    30f8:	b0800515 	stw	r2,20(r22)
    30fc:	31000a26 	beq	r6,r4,3128 <_realloc_r+0x4e4>
    3100:	b0800604 	addi	r2,r22,24
    3104:	ad400404 	addi	r21,r21,16
    3108:	003fa906 	br	2fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fb0>
    310c:	a9000417 	ldw	r4,16(r21)
    3110:	90800604 	addi	r2,r18,24
    3114:	a8c00604 	addi	r3,r21,24
    3118:	91000415 	stw	r4,16(r18)
    311c:	a9000517 	ldw	r4,20(r21)
    3120:	91000515 	stw	r4,20(r18)
    3124:	003f0406 	br	2d38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d38>
    3128:	a8c00417 	ldw	r3,16(r21)
    312c:	ad400604 	addi	r21,r21,24
    3130:	b0800804 	addi	r2,r22,32
    3134:	b0c00615 	stw	r3,24(r22)
    3138:	a8ffff17 	ldw	r3,-4(r21)
    313c:	b0c00715 	stw	r3,28(r22)
    3140:	003f9b06 	br	2fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fb0>
    3144:	9005883a 	mov	r2,r18
    3148:	003fc706 	br	3068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003068>
    314c:	a80b883a 	mov	r5,r21
    3150:	9009883a 	mov	r4,r18
    3154:	00029c00 	call	29c0 <memmove>
    3158:	003fc906 	br	3080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003080>
    315c:	a8800217 	ldw	r2,8(r21)
    3160:	b0800415 	stw	r2,16(r22)
    3164:	a8800317 	ldw	r2,12(r21)
    3168:	b0800515 	stw	r2,20(r22)
    316c:	31000726 	beq	r6,r4,318c <_realloc_r+0x548>
    3170:	b0800604 	addi	r2,r22,24
    3174:	ad400404 	addi	r21,r21,16
    3178:	003fbb06 	br	3068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003068>
    317c:	a009883a 	mov	r4,r20
    3180:	0004d800 	call	4d80 <__malloc_unlock>
    3184:	0005883a 	mov	r2,zero
    3188:	003f0a06 	br	2db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002db4>
    318c:	a8c00417 	ldw	r3,16(r21)
    3190:	ad400604 	addi	r21,r21,24
    3194:	b0800804 	addi	r2,r22,32
    3198:	b0c00615 	stw	r3,24(r22)
    319c:	a8ffff17 	ldw	r3,-4(r21)
    31a0:	b0c00715 	stw	r3,28(r22)
    31a4:	003fb006 	br	3068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003068>

000031a8 <_sbrk_r>:
    31a8:	defffd04 	addi	sp,sp,-12
    31ac:	dc000015 	stw	r16,0(sp)
    31b0:	04000074 	movhi	r16,1
    31b4:	dc400115 	stw	r17,4(sp)
    31b8:	84140a04 	addi	r16,r16,20520
    31bc:	2023883a 	mov	r17,r4
    31c0:	2809883a 	mov	r4,r5
    31c4:	dfc00215 	stw	ra,8(sp)
    31c8:	80000015 	stw	zero,0(r16)
    31cc:	00049580 	call	4958 <sbrk>
    31d0:	00ffffc4 	movi	r3,-1
    31d4:	10c00526 	beq	r2,r3,31ec <_sbrk_r+0x44>
    31d8:	dfc00217 	ldw	ra,8(sp)
    31dc:	dc400117 	ldw	r17,4(sp)
    31e0:	dc000017 	ldw	r16,0(sp)
    31e4:	dec00304 	addi	sp,sp,12
    31e8:	f800283a 	ret
    31ec:	80c00017 	ldw	r3,0(r16)
    31f0:	183ff926 	beq	r3,zero,31d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70031d8>
    31f4:	88c00015 	stw	r3,0(r17)
    31f8:	003ff706 	br	31d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70031d8>

000031fc <__sread>:
    31fc:	defffe04 	addi	sp,sp,-8
    3200:	dc000015 	stw	r16,0(sp)
    3204:	2821883a 	mov	r16,r5
    3208:	2940038f 	ldh	r5,14(r5)
    320c:	dfc00115 	stw	ra,4(sp)
    3210:	0003f3c0 	call	3f3c <_read_r>
    3214:	10000716 	blt	r2,zero,3234 <__sread+0x38>
    3218:	80c01417 	ldw	r3,80(r16)
    321c:	1887883a 	add	r3,r3,r2
    3220:	80c01415 	stw	r3,80(r16)
    3224:	dfc00117 	ldw	ra,4(sp)
    3228:	dc000017 	ldw	r16,0(sp)
    322c:	dec00204 	addi	sp,sp,8
    3230:	f800283a 	ret
    3234:	80c0030b 	ldhu	r3,12(r16)
    3238:	18fbffcc 	andi	r3,r3,61439
    323c:	80c0030d 	sth	r3,12(r16)
    3240:	dfc00117 	ldw	ra,4(sp)
    3244:	dc000017 	ldw	r16,0(sp)
    3248:	dec00204 	addi	sp,sp,8
    324c:	f800283a 	ret

00003250 <__seofread>:
    3250:	0005883a 	mov	r2,zero
    3254:	f800283a 	ret

00003258 <__swrite>:
    3258:	2880030b 	ldhu	r2,12(r5)
    325c:	defffb04 	addi	sp,sp,-20
    3260:	dcc00315 	stw	r19,12(sp)
    3264:	dc800215 	stw	r18,8(sp)
    3268:	dc400115 	stw	r17,4(sp)
    326c:	dc000015 	stw	r16,0(sp)
    3270:	dfc00415 	stw	ra,16(sp)
    3274:	10c0400c 	andi	r3,r2,256
    3278:	2821883a 	mov	r16,r5
    327c:	2023883a 	mov	r17,r4
    3280:	3025883a 	mov	r18,r6
    3284:	3827883a 	mov	r19,r7
    3288:	18000526 	beq	r3,zero,32a0 <__swrite+0x48>
    328c:	2940038f 	ldh	r5,14(r5)
    3290:	01c00084 	movi	r7,2
    3294:	000d883a 	mov	r6,zero
    3298:	0003d200 	call	3d20 <_lseek_r>
    329c:	8080030b 	ldhu	r2,12(r16)
    32a0:	8140038f 	ldh	r5,14(r16)
    32a4:	10bbffcc 	andi	r2,r2,61439
    32a8:	980f883a 	mov	r7,r19
    32ac:	900d883a 	mov	r6,r18
    32b0:	8809883a 	mov	r4,r17
    32b4:	8080030d 	sth	r2,12(r16)
    32b8:	dfc00417 	ldw	ra,16(sp)
    32bc:	dcc00317 	ldw	r19,12(sp)
    32c0:	dc800217 	ldw	r18,8(sp)
    32c4:	dc400117 	ldw	r17,4(sp)
    32c8:	dc000017 	ldw	r16,0(sp)
    32cc:	dec00504 	addi	sp,sp,20
    32d0:	00033381 	jmpi	3338 <_write_r>

000032d4 <__sseek>:
    32d4:	defffe04 	addi	sp,sp,-8
    32d8:	dc000015 	stw	r16,0(sp)
    32dc:	2821883a 	mov	r16,r5
    32e0:	2940038f 	ldh	r5,14(r5)
    32e4:	dfc00115 	stw	ra,4(sp)
    32e8:	0003d200 	call	3d20 <_lseek_r>
    32ec:	00ffffc4 	movi	r3,-1
    32f0:	10c00826 	beq	r2,r3,3314 <__sseek+0x40>
    32f4:	80c0030b 	ldhu	r3,12(r16)
    32f8:	80801415 	stw	r2,80(r16)
    32fc:	18c40014 	ori	r3,r3,4096
    3300:	80c0030d 	sth	r3,12(r16)
    3304:	dfc00117 	ldw	ra,4(sp)
    3308:	dc000017 	ldw	r16,0(sp)
    330c:	dec00204 	addi	sp,sp,8
    3310:	f800283a 	ret
    3314:	80c0030b 	ldhu	r3,12(r16)
    3318:	18fbffcc 	andi	r3,r3,61439
    331c:	80c0030d 	sth	r3,12(r16)
    3320:	dfc00117 	ldw	ra,4(sp)
    3324:	dc000017 	ldw	r16,0(sp)
    3328:	dec00204 	addi	sp,sp,8
    332c:	f800283a 	ret

00003330 <__sclose>:
    3330:	2940038f 	ldh	r5,14(r5)
    3334:	00034ec1 	jmpi	34ec <_close_r>

00003338 <_write_r>:
    3338:	defffd04 	addi	sp,sp,-12
    333c:	2805883a 	mov	r2,r5
    3340:	dc000015 	stw	r16,0(sp)
    3344:	04000074 	movhi	r16,1
    3348:	dc400115 	stw	r17,4(sp)
    334c:	300b883a 	mov	r5,r6
    3350:	84140a04 	addi	r16,r16,20520
    3354:	2023883a 	mov	r17,r4
    3358:	380d883a 	mov	r6,r7
    335c:	1009883a 	mov	r4,r2
    3360:	dfc00215 	stw	ra,8(sp)
    3364:	80000015 	stw	zero,0(r16)
    3368:	0004a440 	call	4a44 <write>
    336c:	00ffffc4 	movi	r3,-1
    3370:	10c00526 	beq	r2,r3,3388 <_write_r+0x50>
    3374:	dfc00217 	ldw	ra,8(sp)
    3378:	dc400117 	ldw	r17,4(sp)
    337c:	dc000017 	ldw	r16,0(sp)
    3380:	dec00304 	addi	sp,sp,12
    3384:	f800283a 	ret
    3388:	80c00017 	ldw	r3,0(r16)
    338c:	183ff926 	beq	r3,zero,3374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003374>
    3390:	88c00015 	stw	r3,0(r17)
    3394:	003ff706 	br	3374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003374>

00003398 <__swsetup_r>:
    3398:	00800074 	movhi	r2,1
    339c:	defffd04 	addi	sp,sp,-12
    33a0:	108c4404 	addi	r2,r2,12560
    33a4:	dc400115 	stw	r17,4(sp)
    33a8:	2023883a 	mov	r17,r4
    33ac:	11000017 	ldw	r4,0(r2)
    33b0:	dc000015 	stw	r16,0(sp)
    33b4:	dfc00215 	stw	ra,8(sp)
    33b8:	2821883a 	mov	r16,r5
    33bc:	20000226 	beq	r4,zero,33c8 <__swsetup_r+0x30>
    33c0:	20800e17 	ldw	r2,56(r4)
    33c4:	10003126 	beq	r2,zero,348c <__swsetup_r+0xf4>
    33c8:	8080030b 	ldhu	r2,12(r16)
    33cc:	10c0020c 	andi	r3,r2,8
    33d0:	1009883a 	mov	r4,r2
    33d4:	18000f26 	beq	r3,zero,3414 <__swsetup_r+0x7c>
    33d8:	80c00417 	ldw	r3,16(r16)
    33dc:	18001526 	beq	r3,zero,3434 <__swsetup_r+0x9c>
    33e0:	1100004c 	andi	r4,r2,1
    33e4:	20001c1e 	bne	r4,zero,3458 <__swsetup_r+0xc0>
    33e8:	1080008c 	andi	r2,r2,2
    33ec:	1000291e 	bne	r2,zero,3494 <__swsetup_r+0xfc>
    33f0:	80800517 	ldw	r2,20(r16)
    33f4:	80800215 	stw	r2,8(r16)
    33f8:	18001c26 	beq	r3,zero,346c <__swsetup_r+0xd4>
    33fc:	0005883a 	mov	r2,zero
    3400:	dfc00217 	ldw	ra,8(sp)
    3404:	dc400117 	ldw	r17,4(sp)
    3408:	dc000017 	ldw	r16,0(sp)
    340c:	dec00304 	addi	sp,sp,12
    3410:	f800283a 	ret
    3414:	2080040c 	andi	r2,r4,16
    3418:	10002e26 	beq	r2,zero,34d4 <__swsetup_r+0x13c>
    341c:	2080010c 	andi	r2,r4,4
    3420:	10001e1e 	bne	r2,zero,349c <__swsetup_r+0x104>
    3424:	80c00417 	ldw	r3,16(r16)
    3428:	20800214 	ori	r2,r4,8
    342c:	8080030d 	sth	r2,12(r16)
    3430:	183feb1e 	bne	r3,zero,33e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033e0>
    3434:	1100a00c 	andi	r4,r2,640
    3438:	01408004 	movi	r5,512
    343c:	217fe826 	beq	r4,r5,33e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033e0>
    3440:	800b883a 	mov	r5,r16
    3444:	8809883a 	mov	r4,r17
    3448:	0003d800 	call	3d80 <__smakebuf_r>
    344c:	8080030b 	ldhu	r2,12(r16)
    3450:	80c00417 	ldw	r3,16(r16)
    3454:	003fe206 	br	33e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033e0>
    3458:	80800517 	ldw	r2,20(r16)
    345c:	80000215 	stw	zero,8(r16)
    3460:	0085c83a 	sub	r2,zero,r2
    3464:	80800615 	stw	r2,24(r16)
    3468:	183fe41e 	bne	r3,zero,33fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033fc>
    346c:	80c0030b 	ldhu	r3,12(r16)
    3470:	0005883a 	mov	r2,zero
    3474:	1900200c 	andi	r4,r3,128
    3478:	203fe126 	beq	r4,zero,3400 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003400>
    347c:	18c01014 	ori	r3,r3,64
    3480:	80c0030d 	sth	r3,12(r16)
    3484:	00bfffc4 	movi	r2,-1
    3488:	003fdd06 	br	3400 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003400>
    348c:	00018f40 	call	18f4 <__sinit>
    3490:	003fcd06 	br	33c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033c8>
    3494:	0005883a 	mov	r2,zero
    3498:	003fd606 	br	33f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033f4>
    349c:	81400c17 	ldw	r5,48(r16)
    34a0:	28000626 	beq	r5,zero,34bc <__swsetup_r+0x124>
    34a4:	80801004 	addi	r2,r16,64
    34a8:	28800326 	beq	r5,r2,34b8 <__swsetup_r+0x120>
    34ac:	8809883a 	mov	r4,r17
    34b0:	0003a100 	call	3a10 <_free_r>
    34b4:	8100030b 	ldhu	r4,12(r16)
    34b8:	80000c15 	stw	zero,48(r16)
    34bc:	80c00417 	ldw	r3,16(r16)
    34c0:	00bff6c4 	movi	r2,-37
    34c4:	1108703a 	and	r4,r2,r4
    34c8:	80000115 	stw	zero,4(r16)
    34cc:	80c00015 	stw	r3,0(r16)
    34d0:	003fd506 	br	3428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003428>
    34d4:	00800244 	movi	r2,9
    34d8:	88800015 	stw	r2,0(r17)
    34dc:	20801014 	ori	r2,r4,64
    34e0:	8080030d 	sth	r2,12(r16)
    34e4:	00bfffc4 	movi	r2,-1
    34e8:	003fc506 	br	3400 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003400>

000034ec <_close_r>:
    34ec:	defffd04 	addi	sp,sp,-12
    34f0:	dc000015 	stw	r16,0(sp)
    34f4:	04000074 	movhi	r16,1
    34f8:	dc400115 	stw	r17,4(sp)
    34fc:	84140a04 	addi	r16,r16,20520
    3500:	2023883a 	mov	r17,r4
    3504:	2809883a 	mov	r4,r5
    3508:	dfc00215 	stw	ra,8(sp)
    350c:	80000015 	stw	zero,0(r16)
    3510:	000423c0 	call	423c <close>
    3514:	00ffffc4 	movi	r3,-1
    3518:	10c00526 	beq	r2,r3,3530 <_close_r+0x44>
    351c:	dfc00217 	ldw	ra,8(sp)
    3520:	dc400117 	ldw	r17,4(sp)
    3524:	dc000017 	ldw	r16,0(sp)
    3528:	dec00304 	addi	sp,sp,12
    352c:	f800283a 	ret
    3530:	80c00017 	ldw	r3,0(r16)
    3534:	183ff926 	beq	r3,zero,351c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700351c>
    3538:	88c00015 	stw	r3,0(r17)
    353c:	003ff706 	br	351c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700351c>

00003540 <_fclose_r>:
    3540:	28003926 	beq	r5,zero,3628 <_fclose_r+0xe8>
    3544:	defffc04 	addi	sp,sp,-16
    3548:	dc400115 	stw	r17,4(sp)
    354c:	dc000015 	stw	r16,0(sp)
    3550:	dfc00315 	stw	ra,12(sp)
    3554:	dc800215 	stw	r18,8(sp)
    3558:	2023883a 	mov	r17,r4
    355c:	2821883a 	mov	r16,r5
    3560:	20000226 	beq	r4,zero,356c <_fclose_r+0x2c>
    3564:	20800e17 	ldw	r2,56(r4)
    3568:	10002726 	beq	r2,zero,3608 <_fclose_r+0xc8>
    356c:	8080030f 	ldh	r2,12(r16)
    3570:	1000071e 	bne	r2,zero,3590 <_fclose_r+0x50>
    3574:	0005883a 	mov	r2,zero
    3578:	dfc00317 	ldw	ra,12(sp)
    357c:	dc800217 	ldw	r18,8(sp)
    3580:	dc400117 	ldw	r17,4(sp)
    3584:	dc000017 	ldw	r16,0(sp)
    3588:	dec00404 	addi	sp,sp,16
    358c:	f800283a 	ret
    3590:	800b883a 	mov	r5,r16
    3594:	8809883a 	mov	r4,r17
    3598:	00036440 	call	3644 <__sflush_r>
    359c:	1025883a 	mov	r18,r2
    35a0:	80800b17 	ldw	r2,44(r16)
    35a4:	10000426 	beq	r2,zero,35b8 <_fclose_r+0x78>
    35a8:	81400717 	ldw	r5,28(r16)
    35ac:	8809883a 	mov	r4,r17
    35b0:	103ee83a 	callr	r2
    35b4:	10001616 	blt	r2,zero,3610 <_fclose_r+0xd0>
    35b8:	8080030b 	ldhu	r2,12(r16)
    35bc:	1080200c 	andi	r2,r2,128
    35c0:	1000151e 	bne	r2,zero,3618 <_fclose_r+0xd8>
    35c4:	81400c17 	ldw	r5,48(r16)
    35c8:	28000526 	beq	r5,zero,35e0 <_fclose_r+0xa0>
    35cc:	80801004 	addi	r2,r16,64
    35d0:	28800226 	beq	r5,r2,35dc <_fclose_r+0x9c>
    35d4:	8809883a 	mov	r4,r17
    35d8:	0003a100 	call	3a10 <_free_r>
    35dc:	80000c15 	stw	zero,48(r16)
    35e0:	81401117 	ldw	r5,68(r16)
    35e4:	28000326 	beq	r5,zero,35f4 <_fclose_r+0xb4>
    35e8:	8809883a 	mov	r4,r17
    35ec:	0003a100 	call	3a10 <_free_r>
    35f0:	80001115 	stw	zero,68(r16)
    35f4:	00019040 	call	1904 <__sfp_lock_acquire>
    35f8:	8000030d 	sth	zero,12(r16)
    35fc:	00019080 	call	1908 <__sfp_lock_release>
    3600:	9005883a 	mov	r2,r18
    3604:	003fdc06 	br	3578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003578>
    3608:	00018f40 	call	18f4 <__sinit>
    360c:	003fd706 	br	356c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700356c>
    3610:	04bfffc4 	movi	r18,-1
    3614:	003fe806 	br	35b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035b8>
    3618:	81400417 	ldw	r5,16(r16)
    361c:	8809883a 	mov	r4,r17
    3620:	0003a100 	call	3a10 <_free_r>
    3624:	003fe706 	br	35c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035c4>
    3628:	0005883a 	mov	r2,zero
    362c:	f800283a 	ret

00003630 <fclose>:
    3630:	00800074 	movhi	r2,1
    3634:	108c4404 	addi	r2,r2,12560
    3638:	200b883a 	mov	r5,r4
    363c:	11000017 	ldw	r4,0(r2)
    3640:	00035401 	jmpi	3540 <_fclose_r>

00003644 <__sflush_r>:
    3644:	2880030b 	ldhu	r2,12(r5)
    3648:	defffb04 	addi	sp,sp,-20
    364c:	dcc00315 	stw	r19,12(sp)
    3650:	dc400115 	stw	r17,4(sp)
    3654:	dfc00415 	stw	ra,16(sp)
    3658:	dc800215 	stw	r18,8(sp)
    365c:	dc000015 	stw	r16,0(sp)
    3660:	10c0020c 	andi	r3,r2,8
    3664:	2823883a 	mov	r17,r5
    3668:	2027883a 	mov	r19,r4
    366c:	1800311e 	bne	r3,zero,3734 <__sflush_r+0xf0>
    3670:	28c00117 	ldw	r3,4(r5)
    3674:	10820014 	ori	r2,r2,2048
    3678:	2880030d 	sth	r2,12(r5)
    367c:	00c04b0e 	bge	zero,r3,37ac <__sflush_r+0x168>
    3680:	8a000a17 	ldw	r8,40(r17)
    3684:	40002326 	beq	r8,zero,3714 <__sflush_r+0xd0>
    3688:	9c000017 	ldw	r16,0(r19)
    368c:	10c4000c 	andi	r3,r2,4096
    3690:	98000015 	stw	zero,0(r19)
    3694:	18004826 	beq	r3,zero,37b8 <__sflush_r+0x174>
    3698:	89801417 	ldw	r6,80(r17)
    369c:	10c0010c 	andi	r3,r2,4
    36a0:	18000626 	beq	r3,zero,36bc <__sflush_r+0x78>
    36a4:	88c00117 	ldw	r3,4(r17)
    36a8:	88800c17 	ldw	r2,48(r17)
    36ac:	30cdc83a 	sub	r6,r6,r3
    36b0:	10000226 	beq	r2,zero,36bc <__sflush_r+0x78>
    36b4:	88800f17 	ldw	r2,60(r17)
    36b8:	308dc83a 	sub	r6,r6,r2
    36bc:	89400717 	ldw	r5,28(r17)
    36c0:	000f883a 	mov	r7,zero
    36c4:	9809883a 	mov	r4,r19
    36c8:	403ee83a 	callr	r8
    36cc:	00ffffc4 	movi	r3,-1
    36d0:	10c04426 	beq	r2,r3,37e4 <__sflush_r+0x1a0>
    36d4:	88c0030b 	ldhu	r3,12(r17)
    36d8:	89000417 	ldw	r4,16(r17)
    36dc:	88000115 	stw	zero,4(r17)
    36e0:	197dffcc 	andi	r5,r3,63487
    36e4:	8940030d 	sth	r5,12(r17)
    36e8:	89000015 	stw	r4,0(r17)
    36ec:	18c4000c 	andi	r3,r3,4096
    36f0:	18002c1e 	bne	r3,zero,37a4 <__sflush_r+0x160>
    36f4:	89400c17 	ldw	r5,48(r17)
    36f8:	9c000015 	stw	r16,0(r19)
    36fc:	28000526 	beq	r5,zero,3714 <__sflush_r+0xd0>
    3700:	88801004 	addi	r2,r17,64
    3704:	28800226 	beq	r5,r2,3710 <__sflush_r+0xcc>
    3708:	9809883a 	mov	r4,r19
    370c:	0003a100 	call	3a10 <_free_r>
    3710:	88000c15 	stw	zero,48(r17)
    3714:	0005883a 	mov	r2,zero
    3718:	dfc00417 	ldw	ra,16(sp)
    371c:	dcc00317 	ldw	r19,12(sp)
    3720:	dc800217 	ldw	r18,8(sp)
    3724:	dc400117 	ldw	r17,4(sp)
    3728:	dc000017 	ldw	r16,0(sp)
    372c:	dec00504 	addi	sp,sp,20
    3730:	f800283a 	ret
    3734:	2c800417 	ldw	r18,16(r5)
    3738:	903ff626 	beq	r18,zero,3714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003714>
    373c:	2c000017 	ldw	r16,0(r5)
    3740:	108000cc 	andi	r2,r2,3
    3744:	2c800015 	stw	r18,0(r5)
    3748:	84a1c83a 	sub	r16,r16,r18
    374c:	1000131e 	bne	r2,zero,379c <__sflush_r+0x158>
    3750:	28800517 	ldw	r2,20(r5)
    3754:	88800215 	stw	r2,8(r17)
    3758:	04000316 	blt	zero,r16,3768 <__sflush_r+0x124>
    375c:	003fed06 	br	3714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003714>
    3760:	90a5883a 	add	r18,r18,r2
    3764:	043feb0e 	bge	zero,r16,3714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003714>
    3768:	88800917 	ldw	r2,36(r17)
    376c:	89400717 	ldw	r5,28(r17)
    3770:	800f883a 	mov	r7,r16
    3774:	900d883a 	mov	r6,r18
    3778:	9809883a 	mov	r4,r19
    377c:	103ee83a 	callr	r2
    3780:	80a1c83a 	sub	r16,r16,r2
    3784:	00bff616 	blt	zero,r2,3760 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003760>
    3788:	88c0030b 	ldhu	r3,12(r17)
    378c:	00bfffc4 	movi	r2,-1
    3790:	18c01014 	ori	r3,r3,64
    3794:	88c0030d 	sth	r3,12(r17)
    3798:	003fdf06 	br	3718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003718>
    379c:	0005883a 	mov	r2,zero
    37a0:	003fec06 	br	3754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003754>
    37a4:	88801415 	stw	r2,80(r17)
    37a8:	003fd206 	br	36f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036f4>
    37ac:	28c00f17 	ldw	r3,60(r5)
    37b0:	00ffb316 	blt	zero,r3,3680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003680>
    37b4:	003fd706 	br	3714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003714>
    37b8:	89400717 	ldw	r5,28(r17)
    37bc:	000d883a 	mov	r6,zero
    37c0:	01c00044 	movi	r7,1
    37c4:	9809883a 	mov	r4,r19
    37c8:	403ee83a 	callr	r8
    37cc:	100d883a 	mov	r6,r2
    37d0:	00bfffc4 	movi	r2,-1
    37d4:	30801426 	beq	r6,r2,3828 <__sflush_r+0x1e4>
    37d8:	8880030b 	ldhu	r2,12(r17)
    37dc:	8a000a17 	ldw	r8,40(r17)
    37e0:	003fae06 	br	369c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700369c>
    37e4:	98c00017 	ldw	r3,0(r19)
    37e8:	183fba26 	beq	r3,zero,36d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036d4>
    37ec:	01000744 	movi	r4,29
    37f0:	19000626 	beq	r3,r4,380c <__sflush_r+0x1c8>
    37f4:	01000584 	movi	r4,22
    37f8:	19000426 	beq	r3,r4,380c <__sflush_r+0x1c8>
    37fc:	88c0030b 	ldhu	r3,12(r17)
    3800:	18c01014 	ori	r3,r3,64
    3804:	88c0030d 	sth	r3,12(r17)
    3808:	003fc306 	br	3718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003718>
    380c:	8880030b 	ldhu	r2,12(r17)
    3810:	88c00417 	ldw	r3,16(r17)
    3814:	88000115 	stw	zero,4(r17)
    3818:	10bdffcc 	andi	r2,r2,63487
    381c:	8880030d 	sth	r2,12(r17)
    3820:	88c00015 	stw	r3,0(r17)
    3824:	003fb306 	br	36f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036f4>
    3828:	98800017 	ldw	r2,0(r19)
    382c:	103fea26 	beq	r2,zero,37d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037d8>
    3830:	00c00744 	movi	r3,29
    3834:	10c00226 	beq	r2,r3,3840 <__sflush_r+0x1fc>
    3838:	00c00584 	movi	r3,22
    383c:	10c0031e 	bne	r2,r3,384c <__sflush_r+0x208>
    3840:	9c000015 	stw	r16,0(r19)
    3844:	0005883a 	mov	r2,zero
    3848:	003fb306 	br	3718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003718>
    384c:	88c0030b 	ldhu	r3,12(r17)
    3850:	3005883a 	mov	r2,r6
    3854:	18c01014 	ori	r3,r3,64
    3858:	88c0030d 	sth	r3,12(r17)
    385c:	003fae06 	br	3718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003718>

00003860 <_fflush_r>:
    3860:	defffd04 	addi	sp,sp,-12
    3864:	dc000115 	stw	r16,4(sp)
    3868:	dfc00215 	stw	ra,8(sp)
    386c:	2021883a 	mov	r16,r4
    3870:	20000226 	beq	r4,zero,387c <_fflush_r+0x1c>
    3874:	20800e17 	ldw	r2,56(r4)
    3878:	10000c26 	beq	r2,zero,38ac <_fflush_r+0x4c>
    387c:	2880030f 	ldh	r2,12(r5)
    3880:	1000051e 	bne	r2,zero,3898 <_fflush_r+0x38>
    3884:	0005883a 	mov	r2,zero
    3888:	dfc00217 	ldw	ra,8(sp)
    388c:	dc000117 	ldw	r16,4(sp)
    3890:	dec00304 	addi	sp,sp,12
    3894:	f800283a 	ret
    3898:	8009883a 	mov	r4,r16
    389c:	dfc00217 	ldw	ra,8(sp)
    38a0:	dc000117 	ldw	r16,4(sp)
    38a4:	dec00304 	addi	sp,sp,12
    38a8:	00036441 	jmpi	3644 <__sflush_r>
    38ac:	d9400015 	stw	r5,0(sp)
    38b0:	00018f40 	call	18f4 <__sinit>
    38b4:	d9400017 	ldw	r5,0(sp)
    38b8:	003ff006 	br	387c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700387c>

000038bc <fflush>:
    38bc:	20000526 	beq	r4,zero,38d4 <fflush+0x18>
    38c0:	00800074 	movhi	r2,1
    38c4:	108c4404 	addi	r2,r2,12560
    38c8:	200b883a 	mov	r5,r4
    38cc:	11000017 	ldw	r4,0(r2)
    38d0:	00038601 	jmpi	3860 <_fflush_r>
    38d4:	00800074 	movhi	r2,1
    38d8:	108c4304 	addi	r2,r2,12556
    38dc:	11000017 	ldw	r4,0(r2)
    38e0:	01400034 	movhi	r5,0
    38e4:	294e1804 	addi	r5,r5,14432
    38e8:	0001ec41 	jmpi	1ec4 <_fwalk_reent>

000038ec <_malloc_trim_r>:
    38ec:	defffb04 	addi	sp,sp,-20
    38f0:	dcc00315 	stw	r19,12(sp)
    38f4:	04c00074 	movhi	r19,1
    38f8:	dc800215 	stw	r18,8(sp)
    38fc:	dc400115 	stw	r17,4(sp)
    3900:	dc000015 	stw	r16,0(sp)
    3904:	dfc00415 	stw	ra,16(sp)
    3908:	2821883a 	mov	r16,r5
    390c:	9cc5f704 	addi	r19,r19,6108
    3910:	2025883a 	mov	r18,r4
    3914:	0004c600 	call	4c60 <__malloc_lock>
    3918:	98800217 	ldw	r2,8(r19)
    391c:	14400117 	ldw	r17,4(r2)
    3920:	00bfff04 	movi	r2,-4
    3924:	88a2703a 	and	r17,r17,r2
    3928:	8c21c83a 	sub	r16,r17,r16
    392c:	8403fbc4 	addi	r16,r16,4079
    3930:	8020d33a 	srli	r16,r16,12
    3934:	0083ffc4 	movi	r2,4095
    3938:	843fffc4 	addi	r16,r16,-1
    393c:	8020933a 	slli	r16,r16,12
    3940:	1400060e 	bge	r2,r16,395c <_malloc_trim_r+0x70>
    3944:	000b883a 	mov	r5,zero
    3948:	9009883a 	mov	r4,r18
    394c:	00031a80 	call	31a8 <_sbrk_r>
    3950:	98c00217 	ldw	r3,8(r19)
    3954:	1c47883a 	add	r3,r3,r17
    3958:	10c00a26 	beq	r2,r3,3984 <_malloc_trim_r+0x98>
    395c:	9009883a 	mov	r4,r18
    3960:	0004d800 	call	4d80 <__malloc_unlock>
    3964:	0005883a 	mov	r2,zero
    3968:	dfc00417 	ldw	ra,16(sp)
    396c:	dcc00317 	ldw	r19,12(sp)
    3970:	dc800217 	ldw	r18,8(sp)
    3974:	dc400117 	ldw	r17,4(sp)
    3978:	dc000017 	ldw	r16,0(sp)
    397c:	dec00504 	addi	sp,sp,20
    3980:	f800283a 	ret
    3984:	040bc83a 	sub	r5,zero,r16
    3988:	9009883a 	mov	r4,r18
    398c:	00031a80 	call	31a8 <_sbrk_r>
    3990:	00ffffc4 	movi	r3,-1
    3994:	10c00d26 	beq	r2,r3,39cc <_malloc_trim_r+0xe0>
    3998:	00c00074 	movhi	r3,1
    399c:	18d42b04 	addi	r3,r3,20652
    39a0:	18800017 	ldw	r2,0(r3)
    39a4:	99000217 	ldw	r4,8(r19)
    39a8:	8c23c83a 	sub	r17,r17,r16
    39ac:	8c400054 	ori	r17,r17,1
    39b0:	1421c83a 	sub	r16,r2,r16
    39b4:	24400115 	stw	r17,4(r4)
    39b8:	9009883a 	mov	r4,r18
    39bc:	1c000015 	stw	r16,0(r3)
    39c0:	0004d800 	call	4d80 <__malloc_unlock>
    39c4:	00800044 	movi	r2,1
    39c8:	003fe706 	br	3968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003968>
    39cc:	000b883a 	mov	r5,zero
    39d0:	9009883a 	mov	r4,r18
    39d4:	00031a80 	call	31a8 <_sbrk_r>
    39d8:	99000217 	ldw	r4,8(r19)
    39dc:	014003c4 	movi	r5,15
    39e0:	1107c83a 	sub	r3,r2,r4
    39e4:	28ffdd0e 	bge	r5,r3,395c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700395c>
    39e8:	01400074 	movhi	r5,1
    39ec:	294c4504 	addi	r5,r5,12564
    39f0:	29400017 	ldw	r5,0(r5)
    39f4:	18c00054 	ori	r3,r3,1
    39f8:	20c00115 	stw	r3,4(r4)
    39fc:	00c00074 	movhi	r3,1
    3a00:	1145c83a 	sub	r2,r2,r5
    3a04:	18d42b04 	addi	r3,r3,20652
    3a08:	18800015 	stw	r2,0(r3)
    3a0c:	003fd306 	br	395c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700395c>

00003a10 <_free_r>:
    3a10:	28004126 	beq	r5,zero,3b18 <_free_r+0x108>
    3a14:	defffd04 	addi	sp,sp,-12
    3a18:	dc400115 	stw	r17,4(sp)
    3a1c:	dc000015 	stw	r16,0(sp)
    3a20:	2023883a 	mov	r17,r4
    3a24:	2821883a 	mov	r16,r5
    3a28:	dfc00215 	stw	ra,8(sp)
    3a2c:	0004c600 	call	4c60 <__malloc_lock>
    3a30:	81ffff17 	ldw	r7,-4(r16)
    3a34:	00bfff84 	movi	r2,-2
    3a38:	01000074 	movhi	r4,1
    3a3c:	81bffe04 	addi	r6,r16,-8
    3a40:	3884703a 	and	r2,r7,r2
    3a44:	2105f704 	addi	r4,r4,6108
    3a48:	308b883a 	add	r5,r6,r2
    3a4c:	2a400117 	ldw	r9,4(r5)
    3a50:	22000217 	ldw	r8,8(r4)
    3a54:	00ffff04 	movi	r3,-4
    3a58:	48c6703a 	and	r3,r9,r3
    3a5c:	2a005726 	beq	r5,r8,3bbc <_free_r+0x1ac>
    3a60:	28c00115 	stw	r3,4(r5)
    3a64:	39c0004c 	andi	r7,r7,1
    3a68:	3800091e 	bne	r7,zero,3a90 <_free_r+0x80>
    3a6c:	823ffe17 	ldw	r8,-8(r16)
    3a70:	22400204 	addi	r9,r4,8
    3a74:	320dc83a 	sub	r6,r6,r8
    3a78:	31c00217 	ldw	r7,8(r6)
    3a7c:	1205883a 	add	r2,r2,r8
    3a80:	3a406526 	beq	r7,r9,3c18 <_free_r+0x208>
    3a84:	32000317 	ldw	r8,12(r6)
    3a88:	3a000315 	stw	r8,12(r7)
    3a8c:	41c00215 	stw	r7,8(r8)
    3a90:	28cf883a 	add	r7,r5,r3
    3a94:	39c00117 	ldw	r7,4(r7)
    3a98:	39c0004c 	andi	r7,r7,1
    3a9c:	38003a26 	beq	r7,zero,3b88 <_free_r+0x178>
    3aa0:	10c00054 	ori	r3,r2,1
    3aa4:	30c00115 	stw	r3,4(r6)
    3aa8:	3087883a 	add	r3,r6,r2
    3aac:	18800015 	stw	r2,0(r3)
    3ab0:	00c07fc4 	movi	r3,511
    3ab4:	18801936 	bltu	r3,r2,3b1c <_free_r+0x10c>
    3ab8:	1004d0fa 	srli	r2,r2,3
    3abc:	01c00044 	movi	r7,1
    3ac0:	21400117 	ldw	r5,4(r4)
    3ac4:	10c00044 	addi	r3,r2,1
    3ac8:	18c7883a 	add	r3,r3,r3
    3acc:	1005d0ba 	srai	r2,r2,2
    3ad0:	18c7883a 	add	r3,r3,r3
    3ad4:	18c7883a 	add	r3,r3,r3
    3ad8:	1907883a 	add	r3,r3,r4
    3adc:	3884983a 	sll	r2,r7,r2
    3ae0:	19c00017 	ldw	r7,0(r3)
    3ae4:	1a3ffe04 	addi	r8,r3,-8
    3ae8:	1144b03a 	or	r2,r2,r5
    3aec:	32000315 	stw	r8,12(r6)
    3af0:	31c00215 	stw	r7,8(r6)
    3af4:	20800115 	stw	r2,4(r4)
    3af8:	19800015 	stw	r6,0(r3)
    3afc:	39800315 	stw	r6,12(r7)
    3b00:	8809883a 	mov	r4,r17
    3b04:	dfc00217 	ldw	ra,8(sp)
    3b08:	dc400117 	ldw	r17,4(sp)
    3b0c:	dc000017 	ldw	r16,0(sp)
    3b10:	dec00304 	addi	sp,sp,12
    3b14:	0004d801 	jmpi	4d80 <__malloc_unlock>
    3b18:	f800283a 	ret
    3b1c:	100ad27a 	srli	r5,r2,9
    3b20:	00c00104 	movi	r3,4
    3b24:	19404a36 	bltu	r3,r5,3c50 <_free_r+0x240>
    3b28:	100ad1ba 	srli	r5,r2,6
    3b2c:	28c00e44 	addi	r3,r5,57
    3b30:	18c7883a 	add	r3,r3,r3
    3b34:	29400e04 	addi	r5,r5,56
    3b38:	18c7883a 	add	r3,r3,r3
    3b3c:	18c7883a 	add	r3,r3,r3
    3b40:	1909883a 	add	r4,r3,r4
    3b44:	20c00017 	ldw	r3,0(r4)
    3b48:	01c00074 	movhi	r7,1
    3b4c:	213ffe04 	addi	r4,r4,-8
    3b50:	39c5f704 	addi	r7,r7,6108
    3b54:	20c04426 	beq	r4,r3,3c68 <_free_r+0x258>
    3b58:	01ffff04 	movi	r7,-4
    3b5c:	19400117 	ldw	r5,4(r3)
    3b60:	29ca703a 	and	r5,r5,r7
    3b64:	1140022e 	bgeu	r2,r5,3b70 <_free_r+0x160>
    3b68:	18c00217 	ldw	r3,8(r3)
    3b6c:	20fffb1e 	bne	r4,r3,3b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b5c>
    3b70:	19000317 	ldw	r4,12(r3)
    3b74:	31000315 	stw	r4,12(r6)
    3b78:	30c00215 	stw	r3,8(r6)
    3b7c:	21800215 	stw	r6,8(r4)
    3b80:	19800315 	stw	r6,12(r3)
    3b84:	003fde06 	br	3b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b00>
    3b88:	29c00217 	ldw	r7,8(r5)
    3b8c:	10c5883a 	add	r2,r2,r3
    3b90:	00c00074 	movhi	r3,1
    3b94:	18c5f904 	addi	r3,r3,6116
    3b98:	38c03b26 	beq	r7,r3,3c88 <_free_r+0x278>
    3b9c:	2a000317 	ldw	r8,12(r5)
    3ba0:	11400054 	ori	r5,r2,1
    3ba4:	3087883a 	add	r3,r6,r2
    3ba8:	3a000315 	stw	r8,12(r7)
    3bac:	41c00215 	stw	r7,8(r8)
    3bb0:	31400115 	stw	r5,4(r6)
    3bb4:	18800015 	stw	r2,0(r3)
    3bb8:	003fbd06 	br	3ab0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ab0>
    3bbc:	39c0004c 	andi	r7,r7,1
    3bc0:	10c5883a 	add	r2,r2,r3
    3bc4:	3800071e 	bne	r7,zero,3be4 <_free_r+0x1d4>
    3bc8:	81fffe17 	ldw	r7,-8(r16)
    3bcc:	31cdc83a 	sub	r6,r6,r7
    3bd0:	30c00317 	ldw	r3,12(r6)
    3bd4:	31400217 	ldw	r5,8(r6)
    3bd8:	11c5883a 	add	r2,r2,r7
    3bdc:	28c00315 	stw	r3,12(r5)
    3be0:	19400215 	stw	r5,8(r3)
    3be4:	10c00054 	ori	r3,r2,1
    3be8:	30c00115 	stw	r3,4(r6)
    3bec:	00c00074 	movhi	r3,1
    3bf0:	18cc4604 	addi	r3,r3,12568
    3bf4:	18c00017 	ldw	r3,0(r3)
    3bf8:	21800215 	stw	r6,8(r4)
    3bfc:	10ffc036 	bltu	r2,r3,3b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b00>
    3c00:	00800074 	movhi	r2,1
    3c04:	10940904 	addi	r2,r2,20516
    3c08:	11400017 	ldw	r5,0(r2)
    3c0c:	8809883a 	mov	r4,r17
    3c10:	00038ec0 	call	38ec <_malloc_trim_r>
    3c14:	003fba06 	br	3b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b00>
    3c18:	28c9883a 	add	r4,r5,r3
    3c1c:	21000117 	ldw	r4,4(r4)
    3c20:	2100004c 	andi	r4,r4,1
    3c24:	2000391e 	bne	r4,zero,3d0c <_free_r+0x2fc>
    3c28:	29c00217 	ldw	r7,8(r5)
    3c2c:	29000317 	ldw	r4,12(r5)
    3c30:	1885883a 	add	r2,r3,r2
    3c34:	10c00054 	ori	r3,r2,1
    3c38:	39000315 	stw	r4,12(r7)
    3c3c:	21c00215 	stw	r7,8(r4)
    3c40:	30c00115 	stw	r3,4(r6)
    3c44:	308d883a 	add	r6,r6,r2
    3c48:	30800015 	stw	r2,0(r6)
    3c4c:	003fac06 	br	3b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b00>
    3c50:	00c00504 	movi	r3,20
    3c54:	19401536 	bltu	r3,r5,3cac <_free_r+0x29c>
    3c58:	28c01704 	addi	r3,r5,92
    3c5c:	18c7883a 	add	r3,r3,r3
    3c60:	294016c4 	addi	r5,r5,91
    3c64:	003fb406 	br	3b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b38>
    3c68:	280bd0ba 	srai	r5,r5,2
    3c6c:	00c00044 	movi	r3,1
    3c70:	38800117 	ldw	r2,4(r7)
    3c74:	194a983a 	sll	r5,r3,r5
    3c78:	2007883a 	mov	r3,r4
    3c7c:	2884b03a 	or	r2,r5,r2
    3c80:	38800115 	stw	r2,4(r7)
    3c84:	003fbb06 	br	3b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b74>
    3c88:	21800515 	stw	r6,20(r4)
    3c8c:	21800415 	stw	r6,16(r4)
    3c90:	10c00054 	ori	r3,r2,1
    3c94:	31c00315 	stw	r7,12(r6)
    3c98:	31c00215 	stw	r7,8(r6)
    3c9c:	30c00115 	stw	r3,4(r6)
    3ca0:	308d883a 	add	r6,r6,r2
    3ca4:	30800015 	stw	r2,0(r6)
    3ca8:	003f9506 	br	3b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b00>
    3cac:	00c01504 	movi	r3,84
    3cb0:	19400536 	bltu	r3,r5,3cc8 <_free_r+0x2b8>
    3cb4:	100ad33a 	srli	r5,r2,12
    3cb8:	28c01bc4 	addi	r3,r5,111
    3cbc:	18c7883a 	add	r3,r3,r3
    3cc0:	29401b84 	addi	r5,r5,110
    3cc4:	003f9c06 	br	3b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b38>
    3cc8:	00c05504 	movi	r3,340
    3ccc:	19400536 	bltu	r3,r5,3ce4 <_free_r+0x2d4>
    3cd0:	100ad3fa 	srli	r5,r2,15
    3cd4:	28c01e04 	addi	r3,r5,120
    3cd8:	18c7883a 	add	r3,r3,r3
    3cdc:	29401dc4 	addi	r5,r5,119
    3ce0:	003f9506 	br	3b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b38>
    3ce4:	00c15504 	movi	r3,1364
    3ce8:	19400536 	bltu	r3,r5,3d00 <_free_r+0x2f0>
    3cec:	100ad4ba 	srli	r5,r2,18
    3cf0:	28c01f44 	addi	r3,r5,125
    3cf4:	18c7883a 	add	r3,r3,r3
    3cf8:	29401f04 	addi	r5,r5,124
    3cfc:	003f8e06 	br	3b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b38>
    3d00:	00c03f84 	movi	r3,254
    3d04:	01401f84 	movi	r5,126
    3d08:	003f8b06 	br	3b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b38>
    3d0c:	10c00054 	ori	r3,r2,1
    3d10:	30c00115 	stw	r3,4(r6)
    3d14:	308d883a 	add	r6,r6,r2
    3d18:	30800015 	stw	r2,0(r6)
    3d1c:	003f7806 	br	3b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b00>

00003d20 <_lseek_r>:
    3d20:	defffd04 	addi	sp,sp,-12
    3d24:	2805883a 	mov	r2,r5
    3d28:	dc000015 	stw	r16,0(sp)
    3d2c:	04000074 	movhi	r16,1
    3d30:	dc400115 	stw	r17,4(sp)
    3d34:	300b883a 	mov	r5,r6
    3d38:	84140a04 	addi	r16,r16,20520
    3d3c:	2023883a 	mov	r17,r4
    3d40:	380d883a 	mov	r6,r7
    3d44:	1009883a 	mov	r4,r2
    3d48:	dfc00215 	stw	ra,8(sp)
    3d4c:	80000015 	stw	zero,0(r16)
    3d50:	000462c0 	call	462c <lseek>
    3d54:	00ffffc4 	movi	r3,-1
    3d58:	10c00526 	beq	r2,r3,3d70 <_lseek_r+0x50>
    3d5c:	dfc00217 	ldw	ra,8(sp)
    3d60:	dc400117 	ldw	r17,4(sp)
    3d64:	dc000017 	ldw	r16,0(sp)
    3d68:	dec00304 	addi	sp,sp,12
    3d6c:	f800283a 	ret
    3d70:	80c00017 	ldw	r3,0(r16)
    3d74:	183ff926 	beq	r3,zero,3d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d5c>
    3d78:	88c00015 	stw	r3,0(r17)
    3d7c:	003ff706 	br	3d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d5c>

00003d80 <__smakebuf_r>:
    3d80:	2880030b 	ldhu	r2,12(r5)
    3d84:	10c0008c 	andi	r3,r2,2
    3d88:	1800411e 	bne	r3,zero,3e90 <__smakebuf_r+0x110>
    3d8c:	deffec04 	addi	sp,sp,-80
    3d90:	dc000f15 	stw	r16,60(sp)
    3d94:	2821883a 	mov	r16,r5
    3d98:	2940038f 	ldh	r5,14(r5)
    3d9c:	dc401015 	stw	r17,64(sp)
    3da0:	dfc01315 	stw	ra,76(sp)
    3da4:	dcc01215 	stw	r19,72(sp)
    3da8:	dc801115 	stw	r18,68(sp)
    3dac:	2023883a 	mov	r17,r4
    3db0:	28001c16 	blt	r5,zero,3e24 <__smakebuf_r+0xa4>
    3db4:	d80d883a 	mov	r6,sp
    3db8:	0003f9c0 	call	3f9c <_fstat_r>
    3dbc:	10001816 	blt	r2,zero,3e20 <__smakebuf_r+0xa0>
    3dc0:	d8800117 	ldw	r2,4(sp)
    3dc4:	00e00014 	movui	r3,32768
    3dc8:	10bc000c 	andi	r2,r2,61440
    3dcc:	14c80020 	cmpeqi	r19,r2,8192
    3dd0:	10c03726 	beq	r2,r3,3eb0 <__smakebuf_r+0x130>
    3dd4:	80c0030b 	ldhu	r3,12(r16)
    3dd8:	18c20014 	ori	r3,r3,2048
    3ddc:	80c0030d 	sth	r3,12(r16)
    3de0:	00c80004 	movi	r3,8192
    3de4:	10c0521e 	bne	r2,r3,3f30 <__smakebuf_r+0x1b0>
    3de8:	8140038f 	ldh	r5,14(r16)
    3dec:	8809883a 	mov	r4,r17
    3df0:	0003ff80 	call	3ff8 <_isatty_r>
    3df4:	10004c26 	beq	r2,zero,3f28 <__smakebuf_r+0x1a8>
    3df8:	8080030b 	ldhu	r2,12(r16)
    3dfc:	80c010c4 	addi	r3,r16,67
    3e00:	80c00015 	stw	r3,0(r16)
    3e04:	10800054 	ori	r2,r2,1
    3e08:	8080030d 	sth	r2,12(r16)
    3e0c:	00800044 	movi	r2,1
    3e10:	80c00415 	stw	r3,16(r16)
    3e14:	80800515 	stw	r2,20(r16)
    3e18:	04810004 	movi	r18,1024
    3e1c:	00000706 	br	3e3c <__smakebuf_r+0xbc>
    3e20:	8080030b 	ldhu	r2,12(r16)
    3e24:	10c0200c 	andi	r3,r2,128
    3e28:	18001f1e 	bne	r3,zero,3ea8 <__smakebuf_r+0x128>
    3e2c:	04810004 	movi	r18,1024
    3e30:	10820014 	ori	r2,r2,2048
    3e34:	8080030d 	sth	r2,12(r16)
    3e38:	0027883a 	mov	r19,zero
    3e3c:	900b883a 	mov	r5,r18
    3e40:	8809883a 	mov	r4,r17
    3e44:	0001f880 	call	1f88 <_malloc_r>
    3e48:	10002c26 	beq	r2,zero,3efc <__smakebuf_r+0x17c>
    3e4c:	80c0030b 	ldhu	r3,12(r16)
    3e50:	01000034 	movhi	r4,0
    3e54:	21056b04 	addi	r4,r4,5548
    3e58:	89000f15 	stw	r4,60(r17)
    3e5c:	18c02014 	ori	r3,r3,128
    3e60:	80c0030d 	sth	r3,12(r16)
    3e64:	80800015 	stw	r2,0(r16)
    3e68:	80800415 	stw	r2,16(r16)
    3e6c:	84800515 	stw	r18,20(r16)
    3e70:	98001a1e 	bne	r19,zero,3edc <__smakebuf_r+0x15c>
    3e74:	dfc01317 	ldw	ra,76(sp)
    3e78:	dcc01217 	ldw	r19,72(sp)
    3e7c:	dc801117 	ldw	r18,68(sp)
    3e80:	dc401017 	ldw	r17,64(sp)
    3e84:	dc000f17 	ldw	r16,60(sp)
    3e88:	dec01404 	addi	sp,sp,80
    3e8c:	f800283a 	ret
    3e90:	288010c4 	addi	r2,r5,67
    3e94:	28800015 	stw	r2,0(r5)
    3e98:	28800415 	stw	r2,16(r5)
    3e9c:	00800044 	movi	r2,1
    3ea0:	28800515 	stw	r2,20(r5)
    3ea4:	f800283a 	ret
    3ea8:	04801004 	movi	r18,64
    3eac:	003fe006 	br	3e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e30>
    3eb0:	81000a17 	ldw	r4,40(r16)
    3eb4:	00c00034 	movhi	r3,0
    3eb8:	18ccb504 	addi	r3,r3,13012
    3ebc:	20ffc51e 	bne	r4,r3,3dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003dd4>
    3ec0:	8080030b 	ldhu	r2,12(r16)
    3ec4:	04810004 	movi	r18,1024
    3ec8:	84801315 	stw	r18,76(r16)
    3ecc:	1484b03a 	or	r2,r2,r18
    3ed0:	8080030d 	sth	r2,12(r16)
    3ed4:	0027883a 	mov	r19,zero
    3ed8:	003fd806 	br	3e3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e3c>
    3edc:	8140038f 	ldh	r5,14(r16)
    3ee0:	8809883a 	mov	r4,r17
    3ee4:	0003ff80 	call	3ff8 <_isatty_r>
    3ee8:	103fe226 	beq	r2,zero,3e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e74>
    3eec:	8080030b 	ldhu	r2,12(r16)
    3ef0:	10800054 	ori	r2,r2,1
    3ef4:	8080030d 	sth	r2,12(r16)
    3ef8:	003fde06 	br	3e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e74>
    3efc:	8080030b 	ldhu	r2,12(r16)
    3f00:	10c0800c 	andi	r3,r2,512
    3f04:	183fdb1e 	bne	r3,zero,3e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e74>
    3f08:	10800094 	ori	r2,r2,2
    3f0c:	80c010c4 	addi	r3,r16,67
    3f10:	8080030d 	sth	r2,12(r16)
    3f14:	00800044 	movi	r2,1
    3f18:	80c00015 	stw	r3,0(r16)
    3f1c:	80c00415 	stw	r3,16(r16)
    3f20:	80800515 	stw	r2,20(r16)
    3f24:	003fd306 	br	3e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e74>
    3f28:	04810004 	movi	r18,1024
    3f2c:	003fc306 	br	3e3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e3c>
    3f30:	0027883a 	mov	r19,zero
    3f34:	04810004 	movi	r18,1024
    3f38:	003fc006 	br	3e3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e3c>

00003f3c <_read_r>:
    3f3c:	defffd04 	addi	sp,sp,-12
    3f40:	2805883a 	mov	r2,r5
    3f44:	dc000015 	stw	r16,0(sp)
    3f48:	04000074 	movhi	r16,1
    3f4c:	dc400115 	stw	r17,4(sp)
    3f50:	300b883a 	mov	r5,r6
    3f54:	84140a04 	addi	r16,r16,20520
    3f58:	2023883a 	mov	r17,r4
    3f5c:	380d883a 	mov	r6,r7
    3f60:	1009883a 	mov	r4,r2
    3f64:	dfc00215 	stw	ra,8(sp)
    3f68:	80000015 	stw	zero,0(r16)
    3f6c:	00047f80 	call	47f8 <read>
    3f70:	00ffffc4 	movi	r3,-1
    3f74:	10c00526 	beq	r2,r3,3f8c <_read_r+0x50>
    3f78:	dfc00217 	ldw	ra,8(sp)
    3f7c:	dc400117 	ldw	r17,4(sp)
    3f80:	dc000017 	ldw	r16,0(sp)
    3f84:	dec00304 	addi	sp,sp,12
    3f88:	f800283a 	ret
    3f8c:	80c00017 	ldw	r3,0(r16)
    3f90:	183ff926 	beq	r3,zero,3f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f78>
    3f94:	88c00015 	stw	r3,0(r17)
    3f98:	003ff706 	br	3f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f78>

00003f9c <_fstat_r>:
    3f9c:	defffd04 	addi	sp,sp,-12
    3fa0:	2805883a 	mov	r2,r5
    3fa4:	dc000015 	stw	r16,0(sp)
    3fa8:	04000074 	movhi	r16,1
    3fac:	dc400115 	stw	r17,4(sp)
    3fb0:	84140a04 	addi	r16,r16,20520
    3fb4:	2023883a 	mov	r17,r4
    3fb8:	300b883a 	mov	r5,r6
    3fbc:	1009883a 	mov	r4,r2
    3fc0:	dfc00215 	stw	ra,8(sp)
    3fc4:	80000015 	stw	zero,0(r16)
    3fc8:	00043740 	call	4374 <fstat>
    3fcc:	00ffffc4 	movi	r3,-1
    3fd0:	10c00526 	beq	r2,r3,3fe8 <_fstat_r+0x4c>
    3fd4:	dfc00217 	ldw	ra,8(sp)
    3fd8:	dc400117 	ldw	r17,4(sp)
    3fdc:	dc000017 	ldw	r16,0(sp)
    3fe0:	dec00304 	addi	sp,sp,12
    3fe4:	f800283a 	ret
    3fe8:	80c00017 	ldw	r3,0(r16)
    3fec:	183ff926 	beq	r3,zero,3fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fd4>
    3ff0:	88c00015 	stw	r3,0(r17)
    3ff4:	003ff706 	br	3fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fd4>

00003ff8 <_isatty_r>:
    3ff8:	defffd04 	addi	sp,sp,-12
    3ffc:	dc000015 	stw	r16,0(sp)
    4000:	04000074 	movhi	r16,1
    4004:	dc400115 	stw	r17,4(sp)
    4008:	84140a04 	addi	r16,r16,20520
    400c:	2023883a 	mov	r17,r4
    4010:	2809883a 	mov	r4,r5
    4014:	dfc00215 	stw	ra,8(sp)
    4018:	80000015 	stw	zero,0(r16)
    401c:	00044600 	call	4460 <isatty>
    4020:	00ffffc4 	movi	r3,-1
    4024:	10c00526 	beq	r2,r3,403c <_isatty_r+0x44>
    4028:	dfc00217 	ldw	ra,8(sp)
    402c:	dc400117 	ldw	r17,4(sp)
    4030:	dc000017 	ldw	r16,0(sp)
    4034:	dec00304 	addi	sp,sp,12
    4038:	f800283a 	ret
    403c:	80c00017 	ldw	r3,0(r16)
    4040:	183ff926 	beq	r3,zero,4028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004028>
    4044:	88c00015 	stw	r3,0(r17)
    4048:	003ff706 	br	4028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004028>

0000404c <__divsi3>:
    404c:	20001b16 	blt	r4,zero,40bc <__divsi3+0x70>
    4050:	000f883a 	mov	r7,zero
    4054:	28001616 	blt	r5,zero,40b0 <__divsi3+0x64>
    4058:	200d883a 	mov	r6,r4
    405c:	29001a2e 	bgeu	r5,r4,40c8 <__divsi3+0x7c>
    4060:	00800804 	movi	r2,32
    4064:	00c00044 	movi	r3,1
    4068:	00000106 	br	4070 <__divsi3+0x24>
    406c:	10000d26 	beq	r2,zero,40a4 <__divsi3+0x58>
    4070:	294b883a 	add	r5,r5,r5
    4074:	10bfffc4 	addi	r2,r2,-1
    4078:	18c7883a 	add	r3,r3,r3
    407c:	293ffb36 	bltu	r5,r4,406c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700406c>
    4080:	0005883a 	mov	r2,zero
    4084:	18000726 	beq	r3,zero,40a4 <__divsi3+0x58>
    4088:	0005883a 	mov	r2,zero
    408c:	31400236 	bltu	r6,r5,4098 <__divsi3+0x4c>
    4090:	314dc83a 	sub	r6,r6,r5
    4094:	10c4b03a 	or	r2,r2,r3
    4098:	1806d07a 	srli	r3,r3,1
    409c:	280ad07a 	srli	r5,r5,1
    40a0:	183ffa1e 	bne	r3,zero,408c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700408c>
    40a4:	38000126 	beq	r7,zero,40ac <__divsi3+0x60>
    40a8:	0085c83a 	sub	r2,zero,r2
    40ac:	f800283a 	ret
    40b0:	014bc83a 	sub	r5,zero,r5
    40b4:	39c0005c 	xori	r7,r7,1
    40b8:	003fe706 	br	4058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004058>
    40bc:	0109c83a 	sub	r4,zero,r4
    40c0:	01c00044 	movi	r7,1
    40c4:	003fe306 	br	4054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004054>
    40c8:	00c00044 	movi	r3,1
    40cc:	003fee06 	br	4088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004088>

000040d0 <__modsi3>:
    40d0:	20001716 	blt	r4,zero,4130 <__modsi3+0x60>
    40d4:	000f883a 	mov	r7,zero
    40d8:	2005883a 	mov	r2,r4
    40dc:	28001216 	blt	r5,zero,4128 <__modsi3+0x58>
    40e0:	2900162e 	bgeu	r5,r4,413c <__modsi3+0x6c>
    40e4:	01800804 	movi	r6,32
    40e8:	00c00044 	movi	r3,1
    40ec:	00000106 	br	40f4 <__modsi3+0x24>
    40f0:	30000a26 	beq	r6,zero,411c <__modsi3+0x4c>
    40f4:	294b883a 	add	r5,r5,r5
    40f8:	31bfffc4 	addi	r6,r6,-1
    40fc:	18c7883a 	add	r3,r3,r3
    4100:	293ffb36 	bltu	r5,r4,40f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040f0>
    4104:	18000526 	beq	r3,zero,411c <__modsi3+0x4c>
    4108:	1806d07a 	srli	r3,r3,1
    410c:	11400136 	bltu	r2,r5,4114 <__modsi3+0x44>
    4110:	1145c83a 	sub	r2,r2,r5
    4114:	280ad07a 	srli	r5,r5,1
    4118:	183ffb1e 	bne	r3,zero,4108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004108>
    411c:	38000126 	beq	r7,zero,4124 <__modsi3+0x54>
    4120:	0085c83a 	sub	r2,zero,r2
    4124:	f800283a 	ret
    4128:	014bc83a 	sub	r5,zero,r5
    412c:	003fec06 	br	40e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040e0>
    4130:	0109c83a 	sub	r4,zero,r4
    4134:	01c00044 	movi	r7,1
    4138:	003fe706 	br	40d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040d8>
    413c:	00c00044 	movi	r3,1
    4140:	003ff106 	br	4108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004108>

00004144 <__udivsi3>:
    4144:	200d883a 	mov	r6,r4
    4148:	2900152e 	bgeu	r5,r4,41a0 <__udivsi3+0x5c>
    414c:	28001416 	blt	r5,zero,41a0 <__udivsi3+0x5c>
    4150:	00800804 	movi	r2,32
    4154:	00c00044 	movi	r3,1
    4158:	00000206 	br	4164 <__udivsi3+0x20>
    415c:	10000e26 	beq	r2,zero,4198 <__udivsi3+0x54>
    4160:	28000516 	blt	r5,zero,4178 <__udivsi3+0x34>
    4164:	294b883a 	add	r5,r5,r5
    4168:	10bfffc4 	addi	r2,r2,-1
    416c:	18c7883a 	add	r3,r3,r3
    4170:	293ffa36 	bltu	r5,r4,415c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700415c>
    4174:	18000826 	beq	r3,zero,4198 <__udivsi3+0x54>
    4178:	0005883a 	mov	r2,zero
    417c:	31400236 	bltu	r6,r5,4188 <__udivsi3+0x44>
    4180:	314dc83a 	sub	r6,r6,r5
    4184:	10c4b03a 	or	r2,r2,r3
    4188:	1806d07a 	srli	r3,r3,1
    418c:	280ad07a 	srli	r5,r5,1
    4190:	183ffa1e 	bne	r3,zero,417c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700417c>
    4194:	f800283a 	ret
    4198:	0005883a 	mov	r2,zero
    419c:	f800283a 	ret
    41a0:	00c00044 	movi	r3,1
    41a4:	003ff406 	br	4178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004178>

000041a8 <__umodsi3>:
    41a8:	2005883a 	mov	r2,r4
    41ac:	2900122e 	bgeu	r5,r4,41f8 <__umodsi3+0x50>
    41b0:	28001116 	blt	r5,zero,41f8 <__umodsi3+0x50>
    41b4:	01800804 	movi	r6,32
    41b8:	00c00044 	movi	r3,1
    41bc:	00000206 	br	41c8 <__umodsi3+0x20>
    41c0:	30000c26 	beq	r6,zero,41f4 <__umodsi3+0x4c>
    41c4:	28000516 	blt	r5,zero,41dc <__umodsi3+0x34>
    41c8:	294b883a 	add	r5,r5,r5
    41cc:	31bfffc4 	addi	r6,r6,-1
    41d0:	18c7883a 	add	r3,r3,r3
    41d4:	293ffa36 	bltu	r5,r4,41c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041c0>
    41d8:	18000626 	beq	r3,zero,41f4 <__umodsi3+0x4c>
    41dc:	1806d07a 	srli	r3,r3,1
    41e0:	11400136 	bltu	r2,r5,41e8 <__umodsi3+0x40>
    41e4:	1145c83a 	sub	r2,r2,r5
    41e8:	280ad07a 	srli	r5,r5,1
    41ec:	183ffb1e 	bne	r3,zero,41dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041dc>
    41f0:	f800283a 	ret
    41f4:	f800283a 	ret
    41f8:	00c00044 	movi	r3,1
    41fc:	003ff706 	br	41dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041dc>

00004200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4200:	defffe04 	addi	sp,sp,-8
    4204:	dfc00115 	stw	ra,4(sp)
    4208:	df000015 	stw	fp,0(sp)
    420c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4210:	d0a00b17 	ldw	r2,-32724(gp)
    4214:	10000326 	beq	r2,zero,4224 <alt_get_errno+0x24>
    4218:	d0a00b17 	ldw	r2,-32724(gp)
    421c:	103ee83a 	callr	r2
    4220:	00000106 	br	4228 <alt_get_errno+0x28>
    4224:	d0a7c904 	addi	r2,gp,-24796
}
    4228:	e037883a 	mov	sp,fp
    422c:	dfc00117 	ldw	ra,4(sp)
    4230:	df000017 	ldw	fp,0(sp)
    4234:	dec00204 	addi	sp,sp,8
    4238:	f800283a 	ret

0000423c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    423c:	defffb04 	addi	sp,sp,-20
    4240:	dfc00415 	stw	ra,16(sp)
    4244:	df000315 	stw	fp,12(sp)
    4248:	df000304 	addi	fp,sp,12
    424c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	10000616 	blt	r2,zero,4270 <close+0x34>
    4258:	e0bfff17 	ldw	r2,-4(fp)
    425c:	10c00324 	muli	r3,r2,12
    4260:	00800074 	movhi	r2,1
    4264:	10870304 	addi	r2,r2,7180
    4268:	1885883a 	add	r2,r3,r2
    426c:	00000106 	br	4274 <close+0x38>
    4270:	0005883a 	mov	r2,zero
    4274:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    4278:	e0bffd17 	ldw	r2,-12(fp)
    427c:	10001926 	beq	r2,zero,42e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4280:	e0bffd17 	ldw	r2,-12(fp)
    4284:	10800017 	ldw	r2,0(r2)
    4288:	10800417 	ldw	r2,16(r2)
    428c:	10000626 	beq	r2,zero,42a8 <close+0x6c>
    4290:	e0bffd17 	ldw	r2,-12(fp)
    4294:	10800017 	ldw	r2,0(r2)
    4298:	10800417 	ldw	r2,16(r2)
    429c:	e13ffd17 	ldw	r4,-12(fp)
    42a0:	103ee83a 	callr	r2
    42a4:	00000106 	br	42ac <close+0x70>
    42a8:	0005883a 	mov	r2,zero
    42ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    42b0:	e13fff17 	ldw	r4,-4(fp)
    42b4:	00048f40 	call	48f4 <alt_release_fd>
    if (rval < 0)
    42b8:	e0bffe17 	ldw	r2,-8(fp)
    42bc:	1000070e 	bge	r2,zero,42dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    42c0:	00042000 	call	4200 <alt_get_errno>
    42c4:	1007883a 	mov	r3,r2
    42c8:	e0bffe17 	ldw	r2,-8(fp)
    42cc:	0085c83a 	sub	r2,zero,r2
    42d0:	18800015 	stw	r2,0(r3)
      return -1;
    42d4:	00bfffc4 	movi	r2,-1
    42d8:	00000706 	br	42f8 <close+0xbc>
    }
    return 0;
    42dc:	0005883a 	mov	r2,zero
    42e0:	00000506 	br	42f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    42e4:	00042000 	call	4200 <alt_get_errno>
    42e8:	1007883a 	mov	r3,r2
    42ec:	00801444 	movi	r2,81
    42f0:	18800015 	stw	r2,0(r3)
    return -1;
    42f4:	00bfffc4 	movi	r2,-1
  }
}
    42f8:	e037883a 	mov	sp,fp
    42fc:	dfc00117 	ldw	ra,4(sp)
    4300:	df000017 	ldw	fp,0(sp)
    4304:	dec00204 	addi	sp,sp,8
    4308:	f800283a 	ret

0000430c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    430c:	defffc04 	addi	sp,sp,-16
    4310:	df000315 	stw	fp,12(sp)
    4314:	df000304 	addi	fp,sp,12
    4318:	e13ffd15 	stw	r4,-12(fp)
    431c:	e17ffe15 	stw	r5,-8(fp)
    4320:	e1bfff15 	stw	r6,-4(fp)
  return len;
    4324:	e0bfff17 	ldw	r2,-4(fp)
}
    4328:	e037883a 	mov	sp,fp
    432c:	df000017 	ldw	fp,0(sp)
    4330:	dec00104 	addi	sp,sp,4
    4334:	f800283a 	ret

00004338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4338:	defffe04 	addi	sp,sp,-8
    433c:	dfc00115 	stw	ra,4(sp)
    4340:	df000015 	stw	fp,0(sp)
    4344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4348:	d0a00b17 	ldw	r2,-32724(gp)
    434c:	10000326 	beq	r2,zero,435c <alt_get_errno+0x24>
    4350:	d0a00b17 	ldw	r2,-32724(gp)
    4354:	103ee83a 	callr	r2
    4358:	00000106 	br	4360 <alt_get_errno+0x28>
    435c:	d0a7c904 	addi	r2,gp,-24796
}
    4360:	e037883a 	mov	sp,fp
    4364:	dfc00117 	ldw	ra,4(sp)
    4368:	df000017 	ldw	fp,0(sp)
    436c:	dec00204 	addi	sp,sp,8
    4370:	f800283a 	ret

00004374 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4374:	defffb04 	addi	sp,sp,-20
    4378:	dfc00415 	stw	ra,16(sp)
    437c:	df000315 	stw	fp,12(sp)
    4380:	df000304 	addi	fp,sp,12
    4384:	e13ffe15 	stw	r4,-8(fp)
    4388:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    438c:	e0bffe17 	ldw	r2,-8(fp)
    4390:	10000616 	blt	r2,zero,43ac <fstat+0x38>
    4394:	e0bffe17 	ldw	r2,-8(fp)
    4398:	10c00324 	muli	r3,r2,12
    439c:	00800074 	movhi	r2,1
    43a0:	10870304 	addi	r2,r2,7180
    43a4:	1885883a 	add	r2,r3,r2
    43a8:	00000106 	br	43b0 <fstat+0x3c>
    43ac:	0005883a 	mov	r2,zero
    43b0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    43b4:	e0bffd17 	ldw	r2,-12(fp)
    43b8:	10001026 	beq	r2,zero,43fc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    43bc:	e0bffd17 	ldw	r2,-12(fp)
    43c0:	10800017 	ldw	r2,0(r2)
    43c4:	10800817 	ldw	r2,32(r2)
    43c8:	10000726 	beq	r2,zero,43e8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    43cc:	e0bffd17 	ldw	r2,-12(fp)
    43d0:	10800017 	ldw	r2,0(r2)
    43d4:	10800817 	ldw	r2,32(r2)
    43d8:	e17fff17 	ldw	r5,-4(fp)
    43dc:	e13ffd17 	ldw	r4,-12(fp)
    43e0:	103ee83a 	callr	r2
    43e4:	00000a06 	br	4410 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    43e8:	e0bfff17 	ldw	r2,-4(fp)
    43ec:	00c80004 	movi	r3,8192
    43f0:	10c00115 	stw	r3,4(r2)
      return 0;
    43f4:	0005883a 	mov	r2,zero
    43f8:	00000506 	br	4410 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    43fc:	00043380 	call	4338 <alt_get_errno>
    4400:	1007883a 	mov	r3,r2
    4404:	00801444 	movi	r2,81
    4408:	18800015 	stw	r2,0(r3)
    return -1;
    440c:	00bfffc4 	movi	r2,-1
  }
}
    4410:	e037883a 	mov	sp,fp
    4414:	dfc00117 	ldw	ra,4(sp)
    4418:	df000017 	ldw	fp,0(sp)
    441c:	dec00204 	addi	sp,sp,8
    4420:	f800283a 	ret

00004424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4424:	defffe04 	addi	sp,sp,-8
    4428:	dfc00115 	stw	ra,4(sp)
    442c:	df000015 	stw	fp,0(sp)
    4430:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4434:	d0a00b17 	ldw	r2,-32724(gp)
    4438:	10000326 	beq	r2,zero,4448 <alt_get_errno+0x24>
    443c:	d0a00b17 	ldw	r2,-32724(gp)
    4440:	103ee83a 	callr	r2
    4444:	00000106 	br	444c <alt_get_errno+0x28>
    4448:	d0a7c904 	addi	r2,gp,-24796
}
    444c:	e037883a 	mov	sp,fp
    4450:	dfc00117 	ldw	ra,4(sp)
    4454:	df000017 	ldw	fp,0(sp)
    4458:	dec00204 	addi	sp,sp,8
    445c:	f800283a 	ret

00004460 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4460:	deffed04 	addi	sp,sp,-76
    4464:	dfc01215 	stw	ra,72(sp)
    4468:	df001115 	stw	fp,68(sp)
    446c:	df001104 	addi	fp,sp,68
    4470:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4474:	e0bfff17 	ldw	r2,-4(fp)
    4478:	10000616 	blt	r2,zero,4494 <isatty+0x34>
    447c:	e0bfff17 	ldw	r2,-4(fp)
    4480:	10c00324 	muli	r3,r2,12
    4484:	00800074 	movhi	r2,1
    4488:	10870304 	addi	r2,r2,7180
    448c:	1885883a 	add	r2,r3,r2
    4490:	00000106 	br	4498 <isatty+0x38>
    4494:	0005883a 	mov	r2,zero
    4498:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    449c:	e0bfef17 	ldw	r2,-68(fp)
    44a0:	10000e26 	beq	r2,zero,44dc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    44a4:	e0bfef17 	ldw	r2,-68(fp)
    44a8:	10800017 	ldw	r2,0(r2)
    44ac:	10800817 	ldw	r2,32(r2)
    44b0:	1000021e 	bne	r2,zero,44bc <isatty+0x5c>
    {
      return 1;
    44b4:	00800044 	movi	r2,1
    44b8:	00000d06 	br	44f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    44bc:	e0bff004 	addi	r2,fp,-64
    44c0:	100b883a 	mov	r5,r2
    44c4:	e13fff17 	ldw	r4,-4(fp)
    44c8:	00043740 	call	4374 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    44cc:	e0bff117 	ldw	r2,-60(fp)
    44d0:	10880020 	cmpeqi	r2,r2,8192
    44d4:	10803fcc 	andi	r2,r2,255
    44d8:	00000506 	br	44f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    44dc:	00044240 	call	4424 <alt_get_errno>
    44e0:	1007883a 	mov	r3,r2
    44e4:	00801444 	movi	r2,81
    44e8:	18800015 	stw	r2,0(r3)
    return 0;
    44ec:	0005883a 	mov	r2,zero
  }
}
    44f0:	e037883a 	mov	sp,fp
    44f4:	dfc00117 	ldw	ra,4(sp)
    44f8:	df000017 	ldw	fp,0(sp)
    44fc:	dec00204 	addi	sp,sp,8
    4500:	f800283a 	ret

00004504 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4504:	defffc04 	addi	sp,sp,-16
    4508:	df000315 	stw	fp,12(sp)
    450c:	df000304 	addi	fp,sp,12
    4510:	e13ffd15 	stw	r4,-12(fp)
    4514:	e17ffe15 	stw	r5,-8(fp)
    4518:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    451c:	e0fffe17 	ldw	r3,-8(fp)
    4520:	e0bffd17 	ldw	r2,-12(fp)
    4524:	18800c26 	beq	r3,r2,4558 <alt_load_section+0x54>
  {
    while( to != end )
    4528:	00000806 	br	454c <alt_load_section+0x48>
    {
      *to++ = *from++;
    452c:	e0bffe17 	ldw	r2,-8(fp)
    4530:	10c00104 	addi	r3,r2,4
    4534:	e0fffe15 	stw	r3,-8(fp)
    4538:	e0fffd17 	ldw	r3,-12(fp)
    453c:	19000104 	addi	r4,r3,4
    4540:	e13ffd15 	stw	r4,-12(fp)
    4544:	18c00017 	ldw	r3,0(r3)
    4548:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    454c:	e0fffe17 	ldw	r3,-8(fp)
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	18bff51e 	bne	r3,r2,452c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700452c>
    {
      *to++ = *from++;
    }
  }
}
    4558:	0001883a 	nop
    455c:	e037883a 	mov	sp,fp
    4560:	df000017 	ldw	fp,0(sp)
    4564:	dec00104 	addi	sp,sp,4
    4568:	f800283a 	ret

0000456c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    456c:	defffe04 	addi	sp,sp,-8
    4570:	dfc00115 	stw	ra,4(sp)
    4574:	df000015 	stw	fp,0(sp)
    4578:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    457c:	01800074 	movhi	r6,1
    4580:	318c7004 	addi	r6,r6,12736
    4584:	01400074 	movhi	r5,1
    4588:	2944e404 	addi	r5,r5,5008
    458c:	01000074 	movhi	r4,1
    4590:	210c7004 	addi	r4,r4,12736
    4594:	00045040 	call	4504 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4598:	01800034 	movhi	r6,0
    459c:	31809204 	addi	r6,r6,584
    45a0:	01400034 	movhi	r5,0
    45a4:	29400804 	addi	r5,r5,32
    45a8:	01000034 	movhi	r4,0
    45ac:	21000804 	addi	r4,r4,32
    45b0:	00045040 	call	4504 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    45b4:	01800074 	movhi	r6,1
    45b8:	3184e404 	addi	r6,r6,5008
    45bc:	01400074 	movhi	r5,1
    45c0:	29440a04 	addi	r5,r5,4136
    45c4:	01000074 	movhi	r4,1
    45c8:	21040a04 	addi	r4,r4,4136
    45cc:	00045040 	call	4504 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    45d0:	000fccc0 	call	fccc <alt_dcache_flush_all>
  alt_icache_flush_all();
    45d4:	000ff1c0 	call	ff1c <alt_icache_flush_all>
}
    45d8:	0001883a 	nop
    45dc:	e037883a 	mov	sp,fp
    45e0:	dfc00117 	ldw	ra,4(sp)
    45e4:	df000017 	ldw	fp,0(sp)
    45e8:	dec00204 	addi	sp,sp,8
    45ec:	f800283a 	ret

000045f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    45f0:	defffe04 	addi	sp,sp,-8
    45f4:	dfc00115 	stw	ra,4(sp)
    45f8:	df000015 	stw	fp,0(sp)
    45fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4600:	d0a00b17 	ldw	r2,-32724(gp)
    4604:	10000326 	beq	r2,zero,4614 <alt_get_errno+0x24>
    4608:	d0a00b17 	ldw	r2,-32724(gp)
    460c:	103ee83a 	callr	r2
    4610:	00000106 	br	4618 <alt_get_errno+0x28>
    4614:	d0a7c904 	addi	r2,gp,-24796
}
    4618:	e037883a 	mov	sp,fp
    461c:	dfc00117 	ldw	ra,4(sp)
    4620:	df000017 	ldw	fp,0(sp)
    4624:	dec00204 	addi	sp,sp,8
    4628:	f800283a 	ret

0000462c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    462c:	defff904 	addi	sp,sp,-28
    4630:	dfc00615 	stw	ra,24(sp)
    4634:	df000515 	stw	fp,20(sp)
    4638:	df000504 	addi	fp,sp,20
    463c:	e13ffd15 	stw	r4,-12(fp)
    4640:	e17ffe15 	stw	r5,-8(fp)
    4644:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    4648:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    464c:	e0bffd17 	ldw	r2,-12(fp)
    4650:	10000616 	blt	r2,zero,466c <lseek+0x40>
    4654:	e0bffd17 	ldw	r2,-12(fp)
    4658:	10c00324 	muli	r3,r2,12
    465c:	00800074 	movhi	r2,1
    4660:	10870304 	addi	r2,r2,7180
    4664:	1885883a 	add	r2,r3,r2
    4668:	00000106 	br	4670 <lseek+0x44>
    466c:	0005883a 	mov	r2,zero
    4670:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    4674:	e0bffc17 	ldw	r2,-16(fp)
    4678:	10001026 	beq	r2,zero,46bc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	10800017 	ldw	r2,0(r2)
    4684:	10800717 	ldw	r2,28(r2)
    4688:	10000926 	beq	r2,zero,46b0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    468c:	e0bffc17 	ldw	r2,-16(fp)
    4690:	10800017 	ldw	r2,0(r2)
    4694:	10800717 	ldw	r2,28(r2)
    4698:	e1bfff17 	ldw	r6,-4(fp)
    469c:	e17ffe17 	ldw	r5,-8(fp)
    46a0:	e13ffc17 	ldw	r4,-16(fp)
    46a4:	103ee83a 	callr	r2
    46a8:	e0bffb15 	stw	r2,-20(fp)
    46ac:	00000506 	br	46c4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    46b0:	00bfde84 	movi	r2,-134
    46b4:	e0bffb15 	stw	r2,-20(fp)
    46b8:	00000206 	br	46c4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    46bc:	00bfebc4 	movi	r2,-81
    46c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    46c4:	e0bffb17 	ldw	r2,-20(fp)
    46c8:	1000070e 	bge	r2,zero,46e8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    46cc:	00045f00 	call	45f0 <alt_get_errno>
    46d0:	1007883a 	mov	r3,r2
    46d4:	e0bffb17 	ldw	r2,-20(fp)
    46d8:	0085c83a 	sub	r2,zero,r2
    46dc:	18800015 	stw	r2,0(r3)
    rc = -1;
    46e0:	00bfffc4 	movi	r2,-1
    46e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    46e8:	e0bffb17 	ldw	r2,-20(fp)
}
    46ec:	e037883a 	mov	sp,fp
    46f0:	dfc00117 	ldw	ra,4(sp)
    46f4:	df000017 	ldw	fp,0(sp)
    46f8:	dec00204 	addi	sp,sp,8
    46fc:	f800283a 	ret

00004700 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4700:	defff904 	addi	sp,sp,-28
    4704:	dfc00615 	stw	ra,24(sp)
    4708:	df000515 	stw	fp,20(sp)
    470c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4710:	0009883a 	mov	r4,zero
    4714:	000d1280 	call	d128 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4718:	00056bc0 	call	56bc <OSInit>
    471c:	01000044 	movi	r4,1
    4720:	000aae40 	call	aae4 <OSSemCreate>
    4724:	d0a7cf15 	stw	r2,-24772(gp)
    4728:	01000044 	movi	r4,1
    472c:	000aae40 	call	aae4 <OSSemCreate>
    4730:	d0a7d115 	stw	r2,-24764(gp)
    4734:	d0a7ca04 	addi	r2,gp,-24792
    4738:	e0bffc15 	stw	r2,-16(fp)
    473c:	00800044 	movi	r2,1
    4740:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    4744:	e0bffd0b 	ldhu	r2,-12(fp)
    4748:	1009883a 	mov	r4,r2
    474c:	000aae40 	call	aae4 <OSSemCreate>
    4750:	1007883a 	mov	r3,r2
    4754:	e0bffc17 	ldw	r2,-16(fp)
    4758:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    475c:	000d1600 	call	d160 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4760:	01800074 	movhi	r6,1
    4764:	31844004 	addi	r6,r6,4352
    4768:	01400074 	movhi	r5,1
    476c:	29444004 	addi	r5,r5,4352
    4770:	01000074 	movhi	r4,1
    4774:	21044004 	addi	r4,r4,4352
    4778:	00100140 	call	10014 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    477c:	000fdcc0 	call	fdcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4780:	01000074 	movhi	r4,1
    4784:	213f8b04 	addi	r4,r4,-468
    4788:	0010c940 	call	10c94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    478c:	d0a7cb17 	ldw	r2,-24788(gp)
    4790:	d0e7cc17 	ldw	r3,-24784(gp)
    4794:	d127cd17 	ldw	r4,-24780(gp)
    4798:	200d883a 	mov	r6,r4
    479c:	180b883a 	mov	r5,r3
    47a0:	1009883a 	mov	r4,r2
    47a4:	00004b00 	call	4b0 <main>
    47a8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    47ac:	01000044 	movi	r4,1
    47b0:	000423c0 	call	423c <close>
  exit (result);
    47b4:	e13ffb17 	ldw	r4,-20(fp)
    47b8:	0010ca80 	call	10ca8 <exit>

000047bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    47bc:	defffe04 	addi	sp,sp,-8
    47c0:	dfc00115 	stw	ra,4(sp)
    47c4:	df000015 	stw	fp,0(sp)
    47c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    47cc:	d0a00b17 	ldw	r2,-32724(gp)
    47d0:	10000326 	beq	r2,zero,47e0 <alt_get_errno+0x24>
    47d4:	d0a00b17 	ldw	r2,-32724(gp)
    47d8:	103ee83a 	callr	r2
    47dc:	00000106 	br	47e4 <alt_get_errno+0x28>
    47e0:	d0a7c904 	addi	r2,gp,-24796
}
    47e4:	e037883a 	mov	sp,fp
    47e8:	dfc00117 	ldw	ra,4(sp)
    47ec:	df000017 	ldw	fp,0(sp)
    47f0:	dec00204 	addi	sp,sp,8
    47f4:	f800283a 	ret

000047f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    47f8:	defff904 	addi	sp,sp,-28
    47fc:	dfc00615 	stw	ra,24(sp)
    4800:	df000515 	stw	fp,20(sp)
    4804:	df000504 	addi	fp,sp,20
    4808:	e13ffd15 	stw	r4,-12(fp)
    480c:	e17ffe15 	stw	r5,-8(fp)
    4810:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4814:	e0bffd17 	ldw	r2,-12(fp)
    4818:	10000616 	blt	r2,zero,4834 <read+0x3c>
    481c:	e0bffd17 	ldw	r2,-12(fp)
    4820:	10c00324 	muli	r3,r2,12
    4824:	00800074 	movhi	r2,1
    4828:	10870304 	addi	r2,r2,7180
    482c:	1885883a 	add	r2,r3,r2
    4830:	00000106 	br	4838 <read+0x40>
    4834:	0005883a 	mov	r2,zero
    4838:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    483c:	e0bffb17 	ldw	r2,-20(fp)
    4840:	10002226 	beq	r2,zero,48cc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4844:	e0bffb17 	ldw	r2,-20(fp)
    4848:	10800217 	ldw	r2,8(r2)
    484c:	108000cc 	andi	r2,r2,3
    4850:	10800060 	cmpeqi	r2,r2,1
    4854:	1000181e 	bne	r2,zero,48b8 <read+0xc0>
        (fd->dev->read))
    4858:	e0bffb17 	ldw	r2,-20(fp)
    485c:	10800017 	ldw	r2,0(r2)
    4860:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4864:	10001426 	beq	r2,zero,48b8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4868:	e0bffb17 	ldw	r2,-20(fp)
    486c:	10800017 	ldw	r2,0(r2)
    4870:	10800517 	ldw	r2,20(r2)
    4874:	e0ffff17 	ldw	r3,-4(fp)
    4878:	180d883a 	mov	r6,r3
    487c:	e17ffe17 	ldw	r5,-8(fp)
    4880:	e13ffb17 	ldw	r4,-20(fp)
    4884:	103ee83a 	callr	r2
    4888:	e0bffc15 	stw	r2,-16(fp)
    488c:	e0bffc17 	ldw	r2,-16(fp)
    4890:	1000070e 	bge	r2,zero,48b0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    4894:	00047bc0 	call	47bc <alt_get_errno>
    4898:	1007883a 	mov	r3,r2
    489c:	e0bffc17 	ldw	r2,-16(fp)
    48a0:	0085c83a 	sub	r2,zero,r2
    48a4:	18800015 	stw	r2,0(r3)
          return -1;
    48a8:	00bfffc4 	movi	r2,-1
    48ac:	00000c06 	br	48e0 <read+0xe8>
        }
        return rval;
    48b0:	e0bffc17 	ldw	r2,-16(fp)
    48b4:	00000a06 	br	48e0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    48b8:	00047bc0 	call	47bc <alt_get_errno>
    48bc:	1007883a 	mov	r3,r2
    48c0:	00800344 	movi	r2,13
    48c4:	18800015 	stw	r2,0(r3)
    48c8:	00000406 	br	48dc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    48cc:	00047bc0 	call	47bc <alt_get_errno>
    48d0:	1007883a 	mov	r3,r2
    48d4:	00801444 	movi	r2,81
    48d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    48dc:	00bfffc4 	movi	r2,-1
}
    48e0:	e037883a 	mov	sp,fp
    48e4:	dfc00117 	ldw	ra,4(sp)
    48e8:	df000017 	ldw	fp,0(sp)
    48ec:	dec00204 	addi	sp,sp,8
    48f0:	f800283a 	ret

000048f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    48f4:	defffe04 	addi	sp,sp,-8
    48f8:	df000115 	stw	fp,4(sp)
    48fc:	df000104 	addi	fp,sp,4
    4900:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    4904:	e0bfff17 	ldw	r2,-4(fp)
    4908:	108000d0 	cmplti	r2,r2,3
    490c:	10000d1e 	bne	r2,zero,4944 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    4910:	00800074 	movhi	r2,1
    4914:	10870304 	addi	r2,r2,7180
    4918:	e0ffff17 	ldw	r3,-4(fp)
    491c:	18c00324 	muli	r3,r3,12
    4920:	10c5883a 	add	r2,r2,r3
    4924:	10800204 	addi	r2,r2,8
    4928:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    492c:	00800074 	movhi	r2,1
    4930:	10870304 	addi	r2,r2,7180
    4934:	e0ffff17 	ldw	r3,-4(fp)
    4938:	18c00324 	muli	r3,r3,12
    493c:	10c5883a 	add	r2,r2,r3
    4940:	10000015 	stw	zero,0(r2)
  }
}
    4944:	0001883a 	nop
    4948:	e037883a 	mov	sp,fp
    494c:	df000017 	ldw	fp,0(sp)
    4950:	dec00104 	addi	sp,sp,4
    4954:	f800283a 	ret

00004958 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    4958:	defff904 	addi	sp,sp,-28
    495c:	df000615 	stw	fp,24(sp)
    4960:	df000604 	addi	fp,sp,24
    4964:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4968:	0005303a 	rdctl	r2,status
    496c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4970:	e0fffe17 	ldw	r3,-8(fp)
    4974:	00bfff84 	movi	r2,-2
    4978:	1884703a 	and	r2,r3,r2
    497c:	1001703a 	wrctl	status,r2
  
  return context;
    4980:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    4984:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4988:	d0a00c17 	ldw	r2,-32720(gp)
    498c:	10c000c4 	addi	r3,r2,3
    4990:	00bfff04 	movi	r2,-4
    4994:	1884703a 	and	r2,r3,r2
    4998:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    499c:	d0e00c17 	ldw	r3,-32720(gp)
    49a0:	e0bfff17 	ldw	r2,-4(fp)
    49a4:	1887883a 	add	r3,r3,r2
    49a8:	00810034 	movhi	r2,1024
    49ac:	10800004 	addi	r2,r2,0
    49b0:	10c0062e 	bgeu	r2,r3,49cc <sbrk+0x74>
    49b4:	e0bffb17 	ldw	r2,-20(fp)
    49b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49bc:	e0bffa17 	ldw	r2,-24(fp)
    49c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    49c4:	00bfffc4 	movi	r2,-1
    49c8:	00000b06 	br	49f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    49cc:	d0a00c17 	ldw	r2,-32720(gp)
    49d0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    49d4:	d0e00c17 	ldw	r3,-32720(gp)
    49d8:	e0bfff17 	ldw	r2,-4(fp)
    49dc:	1885883a 	add	r2,r3,r2
    49e0:	d0a00c15 	stw	r2,-32720(gp)
    49e4:	e0bffb17 	ldw	r2,-20(fp)
    49e8:	e0bffc15 	stw	r2,-16(fp)
    49ec:	e0bffc17 	ldw	r2,-16(fp)
    49f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    49f4:	e0bffd17 	ldw	r2,-12(fp)
} 
    49f8:	e037883a 	mov	sp,fp
    49fc:	df000017 	ldw	fp,0(sp)
    4a00:	dec00104 	addi	sp,sp,4
    4a04:	f800283a 	ret

00004a08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4a08:	defffe04 	addi	sp,sp,-8
    4a0c:	dfc00115 	stw	ra,4(sp)
    4a10:	df000015 	stw	fp,0(sp)
    4a14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4a18:	d0a00b17 	ldw	r2,-32724(gp)
    4a1c:	10000326 	beq	r2,zero,4a2c <alt_get_errno+0x24>
    4a20:	d0a00b17 	ldw	r2,-32724(gp)
    4a24:	103ee83a 	callr	r2
    4a28:	00000106 	br	4a30 <alt_get_errno+0x28>
    4a2c:	d0a7c904 	addi	r2,gp,-24796
}
    4a30:	e037883a 	mov	sp,fp
    4a34:	dfc00117 	ldw	ra,4(sp)
    4a38:	df000017 	ldw	fp,0(sp)
    4a3c:	dec00204 	addi	sp,sp,8
    4a40:	f800283a 	ret

00004a44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4a44:	defff904 	addi	sp,sp,-28
    4a48:	dfc00615 	stw	ra,24(sp)
    4a4c:	df000515 	stw	fp,20(sp)
    4a50:	df000504 	addi	fp,sp,20
    4a54:	e13ffd15 	stw	r4,-12(fp)
    4a58:	e17ffe15 	stw	r5,-8(fp)
    4a5c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4a60:	e0bffd17 	ldw	r2,-12(fp)
    4a64:	10000616 	blt	r2,zero,4a80 <write+0x3c>
    4a68:	e0bffd17 	ldw	r2,-12(fp)
    4a6c:	10c00324 	muli	r3,r2,12
    4a70:	00800074 	movhi	r2,1
    4a74:	10870304 	addi	r2,r2,7180
    4a78:	1885883a 	add	r2,r3,r2
    4a7c:	00000106 	br	4a84 <write+0x40>
    4a80:	0005883a 	mov	r2,zero
    4a84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4a88:	e0bffb17 	ldw	r2,-20(fp)
    4a8c:	10002126 	beq	r2,zero,4b14 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4a90:	e0bffb17 	ldw	r2,-20(fp)
    4a94:	10800217 	ldw	r2,8(r2)
    4a98:	108000cc 	andi	r2,r2,3
    4a9c:	10001826 	beq	r2,zero,4b00 <write+0xbc>
    4aa0:	e0bffb17 	ldw	r2,-20(fp)
    4aa4:	10800017 	ldw	r2,0(r2)
    4aa8:	10800617 	ldw	r2,24(r2)
    4aac:	10001426 	beq	r2,zero,4b00 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4ab0:	e0bffb17 	ldw	r2,-20(fp)
    4ab4:	10800017 	ldw	r2,0(r2)
    4ab8:	10800617 	ldw	r2,24(r2)
    4abc:	e0ffff17 	ldw	r3,-4(fp)
    4ac0:	180d883a 	mov	r6,r3
    4ac4:	e17ffe17 	ldw	r5,-8(fp)
    4ac8:	e13ffb17 	ldw	r4,-20(fp)
    4acc:	103ee83a 	callr	r2
    4ad0:	e0bffc15 	stw	r2,-16(fp)
    4ad4:	e0bffc17 	ldw	r2,-16(fp)
    4ad8:	1000070e 	bge	r2,zero,4af8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    4adc:	0004a080 	call	4a08 <alt_get_errno>
    4ae0:	1007883a 	mov	r3,r2
    4ae4:	e0bffc17 	ldw	r2,-16(fp)
    4ae8:	0085c83a 	sub	r2,zero,r2
    4aec:	18800015 	stw	r2,0(r3)
        return -1;
    4af0:	00bfffc4 	movi	r2,-1
    4af4:	00000c06 	br	4b28 <write+0xe4>
      }
      return rval;
    4af8:	e0bffc17 	ldw	r2,-16(fp)
    4afc:	00000a06 	br	4b28 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    4b00:	0004a080 	call	4a08 <alt_get_errno>
    4b04:	1007883a 	mov	r3,r2
    4b08:	00800344 	movi	r2,13
    4b0c:	18800015 	stw	r2,0(r3)
    4b10:	00000406 	br	4b24 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    4b14:	0004a080 	call	4a08 <alt_get_errno>
    4b18:	1007883a 	mov	r3,r2
    4b1c:	00801444 	movi	r2,81
    4b20:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4b24:	00bfffc4 	movi	r2,-1
}
    4b28:	e037883a 	mov	sp,fp
    4b2c:	dfc00117 	ldw	ra,4(sp)
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00204 	addi	sp,sp,8
    4b38:	f800283a 	ret

00004b3c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    4b3c:	deffdf04 	addi	sp,sp,-132
    4b40:	dfc02015 	stw	ra,128(sp)
    4b44:	df001f15 	stw	fp,124(sp)
    4b48:	df001f04 	addi	fp,sp,124
    4b4c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    4b50:	e0bfe204 	addi	r2,fp,-120
    4b54:	100b883a 	mov	r5,r2
    4b58:	01003fc4 	movi	r4,255
    4b5c:	000ca6c0 	call	ca6c <OSTaskQuery>
    4b60:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    4b64:	e0bffe83 	ldbu	r2,-6(fp)
    4b68:	10803fcc 	andi	r2,r2,255
    4b6c:	10001e1e 	bne	r2,zero,4be8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    4b70:	e0bfee83 	ldbu	r2,-70(fp)
    4b74:	10803fcc 	andi	r2,r2,255
    4b78:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    4b7c:	d0a7cf17 	ldw	r2,-24772(gp)
    4b80:	e0fffd04 	addi	r3,fp,-12
    4b84:	180b883a 	mov	r5,r3
    4b88:	1009883a 	mov	r4,r2
    4b8c:	000b2840 	call	b284 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    4b90:	e0bffe43 	ldbu	r2,-7(fp)
    4b94:	10803fcc 	andi	r2,r2,255
    4b98:	10000726 	beq	r2,zero,4bb8 <__env_lock+0x7c>
    4b9c:	d0a00d17 	ldw	r2,-32716(gp)
    4ba0:	e0ffe117 	ldw	r3,-124(fp)
    4ba4:	1880041e 	bne	r3,r2,4bb8 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    4ba8:	d0a7ce17 	ldw	r2,-24776(gp)
    4bac:	10800044 	addi	r2,r2,1
    4bb0:	d0a7ce15 	stw	r2,-24776(gp)
    4bb4:	00000a06 	br	4be0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    4bb8:	d0a7cf17 	ldw	r2,-24772(gp)
    4bbc:	e0fffe84 	addi	r3,fp,-6
    4bc0:	180d883a 	mov	r6,r3
    4bc4:	000b883a 	mov	r5,zero
    4bc8:	1009883a 	mov	r4,r2
    4bcc:	000adfc0 	call	adfc <OSSemPend>
    locks  = 1;
    4bd0:	00800044 	movi	r2,1
    4bd4:	d0a7ce15 	stw	r2,-24776(gp)
    lockid = id;
    4bd8:	e0bfe117 	ldw	r2,-124(fp)
    4bdc:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    4be0:	0001883a 	nop
    4be4:	00000106 	br	4bec <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    4be8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    4bec:	e037883a 	mov	sp,fp
    4bf0:	dfc00117 	ldw	ra,4(sp)
    4bf4:	df000017 	ldw	fp,0(sp)
    4bf8:	dec00204 	addi	sp,sp,8
    4bfc:	f800283a 	ret

00004c00 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    4c00:	defffd04 	addi	sp,sp,-12
    4c04:	dfc00215 	stw	ra,8(sp)
    4c08:	df000115 	stw	fp,4(sp)
    4c0c:	df000104 	addi	fp,sp,4
    4c10:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    4c14:	d0a7ce17 	ldw	r2,-24776(gp)
    4c18:	10000b26 	beq	r2,zero,4c48 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    4c1c:	d0a7ce17 	ldw	r2,-24776(gp)
    4c20:	10bfffc4 	addi	r2,r2,-1
    4c24:	d0a7ce15 	stw	r2,-24776(gp)
    4c28:	d0a7ce17 	ldw	r2,-24776(gp)
    4c2c:	1000071e 	bne	r2,zero,4c4c <__env_unlock+0x4c>
  {
    lockid = -1;
    4c30:	00bfffc4 	movi	r2,-1
    4c34:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    4c38:	d0a7cf17 	ldw	r2,-24772(gp)
    4c3c:	1009883a 	mov	r4,r2
    4c40:	000b1740 	call	b174 <OSSemPost>
    4c44:	00000106 	br	4c4c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    4c48:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    4c4c:	e037883a 	mov	sp,fp
    4c50:	dfc00117 	ldw	ra,4(sp)
    4c54:	df000017 	ldw	fp,0(sp)
    4c58:	dec00204 	addi	sp,sp,8
    4c5c:	f800283a 	ret

00004c60 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    4c60:	deffdb04 	addi	sp,sp,-148
    4c64:	dfc02415 	stw	ra,144(sp)
    4c68:	df002315 	stw	fp,140(sp)
    4c6c:	df002304 	addi	fp,sp,140
    4c70:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4c74:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    4c78:	d0a7d243 	ldbu	r2,-24759(gp)
    4c7c:	10803fcc 	andi	r2,r2,255
    4c80:	10800060 	cmpeqi	r2,r2,1
    4c84:	10003626 	beq	r2,zero,4d60 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    4c88:	e0bfe204 	addi	r2,fp,-120
    4c8c:	100b883a 	mov	r5,r2
    4c90:	01003fc4 	movi	r4,255
    4c94:	000ca6c0 	call	ca6c <OSTaskQuery>
    4c98:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    4c9c:	e0bffe83 	ldbu	r2,-6(fp)
    4ca0:	10803fcc 	andi	r2,r2,255
    4ca4:	1000301e 	bne	r2,zero,4d68 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    4ca8:	e0bfee83 	ldbu	r2,-70(fp)
    4cac:	10803fcc 	andi	r2,r2,255
    4cb0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    4cb4:	d0a7d117 	ldw	r2,-24764(gp)
    4cb8:	e0fffd04 	addi	r3,fp,-12
    4cbc:	180b883a 	mov	r5,r3
    4cc0:	1009883a 	mov	r4,r2
    4cc4:	000b2840 	call	b284 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cc8:	0005303a 	rdctl	r2,status
    4ccc:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cd0:	e0ffe117 	ldw	r3,-124(fp)
    4cd4:	00bfff84 	movi	r2,-2
    4cd8:	1884703a 	and	r2,r3,r2
    4cdc:	1001703a 	wrctl	status,r2
  
  return context;
    4ce0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    4ce4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    4ce8:	e0bffd0b 	ldhu	r2,-12(fp)
    4cec:	10bfffcc 	andi	r2,r2,65535
    4cf0:	10000b1e 	bne	r2,zero,4d20 <__malloc_lock+0xc0>
    4cf4:	d0a00e17 	ldw	r2,-32712(gp)
    4cf8:	e0ffde17 	ldw	r3,-136(fp)
    4cfc:	1880081e 	bne	r3,r2,4d20 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    4d00:	d0a7d017 	ldw	r2,-24768(gp)
    4d04:	10800044 	addi	r2,r2,1
    4d08:	d0a7d015 	stw	r2,-24768(gp)
    4d0c:	e0bfdd17 	ldw	r2,-140(fp)
    4d10:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d14:	e0bfdf17 	ldw	r2,-132(fp)
    4d18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    4d1c:	00000e06 	br	4d58 <__malloc_lock+0xf8>
    4d20:	e0bfdd17 	ldw	r2,-140(fp)
    4d24:	e0bfe015 	stw	r2,-128(fp)
    4d28:	e0bfe017 	ldw	r2,-128(fp)
    4d2c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    4d30:	d0a7d117 	ldw	r2,-24764(gp)
    4d34:	e0fffe84 	addi	r3,fp,-6
    4d38:	180d883a 	mov	r6,r3
    4d3c:	000b883a 	mov	r5,zero
    4d40:	1009883a 	mov	r4,r2
    4d44:	000adfc0 	call	adfc <OSSemPend>
    locks  = 1;
    4d48:	00800044 	movi	r2,1
    4d4c:	d0a7d015 	stw	r2,-24768(gp)
    lockid = id;
    4d50:	e0bfde17 	ldw	r2,-136(fp)
    4d54:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    4d58:	0001883a 	nop
    4d5c:	00000306 	br	4d6c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    4d60:	0001883a 	nop
    4d64:	00000106 	br	4d6c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    4d68:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    4d6c:	e037883a 	mov	sp,fp
    4d70:	dfc00117 	ldw	ra,4(sp)
    4d74:	df000017 	ldw	fp,0(sp)
    4d78:	dec00204 	addi	sp,sp,8
    4d7c:	f800283a 	ret

00004d80 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    4d80:	defff804 	addi	sp,sp,-32
    4d84:	dfc00715 	stw	ra,28(sp)
    4d88:	df000615 	stw	fp,24(sp)
    4d8c:	df000604 	addi	fp,sp,24
    4d90:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4d94:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    4d98:	d0a7d243 	ldbu	r2,-24759(gp)
    4d9c:	10803fcc 	andi	r2,r2,255
    4da0:	10800060 	cmpeqi	r2,r2,1
    4da4:	10002326 	beq	r2,zero,4e34 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4da8:	0005303a 	rdctl	r2,status
    4dac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4db0:	e0fffe17 	ldw	r3,-8(fp)
    4db4:	00bfff84 	movi	r2,-2
    4db8:	1884703a 	and	r2,r3,r2
    4dbc:	1001703a 	wrctl	status,r2
  
  return context;
    4dc0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    4dc4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    4dc8:	d0a7d017 	ldw	r2,-24768(gp)
    4dcc:	1000051e 	bne	r2,zero,4de4 <__malloc_unlock+0x64>
    4dd0:	e0bffa17 	ldw	r2,-24(fp)
    4dd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4dd8:	e0bffb17 	ldw	r2,-20(fp)
    4ddc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    4de0:	00001506 	br	4e38 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    4de4:	d0a7d017 	ldw	r2,-24768(gp)
    4de8:	10bfffc4 	addi	r2,r2,-1
    4dec:	d0a7d015 	stw	r2,-24768(gp)
    4df0:	d0a7d017 	ldw	r2,-24768(gp)
    4df4:	10000a1e 	bne	r2,zero,4e20 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    4df8:	00bfffc4 	movi	r2,-1
    4dfc:	d0a00e15 	stw	r2,-32712(gp)
    4e00:	e0bffa17 	ldw	r2,-24(fp)
    4e04:	e0bffc15 	stw	r2,-16(fp)
    4e08:	e0bffc17 	ldw	r2,-16(fp)
    4e0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    4e10:	d0a7d117 	ldw	r2,-24764(gp)
    4e14:	1009883a 	mov	r4,r2
    4e18:	000b1740 	call	b174 <OSSemPost>
    4e1c:	00000606 	br	4e38 <__malloc_unlock+0xb8>
    4e20:	e0bffa17 	ldw	r2,-24(fp)
    4e24:	e0bffd15 	stw	r2,-12(fp)
    4e28:	e0bffd17 	ldw	r2,-12(fp)
    4e2c:	1001703a 	wrctl	status,r2
    4e30:	00000106 	br	4e38 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    4e34:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    4e38:	e037883a 	mov	sp,fp
    4e3c:	dfc00117 	ldw	ra,4(sp)
    4e40:	df000017 	ldw	fp,0(sp)
    4e44:	dec00204 	addi	sp,sp,8
    4e48:	f800283a 	ret

00004e4c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    4e4c:	defff704 	addi	sp,sp,-36
    4e50:	dfc00815 	stw	ra,32(sp)
    4e54:	df000715 	stw	fp,28(sp)
    4e58:	df000704 	addi	fp,sp,28
    4e5c:	e13ffd15 	stw	r4,-12(fp)
    4e60:	e17ffe15 	stw	r5,-8(fp)
    4e64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4e68:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4e6c:	e0bfff17 	ldw	r2,-4(fp)
    4e70:	1000021e 	bne	r2,zero,4e7c <OSEventNameGet+0x30>
        return (0);
    4e74:	0005883a 	mov	r2,zero
    4e78:	00003706 	br	4f58 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4e7c:	e0bffd17 	ldw	r2,-12(fp)
    4e80:	1000051e 	bne	r2,zero,4e98 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    4e84:	e0bfff17 	ldw	r2,-4(fp)
    4e88:	00c00104 	movi	r3,4
    4e8c:	10c00005 	stb	r3,0(r2)
        return (0);
    4e90:	0005883a 	mov	r2,zero
    4e94:	00003006 	br	4f58 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4e98:	e0bffe17 	ldw	r2,-8(fp)
    4e9c:	1000051e 	bne	r2,zero,4eb4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    4ea0:	e0bfff17 	ldw	r2,-4(fp)
    4ea4:	00c00304 	movi	r3,12
    4ea8:	10c00005 	stb	r3,0(r2)
        return (0);
    4eac:	0005883a 	mov	r2,zero
    4eb0:	00002906 	br	4f58 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4eb4:	d0a7e003 	ldbu	r2,-24704(gp)
    4eb8:	10803fcc 	andi	r2,r2,255
    4ebc:	10000526 	beq	r2,zero,4ed4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    4ec0:	e0bfff17 	ldw	r2,-4(fp)
    4ec4:	00c00444 	movi	r3,17
    4ec8:	10c00005 	stb	r3,0(r2)
        return (0);
    4ecc:	0005883a 	mov	r2,zero
    4ed0:	00002106 	br	4f58 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    4ed4:	e0bffd17 	ldw	r2,-12(fp)
    4ed8:	10800003 	ldbu	r2,0(r2)
    4edc:	10803fcc 	andi	r2,r2,255
    4ee0:	10bfffc4 	addi	r2,r2,-1
    4ee4:	10800128 	cmpgeui	r2,r2,4
    4ee8:	10000526 	beq	r2,zero,4f00 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    4eec:	e0bfff17 	ldw	r2,-4(fp)
    4ef0:	00c00044 	movi	r3,1
    4ef4:	10c00005 	stb	r3,0(r2)
             return (0);
    4ef8:	0005883a 	mov	r2,zero
    4efc:	00001606 	br	4f58 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    4f00:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f04:	0005303a 	rdctl	r2,status
    4f08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f0c:	e0fffb17 	ldw	r3,-20(fp)
    4f10:	00bfff84 	movi	r2,-2
    4f14:	1884703a 	and	r2,r3,r2
    4f18:	1001703a 	wrctl	status,r2
  
  return context;
    4f1c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    4f20:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    4f24:	e0bffd17 	ldw	r2,-12(fp)
    4f28:	10800384 	addi	r2,r2,14
    4f2c:	100b883a 	mov	r5,r2
    4f30:	e13ffe17 	ldw	r4,-8(fp)
    4f34:	00068d00 	call	68d0 <OS_StrCopy>
    4f38:	e0bffa05 	stb	r2,-24(fp)
    4f3c:	e0bff917 	ldw	r2,-28(fp)
    4f40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f44:	e0bffc17 	ldw	r2,-16(fp)
    4f48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4f4c:	e0bfff17 	ldw	r2,-4(fp)
    4f50:	10000005 	stb	zero,0(r2)
    return (len);
    4f54:	e0bffa03 	ldbu	r2,-24(fp)
}
    4f58:	e037883a 	mov	sp,fp
    4f5c:	dfc00117 	ldw	ra,4(sp)
    4f60:	df000017 	ldw	fp,0(sp)
    4f64:	dec00204 	addi	sp,sp,8
    4f68:	f800283a 	ret

00004f6c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    4f6c:	defff604 	addi	sp,sp,-40
    4f70:	dfc00915 	stw	ra,36(sp)
    4f74:	df000815 	stw	fp,32(sp)
    4f78:	df000804 	addi	fp,sp,32
    4f7c:	e13ffd15 	stw	r4,-12(fp)
    4f80:	e17ffe15 	stw	r5,-8(fp)
    4f84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4f88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4f8c:	e0bfff17 	ldw	r2,-4(fp)
    4f90:	10004026 	beq	r2,zero,5094 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4f94:	e0bffd17 	ldw	r2,-12(fp)
    4f98:	1000041e 	bne	r2,zero,4fac <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    4f9c:	e0bfff17 	ldw	r2,-4(fp)
    4fa0:	00c00104 	movi	r3,4
    4fa4:	10c00005 	stb	r3,0(r2)
        return;
    4fa8:	00003b06 	br	5098 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	1000041e 	bne	r2,zero,4fc4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    4fb4:	e0bfff17 	ldw	r2,-4(fp)
    4fb8:	00c00304 	movi	r3,12
    4fbc:	10c00005 	stb	r3,0(r2)
        return;
    4fc0:	00003506 	br	5098 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4fc4:	d0a7e003 	ldbu	r2,-24704(gp)
    4fc8:	10803fcc 	andi	r2,r2,255
    4fcc:	10000426 	beq	r2,zero,4fe0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    4fd0:	e0bfff17 	ldw	r2,-4(fp)
    4fd4:	00c00484 	movi	r3,18
    4fd8:	10c00005 	stb	r3,0(r2)
        return;
    4fdc:	00002e06 	br	5098 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    4fe0:	e0bffd17 	ldw	r2,-12(fp)
    4fe4:	10800003 	ldbu	r2,0(r2)
    4fe8:	10803fcc 	andi	r2,r2,255
    4fec:	10bfffc4 	addi	r2,r2,-1
    4ff0:	10800128 	cmpgeui	r2,r2,4
    4ff4:	10000426 	beq	r2,zero,5008 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    4ff8:	e0bfff17 	ldw	r2,-4(fp)
    4ffc:	00c00044 	movi	r3,1
    5000:	10c00005 	stb	r3,0(r2)
             return;
    5004:	00002406 	br	5098 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    5008:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    500c:	0005303a 	rdctl	r2,status
    5010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5014:	e0fffc17 	ldw	r3,-16(fp)
    5018:	00bfff84 	movi	r2,-2
    501c:	1884703a 	and	r2,r3,r2
    5020:	1001703a 	wrctl	status,r2
  
  return context;
    5024:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    5028:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    502c:	e13ffe17 	ldw	r4,-8(fp)
    5030:	00069440 	call	6944 <OS_StrLen>
    5034:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    5038:	e0bffa03 	ldbu	r2,-24(fp)
    503c:	10800830 	cmpltui	r2,r2,32
    5040:	1000081e 	bne	r2,zero,5064 <OSEventNameSet+0xf8>
    5044:	e0bff817 	ldw	r2,-32(fp)
    5048:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    504c:	e0bff917 	ldw	r2,-28(fp)
    5050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    5054:	e0bfff17 	ldw	r2,-4(fp)
    5058:	00c002c4 	movi	r3,11
    505c:	10c00005 	stb	r3,0(r2)
        return;
    5060:	00000d06 	br	5098 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    5064:	e0bffd17 	ldw	r2,-12(fp)
    5068:	10800384 	addi	r2,r2,14
    506c:	e17ffe17 	ldw	r5,-8(fp)
    5070:	1009883a 	mov	r4,r2
    5074:	00068d00 	call	68d0 <OS_StrCopy>
    5078:	e0bff817 	ldw	r2,-32(fp)
    507c:	e0bffb15 	stw	r2,-20(fp)
    5080:	e0bffb17 	ldw	r2,-20(fp)
    5084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5088:	e0bfff17 	ldw	r2,-4(fp)
    508c:	10000005 	stb	zero,0(r2)
    5090:	00000106 	br	5098 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    5094:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    5098:	e037883a 	mov	sp,fp
    509c:	dfc00117 	ldw	ra,4(sp)
    50a0:	df000017 	ldw	fp,0(sp)
    50a4:	dec00204 	addi	sp,sp,8
    50a8:	f800283a 	ret

000050ac <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    50ac:	deffed04 	addi	sp,sp,-76
    50b0:	dfc01215 	stw	ra,72(sp)
    50b4:	df001115 	stw	fp,68(sp)
    50b8:	df001104 	addi	fp,sp,68
    50bc:	e13ffc15 	stw	r4,-16(fp)
    50c0:	e17ffd15 	stw	r5,-12(fp)
    50c4:	e1bffe15 	stw	r6,-8(fp)
    50c8:	3805883a 	mov	r2,r7
    50cc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    50d0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    50d4:	e0800217 	ldw	r2,8(fp)
    50d8:	1000021e 	bne	r2,zero,50e4 <OSEventPendMulti+0x38>
        return (0);
    50dc:	0005883a 	mov	r2,zero
    50e0:	00017106 	br	56a8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    50e4:	e0bffc17 	ldw	r2,-16(fp)
    50e8:	1000051e 	bne	r2,zero,5100 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    50ec:	e0800217 	ldw	r2,8(fp)
    50f0:	00c00104 	movi	r3,4
    50f4:	10c00005 	stb	r3,0(r2)
        return (0);
    50f8:	0005883a 	mov	r2,zero
    50fc:	00016a06 	br	56a8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    5100:	e0bffd17 	ldw	r2,-12(fp)
    5104:	1000051e 	bne	r2,zero,511c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    5108:	e0800217 	ldw	r2,8(fp)
    510c:	00c00104 	movi	r3,4
    5110:	10c00005 	stb	r3,0(r2)
        return (0);
    5114:	0005883a 	mov	r2,zero
    5118:	00016306 	br	56a8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    511c:	e0bffe17 	ldw	r2,-8(fp)
    5120:	1000051e 	bne	r2,zero,5138 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    5124:	e0800217 	ldw	r2,8(fp)
    5128:	00c00104 	movi	r3,4
    512c:	10c00005 	stb	r3,0(r2)
        return (0);
    5130:	0005883a 	mov	r2,zero
    5134:	00015c06 	br	56a8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    5138:	e0bffd17 	ldw	r2,-12(fp)
    513c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    5140:	e0bffc17 	ldw	r2,-16(fp)
    5144:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    5148:	e0bfef17 	ldw	r2,-68(fp)
    514c:	10800017 	ldw	r2,0(r2)
    5150:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    5154:	00001906 	br	51bc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    5158:	e0bff017 	ldw	r2,-64(fp)
    515c:	10800003 	ldbu	r2,0(r2)
    5160:	10803fcc 	andi	r2,r2,255
    5164:	10c000a0 	cmpeqi	r3,r2,2
    5168:	1800091e 	bne	r3,zero,5190 <OSEventPendMulti+0xe4>
    516c:	10c000e0 	cmpeqi	r3,r2,3
    5170:	1800091e 	bne	r3,zero,5198 <OSEventPendMulti+0xec>
    5174:	10800060 	cmpeqi	r2,r2,1
    5178:	1000091e 	bne	r2,zero,51a0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    517c:	e0800217 	ldw	r2,8(fp)
    5180:	00c00044 	movi	r3,1
    5184:	10c00005 	stb	r3,0(r2)
                 return (0);
    5188:	0005883a 	mov	r2,zero
    518c:	00014606 	br	56a8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    5190:	0001883a 	nop
    5194:	00000306 	br	51a4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    5198:	0001883a 	nop
    519c:	00000106 	br	51a4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    51a0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    51a4:	e0bfef17 	ldw	r2,-68(fp)
    51a8:	10800104 	addi	r2,r2,4
    51ac:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    51b0:	e0bfef17 	ldw	r2,-68(fp)
    51b4:	10800017 	ldw	r2,0(r2)
    51b8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    51bc:	e0bff017 	ldw	r2,-64(fp)
    51c0:	103fe51e 	bne	r2,zero,5158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005158>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    51c4:	d0a7e003 	ldbu	r2,-24704(gp)
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	10000526 	beq	r2,zero,51e4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    51d0:	e0800217 	ldw	r2,8(fp)
    51d4:	00c00084 	movi	r3,2
    51d8:	10c00005 	stb	r3,0(r2)
        return (0);
    51dc:	0005883a 	mov	r2,zero
    51e0:	00013106 	br	56a8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    51e4:	d0a7d203 	ldbu	r2,-24760(gp)
    51e8:	10803fcc 	andi	r2,r2,255
    51ec:	10000526 	beq	r2,zero,5204 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    51f0:	e0800217 	ldw	r2,8(fp)
    51f4:	00c00344 	movi	r3,13
    51f8:	10c00005 	stb	r3,0(r2)
        return (0);
    51fc:	0005883a 	mov	r2,zero
    5200:	00012906 	br	56a8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5204:	0005303a 	rdctl	r2,status
    5208:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    520c:	e0fffb17 	ldw	r3,-20(fp)
    5210:	00bfff84 	movi	r2,-2
    5214:	1884703a 	and	r2,r3,r2
    5218:	1001703a 	wrctl	status,r2
  
  return context;
    521c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    5220:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    5224:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    5228:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    522c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    5230:	e0bffc17 	ldw	r2,-16(fp)
    5234:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    5238:	e0bfef17 	ldw	r2,-68(fp)
    523c:	10800017 	ldw	r2,0(r2)
    5240:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    5244:	00008106 	br	544c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    5248:	e0bff017 	ldw	r2,-64(fp)
    524c:	10800003 	ldbu	r2,0(r2)
    5250:	10803fcc 	andi	r2,r2,255
    5254:	10c000a0 	cmpeqi	r3,r2,2
    5258:	18003c1e 	bne	r3,zero,534c <OSEventPendMulti+0x2a0>
    525c:	10c000e0 	cmpeqi	r3,r2,3
    5260:	1800031e 	bne	r3,zero,5270 <OSEventPendMulti+0x1c4>
    5264:	10800060 	cmpeqi	r2,r2,1
    5268:	10001e1e 	bne	r2,zero,52e4 <OSEventPendMulti+0x238>
    526c:	00006606 	br	5408 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    5270:	e0bff017 	ldw	r2,-64(fp)
    5274:	1080020b 	ldhu	r2,8(r2)
    5278:	10bfffcc 	andi	r2,r2,65535
    527c:	10001526 	beq	r2,zero,52d4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    5280:	e0bff017 	ldw	r2,-64(fp)
    5284:	1080020b 	ldhu	r2,8(r2)
    5288:	10bfffc4 	addi	r2,r2,-1
    528c:	1007883a 	mov	r3,r2
    5290:	e0bff017 	ldw	r2,-64(fp)
    5294:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    5298:	e0bffd17 	ldw	r2,-12(fp)
    529c:	10c00104 	addi	r3,r2,4
    52a0:	e0fffd15 	stw	r3,-12(fp)
    52a4:	e0fff017 	ldw	r3,-64(fp)
    52a8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    52ac:	00800044 	movi	r2,1
    52b0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    52b4:	e0bffe17 	ldw	r2,-8(fp)
    52b8:	10c00104 	addi	r3,r2,4
    52bc:	e0fffe15 	stw	r3,-8(fp)
    52c0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    52c4:	e0bff18b 	ldhu	r2,-58(fp)
    52c8:	10800044 	addi	r2,r2,1
    52cc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    52d0:	00005806 	br	5434 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    52d4:	e0bff203 	ldbu	r2,-56(fp)
    52d8:	10800054 	ori	r2,r2,1
    52dc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    52e0:	00005406 	br	5434 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    52e4:	e0bff017 	ldw	r2,-64(fp)
    52e8:	10800117 	ldw	r2,4(r2)
    52ec:	10001326 	beq	r2,zero,533c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    52f0:	e0bffe17 	ldw	r2,-8(fp)
    52f4:	10c00104 	addi	r3,r2,4
    52f8:	e0fffe15 	stw	r3,-8(fp)
    52fc:	e0fff017 	ldw	r3,-64(fp)
    5300:	18c00117 	ldw	r3,4(r3)
    5304:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    5308:	e0bff017 	ldw	r2,-64(fp)
    530c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    5310:	e0bffd17 	ldw	r2,-12(fp)
    5314:	10c00104 	addi	r3,r2,4
    5318:	e0fffd15 	stw	r3,-12(fp)
    531c:	e0fff017 	ldw	r3,-64(fp)
    5320:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    5324:	00800044 	movi	r2,1
    5328:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    532c:	e0bff18b 	ldhu	r2,-58(fp)
    5330:	10800044 	addi	r2,r2,1
    5334:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    5338:	00003e06 	br	5434 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    533c:	e0bff203 	ldbu	r2,-56(fp)
    5340:	10800094 	ori	r2,r2,2
    5344:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5348:	00003a06 	br	5434 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    534c:	e0bff017 	ldw	r2,-64(fp)
    5350:	10800117 	ldw	r2,4(r2)
    5354:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    5358:	e0bff517 	ldw	r2,-44(fp)
    535c:	1080058b 	ldhu	r2,22(r2)
    5360:	10bfffcc 	andi	r2,r2,65535
    5364:	10002426 	beq	r2,zero,53f8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    5368:	e0bffe17 	ldw	r2,-8(fp)
    536c:	10c00104 	addi	r3,r2,4
    5370:	e0fffe15 	stw	r3,-8(fp)
    5374:	e0fff517 	ldw	r3,-44(fp)
    5378:	18c00417 	ldw	r3,16(r3)
    537c:	19400104 	addi	r5,r3,4
    5380:	e13ff517 	ldw	r4,-44(fp)
    5384:	21400415 	stw	r5,16(r4)
    5388:	18c00017 	ldw	r3,0(r3)
    538c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    5390:	e0bff517 	ldw	r2,-44(fp)
    5394:	10c00417 	ldw	r3,16(r2)
    5398:	e0bff517 	ldw	r2,-44(fp)
    539c:	10800217 	ldw	r2,8(r2)
    53a0:	1880041e 	bne	r3,r2,53b4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    53a4:	e0bff517 	ldw	r2,-44(fp)
    53a8:	10c00117 	ldw	r3,4(r2)
    53ac:	e0bff517 	ldw	r2,-44(fp)
    53b0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    53b4:	e0bff517 	ldw	r2,-44(fp)
    53b8:	1080058b 	ldhu	r2,22(r2)
    53bc:	10bfffc4 	addi	r2,r2,-1
    53c0:	1007883a 	mov	r3,r2
    53c4:	e0bff517 	ldw	r2,-44(fp)
    53c8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    53cc:	e0bffd17 	ldw	r2,-12(fp)
    53d0:	10c00104 	addi	r3,r2,4
    53d4:	e0fffd15 	stw	r3,-12(fp)
    53d8:	e0fff017 	ldw	r3,-64(fp)
    53dc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    53e0:	00800044 	movi	r2,1
    53e4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    53e8:	e0bff18b 	ldhu	r2,-58(fp)
    53ec:	10800044 	addi	r2,r2,1
    53f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    53f4:	00000f06 	br	5434 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    53f8:	e0bff203 	ldbu	r2,-56(fp)
    53fc:	10800114 	ori	r2,r2,4
    5400:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5404:	00000b06 	br	5434 <OSEventPendMulti+0x388>
    5408:	e0bff317 	ldw	r2,-52(fp)
    540c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5410:	e0bff417 	ldw	r2,-48(fp)
    5414:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    5418:	e0bffd17 	ldw	r2,-12(fp)
    541c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    5420:	e0800217 	ldw	r2,8(fp)
    5424:	00c00044 	movi	r3,1
    5428:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    542c:	e0bff18b 	ldhu	r2,-58(fp)
    5430:	00009d06 	br	56a8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    5434:	e0bfef17 	ldw	r2,-68(fp)
    5438:	10800104 	addi	r2,r2,4
    543c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    5440:	e0bfef17 	ldw	r2,-68(fp)
    5444:	10800017 	ldw	r2,0(r2)
    5448:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    544c:	e0bff017 	ldw	r2,-64(fp)
    5450:	103f7d1e 	bne	r2,zero,5248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005248>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    5454:	e0bff103 	ldbu	r2,-60(fp)
    5458:	10800058 	cmpnei	r2,r2,1
    545c:	10000a1e 	bne	r2,zero,5488 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    5460:	e0bffd17 	ldw	r2,-12(fp)
    5464:	10000015 	stw	zero,0(r2)
    5468:	e0bff317 	ldw	r2,-52(fp)
    546c:	e0bff615 	stw	r2,-40(fp)
    5470:	e0bff617 	ldw	r2,-40(fp)
    5474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    5478:	e0800217 	ldw	r2,8(fp)
    547c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    5480:	e0bff18b 	ldhu	r2,-58(fp)
    5484:	00008806 	br	56a8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    5488:	d0a7e117 	ldw	r2,-24700(gp)
    548c:	d0e7e117 	ldw	r3,-24700(gp)
    5490:	19000c03 	ldbu	r4,48(r3)
    5494:	e0fff203 	ldbu	r3,-56(fp)
    5498:	20c6b03a 	or	r3,r4,r3
    549c:	1809883a 	mov	r4,r3
    54a0:	00ffe004 	movi	r3,-128
    54a4:	20c6b03a 	or	r3,r4,r3
    54a8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    54ac:	d0a7e117 	ldw	r2,-24700(gp)
    54b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    54b4:	d0a7e117 	ldw	r2,-24700(gp)
    54b8:	e0ffff0b 	ldhu	r3,-4(fp)
    54bc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    54c0:	e13ffc17 	ldw	r4,-16(fp)
    54c4:	0005fe80 	call	5fe8 <OS_EventTaskWaitMulti>
    54c8:	e0bff317 	ldw	r2,-52(fp)
    54cc:	e0bff915 	stw	r2,-28(fp)
    54d0:	e0bff917 	ldw	r2,-28(fp)
    54d4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    54d8:	000678c0 	call	678c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54dc:	0005303a 	rdctl	r2,status
    54e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54e4:	e0fff717 	ldw	r3,-36(fp)
    54e8:	00bfff84 	movi	r2,-2
    54ec:	1884703a 	and	r2,r3,r2
    54f0:	1001703a 	wrctl	status,r2
  
  return context;
    54f4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    54f8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    54fc:	d0a7e117 	ldw	r2,-24700(gp)
    5500:	10800c43 	ldbu	r2,49(r2)
    5504:	10803fcc 	andi	r2,r2,255
    5508:	10000226 	beq	r2,zero,5514 <OSEventPendMulti+0x468>
    550c:	108000a0 	cmpeqi	r2,r2,2
    5510:	10001826 	beq	r2,zero,5574 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    5514:	d0a7e117 	ldw	r2,-24700(gp)
    5518:	10800717 	ldw	r2,28(r2)
    551c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    5520:	e0bff017 	ldw	r2,-64(fp)
    5524:	10000b26 	beq	r2,zero,5554 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    5528:	e0bffd17 	ldw	r2,-12(fp)
    552c:	10c00104 	addi	r3,r2,4
    5530:	e0fffd15 	stw	r3,-12(fp)
    5534:	e0fff017 	ldw	r3,-64(fp)
    5538:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    553c:	e0bffd17 	ldw	r2,-12(fp)
    5540:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    5544:	e0bff18b 	ldhu	r2,-58(fp)
    5548:	10800044 	addi	r2,r2,1
    554c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    5550:	00000d06 	br	5588 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    5554:	d0a7e117 	ldw	r2,-24700(gp)
    5558:	00c00044 	movi	r3,1
    555c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5560:	d0a7e117 	ldw	r2,-24700(gp)
    5564:	e17ffc17 	ldw	r5,-16(fp)
    5568:	1009883a 	mov	r4,r2
    556c:	00061f00 	call	61f0 <OS_EventTaskRemoveMulti>
             }
			 break;
    5570:	00000506 	br	5588 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5574:	d0a7e117 	ldw	r2,-24700(gp)
    5578:	e17ffc17 	ldw	r5,-16(fp)
    557c:	1009883a 	mov	r4,r2
    5580:	00061f00 	call	61f0 <OS_EventTaskRemoveMulti>
             break;
    5584:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    5588:	d0a7e117 	ldw	r2,-24700(gp)
    558c:	10800c43 	ldbu	r2,49(r2)
    5590:	10803fcc 	andi	r2,r2,255
    5594:	10000326 	beq	r2,zero,55a4 <OSEventPendMulti+0x4f8>
    5598:	108000a0 	cmpeqi	r2,r2,2
    559c:	1000231e 	bne	r2,zero,562c <OSEventPendMulti+0x580>
    55a0:	00002a06 	br	564c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    55a4:	e0bff017 	ldw	r2,-64(fp)
    55a8:	10800003 	ldbu	r2,0(r2)
    55ac:	10803fcc 	andi	r2,r2,255
    55b0:	0080100e 	bge	zero,r2,55f4 <OSEventPendMulti+0x548>
    55b4:	10c000d0 	cmplti	r3,r2,3
    55b8:	1800071e 	bne	r3,zero,55d8 <OSEventPendMulti+0x52c>
    55bc:	108000e0 	cmpeqi	r2,r2,3
    55c0:	10000c26 	beq	r2,zero,55f4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    55c4:	e0bffe17 	ldw	r2,-8(fp)
    55c8:	10c00104 	addi	r3,r2,4
    55cc:	e0fffe15 	stw	r3,-8(fp)
    55d0:	10000015 	stw	zero,0(r2)
                      break;
    55d4:	00001206 	br	5620 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    55d8:	e0bffe17 	ldw	r2,-8(fp)
    55dc:	10c00104 	addi	r3,r2,4
    55e0:	e0fffe15 	stw	r3,-8(fp)
    55e4:	d0e7e117 	ldw	r3,-24700(gp)
    55e8:	18c00917 	ldw	r3,36(r3)
    55ec:	10c00015 	stw	r3,0(r2)
                      break;
    55f0:	00000b06 	br	5620 <OSEventPendMulti+0x574>
    55f4:	e0bff317 	ldw	r2,-52(fp)
    55f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55fc:	e0bff817 	ldw	r2,-32(fp)
    5600:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    5604:	e0bffd17 	ldw	r2,-12(fp)
    5608:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    560c:	e0800217 	ldw	r2,8(fp)
    5610:	00c00044 	movi	r3,1
    5614:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    5618:	e0bff18b 	ldhu	r2,-58(fp)
    561c:	00002206 	br	56a8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    5620:	e0800217 	ldw	r2,8(fp)
    5624:	10000005 	stb	zero,0(r2)
             break;
    5628:	00001006 	br	566c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    562c:	e0bffe17 	ldw	r2,-8(fp)
    5630:	10c00104 	addi	r3,r2,4
    5634:	e0fffe15 	stw	r3,-8(fp)
    5638:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    563c:	e0800217 	ldw	r2,8(fp)
    5640:	00c00384 	movi	r3,14
    5644:	10c00005 	stb	r3,0(r2)
             break;
    5648:	00000806 	br	566c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    564c:	e0bffe17 	ldw	r2,-8(fp)
    5650:	10c00104 	addi	r3,r2,4
    5654:	e0fffe15 	stw	r3,-8(fp)
    5658:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    565c:	e0800217 	ldw	r2,8(fp)
    5660:	00c00284 	movi	r3,10
    5664:	10c00005 	stb	r3,0(r2)
             break;
    5668:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    566c:	d0a7e117 	ldw	r2,-24700(gp)
    5670:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    5674:	d0a7e117 	ldw	r2,-24700(gp)
    5678:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    567c:	d0a7e117 	ldw	r2,-24700(gp)
    5680:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    5684:	d0a7e117 	ldw	r2,-24700(gp)
    5688:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    568c:	d0a7e117 	ldw	r2,-24700(gp)
    5690:	10000915 	stw	zero,36(r2)
    5694:	e0bff317 	ldw	r2,-52(fp)
    5698:	e0bffa15 	stw	r2,-24(fp)
    569c:	e0bffa17 	ldw	r2,-24(fp)
    56a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    56a4:	e0bff18b 	ldhu	r2,-58(fp)
}
    56a8:	e037883a 	mov	sp,fp
    56ac:	dfc00117 	ldw	ra,4(sp)
    56b0:	df000017 	ldw	fp,0(sp)
    56b4:	dec00204 	addi	sp,sp,8
    56b8:	f800283a 	ret

000056bc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    56bc:	defffe04 	addi	sp,sp,-8
    56c0:	dfc00115 	stw	ra,4(sp)
    56c4:	df000015 	stw	fp,0(sp)
    56c8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    56cc:	00109000 	call	10900 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    56d0:	00064380 	call	6438 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    56d4:	00064800 	call	6480 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    56d8:	00065ec0 	call	65ec <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    56dc:	00063580 	call	6358 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    56e0:	000849c0 	call	849c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    56e4:	00098640 	call	9864 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    56e8:	000a98c0 	call	a98c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    56ec:	00064ec0 	call	64ec <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    56f0:	000656c0 	call	656c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    56f4:	00109200 	call	10920 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    56f8:	0006e700 	call	6e70 <OSDebugInit>
#endif
}
    56fc:	0001883a 	nop
    5700:	e037883a 	mov	sp,fp
    5704:	dfc00117 	ldw	ra,4(sp)
    5708:	df000017 	ldw	fp,0(sp)
    570c:	dec00204 	addi	sp,sp,8
    5710:	f800283a 	ret

00005714 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    5714:	deffff04 	addi	sp,sp,-4
    5718:	df000015 	stw	fp,0(sp)
    571c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    5720:	d0a7d243 	ldbu	r2,-24759(gp)
    5724:	10803fcc 	andi	r2,r2,255
    5728:	10800058 	cmpnei	r2,r2,1
    572c:	1000071e 	bne	r2,zero,574c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    5730:	d0a7e003 	ldbu	r2,-24704(gp)
    5734:	10803fcc 	andi	r2,r2,255
    5738:	10803fe0 	cmpeqi	r2,r2,255
    573c:	1000031e 	bne	r2,zero,574c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    5740:	d0a7e003 	ldbu	r2,-24704(gp)
    5744:	10800044 	addi	r2,r2,1
    5748:	d0a7e005 	stb	r2,-24704(gp)
        }
    }
}
    574c:	0001883a 	nop
    5750:	e037883a 	mov	sp,fp
    5754:	df000017 	ldw	fp,0(sp)
    5758:	dec00104 	addi	sp,sp,4
    575c:	f800283a 	ret

00005760 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    5760:	defffb04 	addi	sp,sp,-20
    5764:	dfc00415 	stw	ra,16(sp)
    5768:	df000315 	stw	fp,12(sp)
    576c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5770:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    5774:	d0a7d243 	ldbu	r2,-24759(gp)
    5778:	10803fcc 	andi	r2,r2,255
    577c:	10800058 	cmpnei	r2,r2,1
    5780:	10002f1e 	bne	r2,zero,5840 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5784:	0005303a 	rdctl	r2,status
    5788:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    578c:	e0ffff17 	ldw	r3,-4(fp)
    5790:	00bfff84 	movi	r2,-2
    5794:	1884703a 	and	r2,r3,r2
    5798:	1001703a 	wrctl	status,r2
  
  return context;
    579c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    57a0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    57a4:	d0a7e003 	ldbu	r2,-24704(gp)
    57a8:	10803fcc 	andi	r2,r2,255
    57ac:	10000326 	beq	r2,zero,57bc <OSIntExit+0x5c>
            OSIntNesting--;
    57b0:	d0a7e003 	ldbu	r2,-24704(gp)
    57b4:	10bfffc4 	addi	r2,r2,-1
    57b8:	d0a7e005 	stb	r2,-24704(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    57bc:	d0a7e003 	ldbu	r2,-24704(gp)
    57c0:	10803fcc 	andi	r2,r2,255
    57c4:	10001a1e 	bne	r2,zero,5830 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    57c8:	d0a7d203 	ldbu	r2,-24760(gp)
    57cc:	10803fcc 	andi	r2,r2,255
    57d0:	1000171e 	bne	r2,zero,5830 <OSIntExit+0xd0>
                OS_SchedNew();
    57d4:	000685c0 	call	685c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    57d8:	d0e7d403 	ldbu	r3,-24752(gp)
    57dc:	d0a7d443 	ldbu	r2,-24751(gp)
    57e0:	18c03fcc 	andi	r3,r3,255
    57e4:	10803fcc 	andi	r2,r2,255
    57e8:	18801126 	beq	r3,r2,5830 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    57ec:	d0a7d403 	ldbu	r2,-24752(gp)
    57f0:	10c03fcc 	andi	r3,r2,255
    57f4:	008000b4 	movhi	r2,2
    57f8:	10b8c204 	addi	r2,r2,-7416
    57fc:	18c7883a 	add	r3,r3,r3
    5800:	18c7883a 	add	r3,r3,r3
    5804:	10c5883a 	add	r2,r2,r3
    5808:	10800017 	ldw	r2,0(r2)
    580c:	d0a7dc15 	stw	r2,-24720(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    5810:	d0a7dc17 	ldw	r2,-24720(gp)
    5814:	10c00e17 	ldw	r3,56(r2)
    5818:	18c00044 	addi	r3,r3,1
    581c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    5820:	d0a7d717 	ldw	r2,-24740(gp)
    5824:	10800044 	addi	r2,r2,1
    5828:	d0a7d715 	stw	r2,-24740(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    582c:	001062c0 	call	1062c <OSCtxSw>
    5830:	e0bffd17 	ldw	r2,-12(fp)
    5834:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5838:	e0bffe17 	ldw	r2,-8(fp)
    583c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    5840:	0001883a 	nop
    5844:	e037883a 	mov	sp,fp
    5848:	dfc00117 	ldw	ra,4(sp)
    584c:	df000017 	ldw	fp,0(sp)
    5850:	dec00204 	addi	sp,sp,8
    5854:	f800283a 	ret

00005858 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    5858:	defffc04 	addi	sp,sp,-16
    585c:	df000315 	stw	fp,12(sp)
    5860:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5864:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    5868:	d0a7d243 	ldbu	r2,-24759(gp)
    586c:	10803fcc 	andi	r2,r2,255
    5870:	10800058 	cmpnei	r2,r2,1
    5874:	1000161e 	bne	r2,zero,58d0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5878:	0005303a 	rdctl	r2,status
    587c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5880:	e0ffff17 	ldw	r3,-4(fp)
    5884:	00bfff84 	movi	r2,-2
    5888:	1884703a 	and	r2,r3,r2
    588c:	1001703a 	wrctl	status,r2
  
  return context;
    5890:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    5894:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    5898:	d0a7e003 	ldbu	r2,-24704(gp)
    589c:	10803fcc 	andi	r2,r2,255
    58a0:	1000071e 	bne	r2,zero,58c0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    58a4:	d0a7d203 	ldbu	r2,-24760(gp)
    58a8:	10803fcc 	andi	r2,r2,255
    58ac:	10803fe0 	cmpeqi	r2,r2,255
    58b0:	1000031e 	bne	r2,zero,58c0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    58b4:	d0a7d203 	ldbu	r2,-24760(gp)
    58b8:	10800044 	addi	r2,r2,1
    58bc:	d0a7d205 	stb	r2,-24760(gp)
    58c0:	e0bffd17 	ldw	r2,-12(fp)
    58c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    58c8:	e0bffe17 	ldw	r2,-8(fp)
    58cc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    58d0:	0001883a 	nop
    58d4:	e037883a 	mov	sp,fp
    58d8:	df000017 	ldw	fp,0(sp)
    58dc:	dec00104 	addi	sp,sp,4
    58e0:	f800283a 	ret

000058e4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    58e4:	defff804 	addi	sp,sp,-32
    58e8:	dfc00715 	stw	ra,28(sp)
    58ec:	df000615 	stw	fp,24(sp)
    58f0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    58f4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    58f8:	d0a7d243 	ldbu	r2,-24759(gp)
    58fc:	10803fcc 	andi	r2,r2,255
    5900:	10800058 	cmpnei	r2,r2,1
    5904:	1000281e 	bne	r2,zero,59a8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5908:	0005303a 	rdctl	r2,status
    590c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5910:	e0ffff17 	ldw	r3,-4(fp)
    5914:	00bfff84 	movi	r2,-2
    5918:	1884703a 	and	r2,r3,r2
    591c:	1001703a 	wrctl	status,r2
  
  return context;
    5920:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    5924:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    5928:	d0a7d203 	ldbu	r2,-24760(gp)
    592c:	10803fcc 	andi	r2,r2,255
    5930:	10001926 	beq	r2,zero,5998 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    5934:	d0a7d203 	ldbu	r2,-24760(gp)
    5938:	10bfffc4 	addi	r2,r2,-1
    593c:	d0a7d205 	stb	r2,-24760(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    5940:	d0a7d203 	ldbu	r2,-24760(gp)
    5944:	10803fcc 	andi	r2,r2,255
    5948:	10000e1e 	bne	r2,zero,5984 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    594c:	d0a7e003 	ldbu	r2,-24704(gp)
    5950:	10803fcc 	andi	r2,r2,255
    5954:	1000061e 	bne	r2,zero,5970 <OSSchedUnlock+0x8c>
    5958:	e0bffa17 	ldw	r2,-24(fp)
    595c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5960:	e0bffb17 	ldw	r2,-20(fp)
    5964:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    5968:	000678c0 	call	678c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    596c:	00000e06 	br	59a8 <OSSchedUnlock+0xc4>
    5970:	e0bffa17 	ldw	r2,-24(fp)
    5974:	e0bffc15 	stw	r2,-16(fp)
    5978:	e0bffc17 	ldw	r2,-16(fp)
    597c:	1001703a 	wrctl	status,r2
    5980:	00000906 	br	59a8 <OSSchedUnlock+0xc4>
    5984:	e0bffa17 	ldw	r2,-24(fp)
    5988:	e0bffd15 	stw	r2,-12(fp)
    598c:	e0bffd17 	ldw	r2,-12(fp)
    5990:	1001703a 	wrctl	status,r2
    5994:	00000406 	br	59a8 <OSSchedUnlock+0xc4>
    5998:	e0bffa17 	ldw	r2,-24(fp)
    599c:	e0bffe15 	stw	r2,-8(fp)
    59a0:	e0bffe17 	ldw	r2,-8(fp)
    59a4:	1001703a 	wrctl	status,r2
    59a8:	0001883a 	nop
    59ac:	e037883a 	mov	sp,fp
    59b0:	dfc00117 	ldw	ra,4(sp)
    59b4:	df000017 	ldw	fp,0(sp)
    59b8:	dec00204 	addi	sp,sp,8
    59bc:	f800283a 	ret

000059c0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    59c0:	defffe04 	addi	sp,sp,-8
    59c4:	dfc00115 	stw	ra,4(sp)
    59c8:	df000015 	stw	fp,0(sp)
    59cc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    59d0:	d0a7d243 	ldbu	r2,-24759(gp)
    59d4:	10803fcc 	andi	r2,r2,255
    59d8:	10000f1e 	bne	r2,zero,5a18 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    59dc:	000685c0 	call	685c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    59e0:	d0a7d403 	ldbu	r2,-24752(gp)
    59e4:	d0a7d445 	stb	r2,-24751(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    59e8:	d0a7d403 	ldbu	r2,-24752(gp)
    59ec:	10c03fcc 	andi	r3,r2,255
    59f0:	008000b4 	movhi	r2,2
    59f4:	10b8c204 	addi	r2,r2,-7416
    59f8:	18c7883a 	add	r3,r3,r3
    59fc:	18c7883a 	add	r3,r3,r3
    5a00:	10c5883a 	add	r2,r2,r3
    5a04:	10800017 	ldw	r2,0(r2)
    5a08:	d0a7dc15 	stw	r2,-24720(gp)
        OSTCBCur      = OSTCBHighRdy;
    5a0c:	d0a7dc17 	ldw	r2,-24720(gp)
    5a10:	d0a7e115 	stw	r2,-24700(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    5a14:	00106b80 	call	106b8 <OSStartHighRdy>
    }
}
    5a18:	0001883a 	nop
    5a1c:	e037883a 	mov	sp,fp
    5a20:	dfc00117 	ldw	ra,4(sp)
    5a24:	df000017 	ldw	fp,0(sp)
    5a28:	dec00204 	addi	sp,sp,8
    5a2c:	f800283a 	ret

00005a30 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    5a30:	defff904 	addi	sp,sp,-28
    5a34:	dfc00615 	stw	ra,24(sp)
    5a38:	df000515 	stw	fp,20(sp)
    5a3c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a40:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    5a44:	01000084 	movi	r4,2
    5a48:	000cc000 	call	cc00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a4c:	0005303a 	rdctl	r2,status
    5a50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a54:	e0fffc17 	ldw	r3,-16(fp)
    5a58:	00bfff84 	movi	r2,-2
    5a5c:	1884703a 	and	r2,r3,r2
    5a60:	1001703a 	wrctl	status,r2
  
  return context;
    5a64:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    5a68:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    5a6c:	d027d315 	stw	zero,-24756(gp)
    5a70:	e0bffb17 	ldw	r2,-20(fp)
    5a74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a78:	e0bffd17 	ldw	r2,-12(fp)
    5a7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    5a80:	0009883a 	mov	r4,zero
    5a84:	000cc000 	call	cc00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a88:	0005303a 	rdctl	r2,status
    5a8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a90:	e0fffe17 	ldw	r3,-8(fp)
    5a94:	00bfff84 	movi	r2,-2
    5a98:	1884703a 	and	r2,r3,r2
    5a9c:	1001703a 	wrctl	status,r2
  
  return context;
    5aa0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    5aa4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    5aa8:	d0a7d317 	ldw	r2,-24756(gp)
    5aac:	d0a7d815 	stw	r2,-24736(gp)
    OSStatRdy    = OS_TRUE;
    5ab0:	00800044 	movi	r2,1
    5ab4:	d0a7e405 	stb	r2,-24688(gp)
    5ab8:	e0bffb17 	ldw	r2,-20(fp)
    5abc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ac0:	e0bfff17 	ldw	r2,-4(fp)
    5ac4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    5ac8:	0001883a 	nop
    5acc:	e037883a 	mov	sp,fp
    5ad0:	dfc00117 	ldw	ra,4(sp)
    5ad4:	df000017 	ldw	fp,0(sp)
    5ad8:	dec00204 	addi	sp,sp,8
    5adc:	f800283a 	ret

00005ae0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    5ae0:	defff704 	addi	sp,sp,-36
    5ae4:	dfc00815 	stw	ra,32(sp)
    5ae8:	df000715 	stw	fp,28(sp)
    5aec:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5af0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    5af4:	00108e00 	call	108e0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5af8:	0005303a 	rdctl	r2,status
    5afc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b00:	e0fffd17 	ldw	r3,-12(fp)
    5b04:	00bfff84 	movi	r2,-2
    5b08:	1884703a 	and	r2,r3,r2
    5b0c:	1001703a 	wrctl	status,r2
  
  return context;
    5b10:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    5b14:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    5b18:	d0a7e217 	ldw	r2,-24696(gp)
    5b1c:	10800044 	addi	r2,r2,1
    5b20:	d0a7e215 	stw	r2,-24696(gp)
    5b24:	e0bffb17 	ldw	r2,-20(fp)
    5b28:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b2c:	e0bfff17 	ldw	r2,-4(fp)
    5b30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    5b34:	d0a7d243 	ldbu	r2,-24759(gp)
    5b38:	10803fcc 	andi	r2,r2,255
    5b3c:	10800058 	cmpnei	r2,r2,1
    5b40:	10006a1e 	bne	r2,zero,5cec <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    5b44:	d0a7d603 	ldbu	r2,-24744(gp)
    5b48:	10803fcc 	andi	r2,r2,255
    5b4c:	10c00060 	cmpeqi	r3,r2,1
    5b50:	1800061e 	bne	r3,zero,5b6c <OSTimeTick+0x8c>
    5b54:	10c000a0 	cmpeqi	r3,r2,2
    5b58:	1800061e 	bne	r3,zero,5b74 <OSTimeTick+0x94>
    5b5c:	10000a1e 	bne	r2,zero,5b88 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    5b60:	00800044 	movi	r2,1
    5b64:	e0bffa05 	stb	r2,-24(fp)
                 break;
    5b68:	00000b06 	br	5b98 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    5b6c:	e03ffa05 	stb	zero,-24(fp)
                 break;
    5b70:	00000906 	br	5b98 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    5b74:	00800044 	movi	r2,1
    5b78:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    5b7c:	00800044 	movi	r2,1
    5b80:	d0a7d605 	stb	r2,-24744(gp)
                 break;
    5b84:	00000406 	br	5b98 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    5b88:	00800044 	movi	r2,1
    5b8c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    5b90:	d027d605 	stb	zero,-24744(gp)
                 break;
    5b94:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    5b98:	e0bffa03 	ldbu	r2,-24(fp)
    5b9c:	10005226 	beq	r2,zero,5ce8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    5ba0:	d0a7d517 	ldw	r2,-24748(gp)
    5ba4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    5ba8:	00004906 	br	5cd0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5bac:	0005303a 	rdctl	r2,status
    5bb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5bb4:	e0fffc17 	ldw	r3,-16(fp)
    5bb8:	00bfff84 	movi	r2,-2
    5bbc:	1884703a 	and	r2,r3,r2
    5bc0:	1001703a 	wrctl	status,r2
  
  return context;
    5bc4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    5bc8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    5bcc:	e0bff917 	ldw	r2,-28(fp)
    5bd0:	10800b8b 	ldhu	r2,46(r2)
    5bd4:	10bfffcc 	andi	r2,r2,65535
    5bd8:	10003626 	beq	r2,zero,5cb4 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    5bdc:	e0bff917 	ldw	r2,-28(fp)
    5be0:	10800b8b 	ldhu	r2,46(r2)
    5be4:	10bfffc4 	addi	r2,r2,-1
    5be8:	1007883a 	mov	r3,r2
    5bec:	e0bff917 	ldw	r2,-28(fp)
    5bf0:	10c00b8d 	sth	r3,46(r2)
    5bf4:	e0bff917 	ldw	r2,-28(fp)
    5bf8:	10800b8b 	ldhu	r2,46(r2)
    5bfc:	10bfffcc 	andi	r2,r2,65535
    5c00:	10002c1e 	bne	r2,zero,5cb4 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    5c04:	e0bff917 	ldw	r2,-28(fp)
    5c08:	10800c03 	ldbu	r2,48(r2)
    5c0c:	10803fcc 	andi	r2,r2,255
    5c10:	10800dcc 	andi	r2,r2,55
    5c14:	10000b26 	beq	r2,zero,5c44 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    5c18:	e0bff917 	ldw	r2,-28(fp)
    5c1c:	10c00c03 	ldbu	r3,48(r2)
    5c20:	00bff204 	movi	r2,-56
    5c24:	1884703a 	and	r2,r3,r2
    5c28:	1007883a 	mov	r3,r2
    5c2c:	e0bff917 	ldw	r2,-28(fp)
    5c30:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    5c34:	e0bff917 	ldw	r2,-28(fp)
    5c38:	00c00044 	movi	r3,1
    5c3c:	10c00c45 	stb	r3,49(r2)
    5c40:	00000206 	br	5c4c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    5c44:	e0bff917 	ldw	r2,-28(fp)
    5c48:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    5c4c:	e0bff917 	ldw	r2,-28(fp)
    5c50:	10800c03 	ldbu	r2,48(r2)
    5c54:	10803fcc 	andi	r2,r2,255
    5c58:	1080020c 	andi	r2,r2,8
    5c5c:	1000151e 	bne	r2,zero,5cb4 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    5c60:	e0bff917 	ldw	r2,-28(fp)
    5c64:	10c00d83 	ldbu	r3,54(r2)
    5c68:	d0a7de03 	ldbu	r2,-24712(gp)
    5c6c:	1884b03a 	or	r2,r3,r2
    5c70:	d0a7de05 	stb	r2,-24712(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5c74:	e0bff917 	ldw	r2,-28(fp)
    5c78:	10800d03 	ldbu	r2,52(r2)
    5c7c:	10c03fcc 	andi	r3,r2,255
    5c80:	e0bff917 	ldw	r2,-28(fp)
    5c84:	10800d03 	ldbu	r2,52(r2)
    5c88:	11003fcc 	andi	r4,r2,255
    5c8c:	d0a7de44 	addi	r2,gp,-24711
    5c90:	2085883a 	add	r2,r4,r2
    5c94:	11000003 	ldbu	r4,0(r2)
    5c98:	e0bff917 	ldw	r2,-28(fp)
    5c9c:	10800d43 	ldbu	r2,53(r2)
    5ca0:	2084b03a 	or	r2,r4,r2
    5ca4:	1009883a 	mov	r4,r2
    5ca8:	d0a7de44 	addi	r2,gp,-24711
    5cac:	1885883a 	add	r2,r3,r2
    5cb0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    5cb4:	e0bff917 	ldw	r2,-28(fp)
    5cb8:	10800517 	ldw	r2,20(r2)
    5cbc:	e0bff915 	stw	r2,-28(fp)
    5cc0:	e0bffb17 	ldw	r2,-20(fp)
    5cc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5cc8:	e0bffe17 	ldw	r2,-8(fp)
    5ccc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    5cd0:	e0bff917 	ldw	r2,-28(fp)
    5cd4:	10800c83 	ldbu	r2,50(r2)
    5cd8:	10803fcc 	andi	r2,r2,255
    5cdc:	10800518 	cmpnei	r2,r2,20
    5ce0:	103fb21e 	bne	r2,zero,5bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bac>
    5ce4:	00000106 	br	5cec <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    5ce8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    5cec:	e037883a 	mov	sp,fp
    5cf0:	dfc00117 	ldw	ra,4(sp)
    5cf4:	df000017 	ldw	fp,0(sp)
    5cf8:	dec00204 	addi	sp,sp,8
    5cfc:	f800283a 	ret

00005d00 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    5d00:	deffff04 	addi	sp,sp,-4
    5d04:	df000015 	stw	fp,0(sp)
    5d08:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    5d0c:	00804784 	movi	r2,286
}
    5d10:	e037883a 	mov	sp,fp
    5d14:	df000017 	ldw	fp,0(sp)
    5d18:	dec00104 	addi	sp,sp,4
    5d1c:	f800283a 	ret

00005d20 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    5d20:	deffff04 	addi	sp,sp,-4
    5d24:	df000015 	stw	fp,0(sp)
    5d28:	d839883a 	mov	fp,sp
}
    5d2c:	0001883a 	nop
    5d30:	e037883a 	mov	sp,fp
    5d34:	df000017 	ldw	fp,0(sp)
    5d38:	dec00104 	addi	sp,sp,4
    5d3c:	f800283a 	ret

00005d40 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    5d40:	defff804 	addi	sp,sp,-32
    5d44:	dfc00715 	stw	ra,28(sp)
    5d48:	df000615 	stw	fp,24(sp)
    5d4c:	df000604 	addi	fp,sp,24
    5d50:	e13ffc15 	stw	r4,-16(fp)
    5d54:	e17ffd15 	stw	r5,-12(fp)
    5d58:	3007883a 	mov	r3,r6
    5d5c:	3805883a 	mov	r2,r7
    5d60:	e0fffe05 	stb	r3,-8(fp)
    5d64:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    5d68:	e0bffc17 	ldw	r2,-16(fp)
    5d6c:	10800283 	ldbu	r2,10(r2)
    5d70:	10c03fcc 	andi	r3,r2,255
    5d74:	00800074 	movhi	r2,1
    5d78:	10844404 	addi	r2,r2,4368
    5d7c:	10c5883a 	add	r2,r2,r3
    5d80:	10800003 	ldbu	r2,0(r2)
    5d84:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    5d88:	e0bffa03 	ldbu	r2,-24(fp)
    5d8c:	e0fffc17 	ldw	r3,-16(fp)
    5d90:	1885883a 	add	r2,r3,r2
    5d94:	108002c4 	addi	r2,r2,11
    5d98:	10800003 	ldbu	r2,0(r2)
    5d9c:	10c03fcc 	andi	r3,r2,255
    5da0:	00800074 	movhi	r2,1
    5da4:	10844404 	addi	r2,r2,4368
    5da8:	10c5883a 	add	r2,r2,r3
    5dac:	10800003 	ldbu	r2,0(r2)
    5db0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    5db4:	e0bffa03 	ldbu	r2,-24(fp)
    5db8:	100490fa 	slli	r2,r2,3
    5dbc:	1007883a 	mov	r3,r2
    5dc0:	e0bffa43 	ldbu	r2,-23(fp)
    5dc4:	1885883a 	add	r2,r3,r2
    5dc8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    5dcc:	e0fffa83 	ldbu	r3,-22(fp)
    5dd0:	008000b4 	movhi	r2,2
    5dd4:	10b8c204 	addi	r2,r2,-7416
    5dd8:	18c7883a 	add	r3,r3,r3
    5ddc:	18c7883a 	add	r3,r3,r3
    5de0:	10c5883a 	add	r2,r2,r3
    5de4:	10800017 	ldw	r2,0(r2)
    5de8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    5dec:	e0bffb17 	ldw	r2,-20(fp)
    5df0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    5df4:	e0bffb17 	ldw	r2,-20(fp)
    5df8:	e0fffd17 	ldw	r3,-12(fp)
    5dfc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    5e00:	e0bffb17 	ldw	r2,-20(fp)
    5e04:	10800c03 	ldbu	r2,48(r2)
    5e08:	1007883a 	mov	r3,r2
    5e0c:	e0bffe03 	ldbu	r2,-8(fp)
    5e10:	0084303a 	nor	r2,zero,r2
    5e14:	1884703a 	and	r2,r3,r2
    5e18:	1007883a 	mov	r3,r2
    5e1c:	e0bffb17 	ldw	r2,-20(fp)
    5e20:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    5e24:	e0bffb17 	ldw	r2,-20(fp)
    5e28:	e0ffff03 	ldbu	r3,-4(fp)
    5e2c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    5e30:	e0bffb17 	ldw	r2,-20(fp)
    5e34:	10800c03 	ldbu	r2,48(r2)
    5e38:	10803fcc 	andi	r2,r2,255
    5e3c:	1080020c 	andi	r2,r2,8
    5e40:	1000111e 	bne	r2,zero,5e88 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    5e44:	e0bffb17 	ldw	r2,-20(fp)
    5e48:	10c00d83 	ldbu	r3,54(r2)
    5e4c:	d0a7de03 	ldbu	r2,-24712(gp)
    5e50:	1884b03a 	or	r2,r3,r2
    5e54:	d0a7de05 	stb	r2,-24712(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    5e58:	e0fffa03 	ldbu	r3,-24(fp)
    5e5c:	e13ffa03 	ldbu	r4,-24(fp)
    5e60:	d0a7de44 	addi	r2,gp,-24711
    5e64:	2085883a 	add	r2,r4,r2
    5e68:	11000003 	ldbu	r4,0(r2)
    5e6c:	e0bffb17 	ldw	r2,-20(fp)
    5e70:	10800d43 	ldbu	r2,53(r2)
    5e74:	2084b03a 	or	r2,r4,r2
    5e78:	1009883a 	mov	r4,r2
    5e7c:	d0a7de44 	addi	r2,gp,-24711
    5e80:	1885883a 	add	r2,r3,r2
    5e84:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    5e88:	e17ffc17 	ldw	r5,-16(fp)
    5e8c:	e13ffb17 	ldw	r4,-20(fp)
    5e90:	00061380 	call	6138 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    5e94:	e0bffb17 	ldw	r2,-20(fp)
    5e98:	10800817 	ldw	r2,32(r2)
    5e9c:	10000826 	beq	r2,zero,5ec0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    5ea0:	e0bffb17 	ldw	r2,-20(fp)
    5ea4:	10800817 	ldw	r2,32(r2)
    5ea8:	100b883a 	mov	r5,r2
    5eac:	e13ffb17 	ldw	r4,-20(fp)
    5eb0:	00061f00 	call	61f0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    5eb4:	e0bffb17 	ldw	r2,-20(fp)
    5eb8:	e0fffc17 	ldw	r3,-16(fp)
    5ebc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    5ec0:	e0bffa83 	ldbu	r2,-22(fp)
}
    5ec4:	e037883a 	mov	sp,fp
    5ec8:	dfc00117 	ldw	ra,4(sp)
    5ecc:	df000017 	ldw	fp,0(sp)
    5ed0:	dec00204 	addi	sp,sp,8
    5ed4:	f800283a 	ret

00005ed8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    5ed8:	defffd04 	addi	sp,sp,-12
    5edc:	df000215 	stw	fp,8(sp)
    5ee0:	df000204 	addi	fp,sp,8
    5ee4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    5ee8:	d0a7e117 	ldw	r2,-24700(gp)
    5eec:	e0ffff17 	ldw	r3,-4(fp)
    5ef0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    5ef4:	d0a7e117 	ldw	r2,-24700(gp)
    5ef8:	10800d03 	ldbu	r2,52(r2)
    5efc:	10803fcc 	andi	r2,r2,255
    5f00:	d0e7e117 	ldw	r3,-24700(gp)
    5f04:	18c00d03 	ldbu	r3,52(r3)
    5f08:	18c03fcc 	andi	r3,r3,255
    5f0c:	e13fff17 	ldw	r4,-4(fp)
    5f10:	20c7883a 	add	r3,r4,r3
    5f14:	18c002c4 	addi	r3,r3,11
    5f18:	19000003 	ldbu	r4,0(r3)
    5f1c:	d0e7e117 	ldw	r3,-24700(gp)
    5f20:	18c00d43 	ldbu	r3,53(r3)
    5f24:	20c6b03a 	or	r3,r4,r3
    5f28:	1809883a 	mov	r4,r3
    5f2c:	e0ffff17 	ldw	r3,-4(fp)
    5f30:	1885883a 	add	r2,r3,r2
    5f34:	108002c4 	addi	r2,r2,11
    5f38:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5f3c:	e0bfff17 	ldw	r2,-4(fp)
    5f40:	10c00283 	ldbu	r3,10(r2)
    5f44:	d0a7e117 	ldw	r2,-24700(gp)
    5f48:	10800d83 	ldbu	r2,54(r2)
    5f4c:	1884b03a 	or	r2,r3,r2
    5f50:	1007883a 	mov	r3,r2
    5f54:	e0bfff17 	ldw	r2,-4(fp)
    5f58:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5f5c:	d0a7e117 	ldw	r2,-24700(gp)
    5f60:	10800d03 	ldbu	r2,52(r2)
    5f64:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5f68:	e0fffe03 	ldbu	r3,-8(fp)
    5f6c:	e13ffe03 	ldbu	r4,-8(fp)
    5f70:	d0a7de44 	addi	r2,gp,-24711
    5f74:	2085883a 	add	r2,r4,r2
    5f78:	10800003 	ldbu	r2,0(r2)
    5f7c:	1009883a 	mov	r4,r2
    5f80:	d0a7e117 	ldw	r2,-24700(gp)
    5f84:	10800d43 	ldbu	r2,53(r2)
    5f88:	0084303a 	nor	r2,zero,r2
    5f8c:	2084703a 	and	r2,r4,r2
    5f90:	1009883a 	mov	r4,r2
    5f94:	d0a7de44 	addi	r2,gp,-24711
    5f98:	1885883a 	add	r2,r3,r2
    5f9c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5fa0:	e0fffe03 	ldbu	r3,-8(fp)
    5fa4:	d0a7de44 	addi	r2,gp,-24711
    5fa8:	1885883a 	add	r2,r3,r2
    5fac:	10800003 	ldbu	r2,0(r2)
    5fb0:	10803fcc 	andi	r2,r2,255
    5fb4:	1000071e 	bne	r2,zero,5fd4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5fb8:	d0a7e117 	ldw	r2,-24700(gp)
    5fbc:	10800d83 	ldbu	r2,54(r2)
    5fc0:	0084303a 	nor	r2,zero,r2
    5fc4:	1007883a 	mov	r3,r2
    5fc8:	d0a7de03 	ldbu	r2,-24712(gp)
    5fcc:	1884703a 	and	r2,r3,r2
    5fd0:	d0a7de05 	stb	r2,-24712(gp)
    }
}
    5fd4:	0001883a 	nop
    5fd8:	e037883a 	mov	sp,fp
    5fdc:	df000017 	ldw	fp,0(sp)
    5fe0:	dec00104 	addi	sp,sp,4
    5fe4:	f800283a 	ret

00005fe8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    5fe8:	defffb04 	addi	sp,sp,-20
    5fec:	df000415 	stw	fp,16(sp)
    5ff0:	df000404 	addi	fp,sp,16
    5ff4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    5ff8:	d0a7e117 	ldw	r2,-24700(gp)
    5ffc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    6000:	d0a7e117 	ldw	r2,-24700(gp)
    6004:	e0ffff17 	ldw	r3,-4(fp)
    6008:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    600c:	e0bfff17 	ldw	r2,-4(fp)
    6010:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    6014:	e0bffc17 	ldw	r2,-16(fp)
    6018:	10800017 	ldw	r2,0(r2)
    601c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    6020:	00002006 	br	60a4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    6024:	d0a7e117 	ldw	r2,-24700(gp)
    6028:	10800d03 	ldbu	r2,52(r2)
    602c:	10803fcc 	andi	r2,r2,255
    6030:	d0e7e117 	ldw	r3,-24700(gp)
    6034:	18c00d03 	ldbu	r3,52(r3)
    6038:	18c03fcc 	andi	r3,r3,255
    603c:	e13ffd17 	ldw	r4,-12(fp)
    6040:	20c7883a 	add	r3,r4,r3
    6044:	18c002c4 	addi	r3,r3,11
    6048:	19000003 	ldbu	r4,0(r3)
    604c:	d0e7e117 	ldw	r3,-24700(gp)
    6050:	18c00d43 	ldbu	r3,53(r3)
    6054:	20c6b03a 	or	r3,r4,r3
    6058:	1809883a 	mov	r4,r3
    605c:	e0fffd17 	ldw	r3,-12(fp)
    6060:	1885883a 	add	r2,r3,r2
    6064:	108002c4 	addi	r2,r2,11
    6068:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    606c:	e0bffd17 	ldw	r2,-12(fp)
    6070:	10c00283 	ldbu	r3,10(r2)
    6074:	d0a7e117 	ldw	r2,-24700(gp)
    6078:	10800d83 	ldbu	r2,54(r2)
    607c:	1884b03a 	or	r2,r3,r2
    6080:	1007883a 	mov	r3,r2
    6084:	e0bffd17 	ldw	r2,-12(fp)
    6088:	10c00285 	stb	r3,10(r2)
        pevents++;
    608c:	e0bffc17 	ldw	r2,-16(fp)
    6090:	10800104 	addi	r2,r2,4
    6094:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    6098:	e0bffc17 	ldw	r2,-16(fp)
    609c:	10800017 	ldw	r2,0(r2)
    60a0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    60a4:	e0bffd17 	ldw	r2,-12(fp)
    60a8:	103fde1e 	bne	r2,zero,6024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006024>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    60ac:	d0a7e117 	ldw	r2,-24700(gp)
    60b0:	10800d03 	ldbu	r2,52(r2)
    60b4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    60b8:	e0fffe03 	ldbu	r3,-8(fp)
    60bc:	e13ffe03 	ldbu	r4,-8(fp)
    60c0:	d0a7de44 	addi	r2,gp,-24711
    60c4:	2085883a 	add	r2,r4,r2
    60c8:	10800003 	ldbu	r2,0(r2)
    60cc:	1009883a 	mov	r4,r2
    60d0:	d0a7e117 	ldw	r2,-24700(gp)
    60d4:	10800d43 	ldbu	r2,53(r2)
    60d8:	0084303a 	nor	r2,zero,r2
    60dc:	2084703a 	and	r2,r4,r2
    60e0:	1009883a 	mov	r4,r2
    60e4:	d0a7de44 	addi	r2,gp,-24711
    60e8:	1885883a 	add	r2,r3,r2
    60ec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    60f0:	e0fffe03 	ldbu	r3,-8(fp)
    60f4:	d0a7de44 	addi	r2,gp,-24711
    60f8:	1885883a 	add	r2,r3,r2
    60fc:	10800003 	ldbu	r2,0(r2)
    6100:	10803fcc 	andi	r2,r2,255
    6104:	1000071e 	bne	r2,zero,6124 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    6108:	d0a7e117 	ldw	r2,-24700(gp)
    610c:	10800d83 	ldbu	r2,54(r2)
    6110:	0084303a 	nor	r2,zero,r2
    6114:	1007883a 	mov	r3,r2
    6118:	d0a7de03 	ldbu	r2,-24712(gp)
    611c:	1884703a 	and	r2,r3,r2
    6120:	d0a7de05 	stb	r2,-24712(gp)
    }
}
    6124:	0001883a 	nop
    6128:	e037883a 	mov	sp,fp
    612c:	df000017 	ldw	fp,0(sp)
    6130:	dec00104 	addi	sp,sp,4
    6134:	f800283a 	ret

00006138 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    6138:	defffc04 	addi	sp,sp,-16
    613c:	df000315 	stw	fp,12(sp)
    6140:	df000304 	addi	fp,sp,12
    6144:	e13ffe15 	stw	r4,-8(fp)
    6148:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    614c:	e0bffe17 	ldw	r2,-8(fp)
    6150:	10800d03 	ldbu	r2,52(r2)
    6154:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    6158:	e0bffd03 	ldbu	r2,-12(fp)
    615c:	e0fffd03 	ldbu	r3,-12(fp)
    6160:	e13fff17 	ldw	r4,-4(fp)
    6164:	20c7883a 	add	r3,r4,r3
    6168:	18c002c4 	addi	r3,r3,11
    616c:	18c00003 	ldbu	r3,0(r3)
    6170:	1809883a 	mov	r4,r3
    6174:	e0fffe17 	ldw	r3,-8(fp)
    6178:	18c00d43 	ldbu	r3,53(r3)
    617c:	00c6303a 	nor	r3,zero,r3
    6180:	20c6703a 	and	r3,r4,r3
    6184:	1809883a 	mov	r4,r3
    6188:	e0ffff17 	ldw	r3,-4(fp)
    618c:	1885883a 	add	r2,r3,r2
    6190:	108002c4 	addi	r2,r2,11
    6194:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    6198:	e0bffd03 	ldbu	r2,-12(fp)
    619c:	e0ffff17 	ldw	r3,-4(fp)
    61a0:	1885883a 	add	r2,r3,r2
    61a4:	108002c4 	addi	r2,r2,11
    61a8:	10800003 	ldbu	r2,0(r2)
    61ac:	10803fcc 	andi	r2,r2,255
    61b0:	10000a1e 	bne	r2,zero,61dc <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    61b4:	e0bfff17 	ldw	r2,-4(fp)
    61b8:	10800283 	ldbu	r2,10(r2)
    61bc:	1007883a 	mov	r3,r2
    61c0:	e0bffe17 	ldw	r2,-8(fp)
    61c4:	10800d83 	ldbu	r2,54(r2)
    61c8:	0084303a 	nor	r2,zero,r2
    61cc:	1884703a 	and	r2,r3,r2
    61d0:	1007883a 	mov	r3,r2
    61d4:	e0bfff17 	ldw	r2,-4(fp)
    61d8:	10c00285 	stb	r3,10(r2)
    }
}
    61dc:	0001883a 	nop
    61e0:	e037883a 	mov	sp,fp
    61e4:	df000017 	ldw	fp,0(sp)
    61e8:	dec00104 	addi	sp,sp,4
    61ec:	f800283a 	ret

000061f0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    61f0:	defffa04 	addi	sp,sp,-24
    61f4:	df000515 	stw	fp,20(sp)
    61f8:	df000504 	addi	fp,sp,20
    61fc:	e13ffe15 	stw	r4,-8(fp)
    6200:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    6204:	e0bffe17 	ldw	r2,-8(fp)
    6208:	10800d03 	ldbu	r2,52(r2)
    620c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    6210:	e0bffe17 	ldw	r2,-8(fp)
    6214:	10800d83 	ldbu	r2,54(r2)
    6218:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    621c:	e0bffe17 	ldw	r2,-8(fp)
    6220:	10800d43 	ldbu	r2,53(r2)
    6224:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    6228:	e0bfff17 	ldw	r2,-4(fp)
    622c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    6230:	e0bffb17 	ldw	r2,-20(fp)
    6234:	10800017 	ldw	r2,0(r2)
    6238:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    623c:	00002506 	br	62d4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    6240:	e0bffd03 	ldbu	r2,-12(fp)
    6244:	e0fffd03 	ldbu	r3,-12(fp)
    6248:	e13ffc17 	ldw	r4,-16(fp)
    624c:	20c7883a 	add	r3,r4,r3
    6250:	18c002c4 	addi	r3,r3,11
    6254:	18c00003 	ldbu	r3,0(r3)
    6258:	1809883a 	mov	r4,r3
    625c:	e0fffd83 	ldbu	r3,-10(fp)
    6260:	00c6303a 	nor	r3,zero,r3
    6264:	20c6703a 	and	r3,r4,r3
    6268:	1809883a 	mov	r4,r3
    626c:	e0fffc17 	ldw	r3,-16(fp)
    6270:	1885883a 	add	r2,r3,r2
    6274:	108002c4 	addi	r2,r2,11
    6278:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    627c:	e0bffd03 	ldbu	r2,-12(fp)
    6280:	e0fffc17 	ldw	r3,-16(fp)
    6284:	1885883a 	add	r2,r3,r2
    6288:	108002c4 	addi	r2,r2,11
    628c:	10800003 	ldbu	r2,0(r2)
    6290:	10803fcc 	andi	r2,r2,255
    6294:	1000091e 	bne	r2,zero,62bc <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    6298:	e0bffc17 	ldw	r2,-16(fp)
    629c:	10800283 	ldbu	r2,10(r2)
    62a0:	1007883a 	mov	r3,r2
    62a4:	e0bffd43 	ldbu	r2,-11(fp)
    62a8:	0084303a 	nor	r2,zero,r2
    62ac:	1884703a 	and	r2,r3,r2
    62b0:	1007883a 	mov	r3,r2
    62b4:	e0bffc17 	ldw	r2,-16(fp)
    62b8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    62bc:	e0bffb17 	ldw	r2,-20(fp)
    62c0:	10800104 	addi	r2,r2,4
    62c4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    62c8:	e0bffb17 	ldw	r2,-20(fp)
    62cc:	10800017 	ldw	r2,0(r2)
    62d0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    62d4:	e0bffc17 	ldw	r2,-16(fp)
    62d8:	103fd91e 	bne	r2,zero,6240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006240>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    62dc:	0001883a 	nop
    62e0:	e037883a 	mov	sp,fp
    62e4:	df000017 	ldw	fp,0(sp)
    62e8:	dec00104 	addi	sp,sp,4
    62ec:	f800283a 	ret

000062f0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    62f0:	defffc04 	addi	sp,sp,-16
    62f4:	df000315 	stw	fp,12(sp)
    62f8:	df000304 	addi	fp,sp,12
    62fc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    6300:	e0bfff17 	ldw	r2,-4(fp)
    6304:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    6308:	e0bfff17 	ldw	r2,-4(fp)
    630c:	108002c4 	addi	r2,r2,11
    6310:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6314:	e03ffe05 	stb	zero,-8(fp)
    6318:	00000706 	br	6338 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    631c:	e0bffd17 	ldw	r2,-12(fp)
    6320:	10c00044 	addi	r3,r2,1
    6324:	e0fffd15 	stw	r3,-12(fp)
    6328:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    632c:	e0bffe03 	ldbu	r2,-8(fp)
    6330:	10800044 	addi	r2,r2,1
    6334:	e0bffe05 	stb	r2,-8(fp)
    6338:	e0bffe03 	ldbu	r2,-8(fp)
    633c:	108000f0 	cmpltui	r2,r2,3
    6340:	103ff61e 	bne	r2,zero,631c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700631c>
        *ptbl++ = 0;
    }
}
    6344:	0001883a 	nop
    6348:	e037883a 	mov	sp,fp
    634c:	df000017 	ldw	fp,0(sp)
    6350:	dec00104 	addi	sp,sp,4
    6354:	f800283a 	ret

00006358 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    6358:	defffb04 	addi	sp,sp,-20
    635c:	dfc00415 	stw	ra,16(sp)
    6360:	df000315 	stw	fp,12(sp)
    6364:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    6368:	0142d004 	movi	r5,2880
    636c:	010000b4 	movhi	r4,2
    6370:	2134ae04 	addi	r4,r4,-11592
    6374:	00066d00 	call	66d0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    6378:	008000b4 	movhi	r2,2
    637c:	10b4ae04 	addi	r2,r2,-11592
    6380:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    6384:	008000b4 	movhi	r2,2
    6388:	10b4ba04 	addi	r2,r2,-11544
    638c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    6390:	e03ffd0d 	sth	zero,-12(fp)
    6394:	00001306 	br	63e4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6398:	e0bffe17 	ldw	r2,-8(fp)
    639c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    63a0:	e0bffe17 	ldw	r2,-8(fp)
    63a4:	e0ffff17 	ldw	r3,-4(fp)
    63a8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    63ac:	e0bffe17 	ldw	r2,-8(fp)
    63b0:	00c00fc4 	movi	r3,63
    63b4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    63b8:	e0bffe17 	ldw	r2,-8(fp)
    63bc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    63c0:	e0bffe17 	ldw	r2,-8(fp)
    63c4:	10800c04 	addi	r2,r2,48
    63c8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    63cc:	e0bfff17 	ldw	r2,-4(fp)
    63d0:	10800c04 	addi	r2,r2,48
    63d4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    63d8:	e0bffd0b 	ldhu	r2,-12(fp)
    63dc:	10800044 	addi	r2,r2,1
    63e0:	e0bffd0d 	sth	r2,-12(fp)
    63e4:	e0bffd0b 	ldhu	r2,-12(fp)
    63e8:	10800ef0 	cmpltui	r2,r2,59
    63ec:	103fea1e 	bne	r2,zero,6398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006398>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    63f0:	e0bffe17 	ldw	r2,-8(fp)
    63f4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    63f8:	e0bffe17 	ldw	r2,-8(fp)
    63fc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    6400:	e0bffe17 	ldw	r2,-8(fp)
    6404:	00c00fc4 	movi	r3,63
    6408:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    640c:	e0bffe17 	ldw	r2,-8(fp)
    6410:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    6414:	008000b4 	movhi	r2,2
    6418:	10b4ae04 	addi	r2,r2,-11592
    641c:	d0a7df15 	stw	r2,-24708(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    6420:	0001883a 	nop
    6424:	e037883a 	mov	sp,fp
    6428:	dfc00117 	ldw	ra,4(sp)
    642c:	df000017 	ldw	fp,0(sp)
    6430:	dec00204 	addi	sp,sp,8
    6434:	f800283a 	ret

00006438 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    6438:	deffff04 	addi	sp,sp,-4
    643c:	df000015 	stw	fp,0(sp)
    6440:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    6444:	d027e215 	stw	zero,-24696(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    6448:	d027e005 	stb	zero,-24704(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    644c:	d027d205 	stb	zero,-24760(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    6450:	d027da45 	stb	zero,-24727(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    6454:	d027d245 	stb	zero,-24759(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    6458:	d027d715 	stw	zero,-24740(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    645c:	d027d315 	stw	zero,-24756(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    6460:	d027e515 	stw	zero,-24684(gp)
    OSIdleCtrMax  = 0L;
    6464:	d027d815 	stw	zero,-24736(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    6468:	d027e405 	stb	zero,-24688(gp)
#endif
}
    646c:	0001883a 	nop
    6470:	e037883a 	mov	sp,fp
    6474:	df000017 	ldw	fp,0(sp)
    6478:	dec00104 	addi	sp,sp,4
    647c:	f800283a 	ret

00006480 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    6480:	defffd04 	addi	sp,sp,-12
    6484:	df000215 	stw	fp,8(sp)
    6488:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    648c:	d027de05 	stb	zero,-24712(gp)
    prdytbl       = &OSRdyTbl[0];
    6490:	d0a7de44 	addi	r2,gp,-24711
    6494:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    6498:	e03ffe05 	stb	zero,-8(fp)
    649c:	00000706 	br	64bc <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    64a0:	e0bfff17 	ldw	r2,-4(fp)
    64a4:	10c00044 	addi	r3,r2,1
    64a8:	e0ffff15 	stw	r3,-4(fp)
    64ac:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    64b0:	e0bffe03 	ldbu	r2,-8(fp)
    64b4:	10800044 	addi	r2,r2,1
    64b8:	e0bffe05 	stb	r2,-8(fp)
    64bc:	e0bffe03 	ldbu	r2,-8(fp)
    64c0:	108000f0 	cmpltui	r2,r2,3
    64c4:	103ff61e 	bne	r2,zero,64a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064a0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    64c8:	d027d445 	stb	zero,-24751(gp)
    OSPrioHighRdy = 0;
    64cc:	d027d405 	stb	zero,-24752(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    64d0:	d027dc15 	stw	zero,-24720(gp)
    OSTCBCur      = (OS_TCB *)0;
    64d4:	d027e115 	stw	zero,-24700(gp)
}
    64d8:	0001883a 	nop
    64dc:	e037883a 	mov	sp,fp
    64e0:	df000017 	ldw	fp,0(sp)
    64e4:	dec00104 	addi	sp,sp,4
    64e8:	f800283a 	ret

000064ec <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    64ec:	defff804 	addi	sp,sp,-32
    64f0:	dfc00715 	stw	ra,28(sp)
    64f4:	df000615 	stw	fp,24(sp)
    64f8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    64fc:	008000c4 	movi	r2,3
    6500:	d8800415 	stw	r2,16(sp)
    6504:	d8000315 	stw	zero,12(sp)
    6508:	00808004 	movi	r2,512
    650c:	d8800215 	stw	r2,8(sp)
    6510:	008000b4 	movhi	r2,2
    6514:	10b2ae04 	addi	r2,r2,-13640
    6518:	d8800115 	stw	r2,4(sp)
    651c:	00bfffd4 	movui	r2,65535
    6520:	d8800015 	stw	r2,0(sp)
    6524:	01c00504 	movi	r7,20
    6528:	018000b4 	movhi	r6,2
    652c:	31b4ad04 	addi	r6,r6,-11596
    6530:	000b883a 	mov	r5,zero
    6534:	01000034 	movhi	r4,0
    6538:	211a6604 	addi	r4,r4,27032
    653c:	000bb300 	call	bb30 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    6540:	e1bfff04 	addi	r6,fp,-4
    6544:	01400074 	movhi	r5,1
    6548:	29448404 	addi	r5,r5,4624
    654c:	01000504 	movi	r4,20
    6550:	000c3400 	call	c340 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    6554:	0001883a 	nop
    6558:	e037883a 	mov	sp,fp
    655c:	dfc00117 	ldw	ra,4(sp)
    6560:	df000017 	ldw	fp,0(sp)
    6564:	dec00204 	addi	sp,sp,8
    6568:	f800283a 	ret

0000656c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    656c:	defff804 	addi	sp,sp,-32
    6570:	dfc00715 	stw	ra,28(sp)
    6574:	df000615 	stw	fp,24(sp)
    6578:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    657c:	008000c4 	movi	r2,3
    6580:	d8800415 	stw	r2,16(sp)
    6584:	d8000315 	stw	zero,12(sp)
    6588:	00808004 	movi	r2,512
    658c:	d8800215 	stw	r2,8(sp)
    6590:	008000b4 	movhi	r2,2
    6594:	10b03604 	addi	r2,r2,-16168
    6598:	d8800115 	stw	r2,4(sp)
    659c:	00bfff94 	movui	r2,65534
    65a0:	d8800015 	stw	r2,0(sp)
    65a4:	01c004c4 	movi	r7,19
    65a8:	018000b4 	movhi	r6,2
    65ac:	31b23504 	addi	r6,r6,-14124
    65b0:	000b883a 	mov	r5,zero
    65b4:	01000034 	movhi	r4,0
    65b8:	211a7d04 	addi	r4,r4,27124
    65bc:	000bb300 	call	bb30 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    65c0:	e1bfff04 	addi	r6,fp,-4
    65c4:	01400074 	movhi	r5,1
    65c8:	29448804 	addi	r5,r5,4640
    65cc:	010004c4 	movi	r4,19
    65d0:	000c3400 	call	c340 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    65d4:	0001883a 	nop
    65d8:	e037883a 	mov	sp,fp
    65dc:	dfc00117 	ldw	ra,4(sp)
    65e0:	df000017 	ldw	fp,0(sp)
    65e4:	dec00204 	addi	sp,sp,8
    65e8:	f800283a 	ret

000065ec <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    65ec:	defffb04 	addi	sp,sp,-20
    65f0:	dfc00415 	stw	ra,16(sp)
    65f4:	df000315 	stw	fp,12(sp)
    65f8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    65fc:	01414404 	movi	r5,1296
    6600:	010000b4 	movhi	r4,2
    6604:	21377e04 	addi	r4,r4,-8712
    6608:	00066d00 	call	66d0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    660c:	01401504 	movi	r5,84
    6610:	010000b4 	movhi	r4,2
    6614:	2138c204 	addi	r4,r4,-7416
    6618:	00066d00 	call	66d0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    661c:	008000b4 	movhi	r2,2
    6620:	10b77e04 	addi	r2,r2,-8712
    6624:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    6628:	008000b4 	movhi	r2,2
    662c:	10b79904 	addi	r2,r2,-8604
    6630:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    6634:	e03ffd05 	stb	zero,-12(fp)
    6638:	00001106 	br	6680 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    663c:	e0bffe17 	ldw	r2,-8(fp)
    6640:	e0ffff17 	ldw	r3,-4(fp)
    6644:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    6648:	e0bffe17 	ldw	r2,-8(fp)
    664c:	00c00fc4 	movi	r3,63
    6650:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    6654:	e0bffe17 	ldw	r2,-8(fp)
    6658:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    665c:	e0bffe17 	ldw	r2,-8(fp)
    6660:	10801b04 	addi	r2,r2,108
    6664:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    6668:	e0bfff17 	ldw	r2,-4(fp)
    666c:	10801b04 	addi	r2,r2,108
    6670:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    6674:	e0bffd03 	ldbu	r2,-12(fp)
    6678:	10800044 	addi	r2,r2,1
    667c:	e0bffd05 	stb	r2,-12(fp)
    6680:	e0bffd03 	ldbu	r2,-12(fp)
    6684:	108002f0 	cmpltui	r2,r2,11
    6688:	103fec1e 	bne	r2,zero,663c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700663c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    668c:	e0bffe17 	ldw	r2,-8(fp)
    6690:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    6694:	e0bffe17 	ldw	r2,-8(fp)
    6698:	00c00fc4 	movi	r3,63
    669c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    66a0:	e0bffe17 	ldw	r2,-8(fp)
    66a4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    66a8:	d027d515 	stw	zero,-24748(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    66ac:	008000b4 	movhi	r2,2
    66b0:	10b77e04 	addi	r2,r2,-8712
    66b4:	d0a7d915 	stw	r2,-24732(gp)
}
    66b8:	0001883a 	nop
    66bc:	e037883a 	mov	sp,fp
    66c0:	dfc00117 	ldw	ra,4(sp)
    66c4:	df000017 	ldw	fp,0(sp)
    66c8:	dec00204 	addi	sp,sp,8
    66cc:	f800283a 	ret

000066d0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    66d0:	defffd04 	addi	sp,sp,-12
    66d4:	df000215 	stw	fp,8(sp)
    66d8:	df000204 	addi	fp,sp,8
    66dc:	e13ffe15 	stw	r4,-8(fp)
    66e0:	2805883a 	mov	r2,r5
    66e4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    66e8:	00000706 	br	6708 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    66ec:	e0bffe17 	ldw	r2,-8(fp)
    66f0:	10c00044 	addi	r3,r2,1
    66f4:	e0fffe15 	stw	r3,-8(fp)
    66f8:	10000005 	stb	zero,0(r2)
        size--;
    66fc:	e0bfff0b 	ldhu	r2,-4(fp)
    6700:	10bfffc4 	addi	r2,r2,-1
    6704:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    6708:	e0bfff0b 	ldhu	r2,-4(fp)
    670c:	103ff71e 	bne	r2,zero,66ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066ec>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    6710:	0001883a 	nop
    6714:	e037883a 	mov	sp,fp
    6718:	df000017 	ldw	fp,0(sp)
    671c:	dec00104 	addi	sp,sp,4
    6720:	f800283a 	ret

00006724 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    6724:	defffc04 	addi	sp,sp,-16
    6728:	df000315 	stw	fp,12(sp)
    672c:	df000304 	addi	fp,sp,12
    6730:	e13ffd15 	stw	r4,-12(fp)
    6734:	e17ffe15 	stw	r5,-8(fp)
    6738:	3005883a 	mov	r2,r6
    673c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    6740:	00000b06 	br	6770 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    6744:	e0bffd17 	ldw	r2,-12(fp)
    6748:	10c00044 	addi	r3,r2,1
    674c:	e0fffd15 	stw	r3,-12(fp)
    6750:	e0fffe17 	ldw	r3,-8(fp)
    6754:	19000044 	addi	r4,r3,1
    6758:	e13ffe15 	stw	r4,-8(fp)
    675c:	18c00003 	ldbu	r3,0(r3)
    6760:	10c00005 	stb	r3,0(r2)
        size--;
    6764:	e0bfff0b 	ldhu	r2,-4(fp)
    6768:	10bfffc4 	addi	r2,r2,-1
    676c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    6770:	e0bfff0b 	ldhu	r2,-4(fp)
    6774:	103ff31e 	bne	r2,zero,6744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006744>
        *pdest++ = *psrc++;
        size--;
    }
}
    6778:	0001883a 	nop
    677c:	e037883a 	mov	sp,fp
    6780:	df000017 	ldw	fp,0(sp)
    6784:	dec00104 	addi	sp,sp,4
    6788:	f800283a 	ret

0000678c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    678c:	defffb04 	addi	sp,sp,-20
    6790:	dfc00415 	stw	ra,16(sp)
    6794:	df000315 	stw	fp,12(sp)
    6798:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    679c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    67a0:	0005303a 	rdctl	r2,status
    67a4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67a8:	e0ffff17 	ldw	r3,-4(fp)
    67ac:	00bfff84 	movi	r2,-2
    67b0:	1884703a 	and	r2,r3,r2
    67b4:	1001703a 	wrctl	status,r2
  
  return context;
    67b8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    67bc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    67c0:	d0a7e003 	ldbu	r2,-24704(gp)
    67c4:	10803fcc 	andi	r2,r2,255
    67c8:	10001a1e 	bne	r2,zero,6834 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    67cc:	d0a7d203 	ldbu	r2,-24760(gp)
    67d0:	10803fcc 	andi	r2,r2,255
    67d4:	1000171e 	bne	r2,zero,6834 <OS_Sched+0xa8>
            OS_SchedNew();
    67d8:	000685c0 	call	685c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    67dc:	d0e7d403 	ldbu	r3,-24752(gp)
    67e0:	d0a7d443 	ldbu	r2,-24751(gp)
    67e4:	18c03fcc 	andi	r3,r3,255
    67e8:	10803fcc 	andi	r2,r2,255
    67ec:	18801126 	beq	r3,r2,6834 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    67f0:	d0a7d403 	ldbu	r2,-24752(gp)
    67f4:	10c03fcc 	andi	r3,r2,255
    67f8:	008000b4 	movhi	r2,2
    67fc:	10b8c204 	addi	r2,r2,-7416
    6800:	18c7883a 	add	r3,r3,r3
    6804:	18c7883a 	add	r3,r3,r3
    6808:	10c5883a 	add	r2,r2,r3
    680c:	10800017 	ldw	r2,0(r2)
    6810:	d0a7dc15 	stw	r2,-24720(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    6814:	d0a7dc17 	ldw	r2,-24720(gp)
    6818:	10c00e17 	ldw	r3,56(r2)
    681c:	18c00044 	addi	r3,r3,1
    6820:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    6824:	d0a7d717 	ldw	r2,-24740(gp)
    6828:	10800044 	addi	r2,r2,1
    682c:	d0a7d715 	stw	r2,-24740(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    6830:	001062c0 	call	1062c <OSCtxSw>
    6834:	e0bffd17 	ldw	r2,-12(fp)
    6838:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    683c:	e0bffe17 	ldw	r2,-8(fp)
    6840:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    6844:	0001883a 	nop
    6848:	e037883a 	mov	sp,fp
    684c:	dfc00117 	ldw	ra,4(sp)
    6850:	df000017 	ldw	fp,0(sp)
    6854:	dec00204 	addi	sp,sp,8
    6858:	f800283a 	ret

0000685c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    685c:	defffe04 	addi	sp,sp,-8
    6860:	df000115 	stw	fp,4(sp)
    6864:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    6868:	d0a7de03 	ldbu	r2,-24712(gp)
    686c:	10c03fcc 	andi	r3,r2,255
    6870:	00800074 	movhi	r2,1
    6874:	10844404 	addi	r2,r2,4368
    6878:	10c5883a 	add	r2,r2,r3
    687c:	10800003 	ldbu	r2,0(r2)
    6880:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    6884:	e0bfff03 	ldbu	r2,-4(fp)
    6888:	100490fa 	slli	r2,r2,3
    688c:	1009883a 	mov	r4,r2
    6890:	e0ffff03 	ldbu	r3,-4(fp)
    6894:	d0a7de44 	addi	r2,gp,-24711
    6898:	1885883a 	add	r2,r3,r2
    689c:	10800003 	ldbu	r2,0(r2)
    68a0:	10c03fcc 	andi	r3,r2,255
    68a4:	00800074 	movhi	r2,1
    68a8:	10844404 	addi	r2,r2,4368
    68ac:	10c5883a 	add	r2,r2,r3
    68b0:	10800003 	ldbu	r2,0(r2)
    68b4:	2085883a 	add	r2,r4,r2
    68b8:	d0a7d405 	stb	r2,-24752(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    68bc:	0001883a 	nop
    68c0:	e037883a 	mov	sp,fp
    68c4:	df000017 	ldw	fp,0(sp)
    68c8:	dec00104 	addi	sp,sp,4
    68cc:	f800283a 	ret

000068d0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    68d0:	defffc04 	addi	sp,sp,-16
    68d4:	df000315 	stw	fp,12(sp)
    68d8:	df000304 	addi	fp,sp,12
    68dc:	e13ffe15 	stw	r4,-8(fp)
    68e0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    68e4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    68e8:	00000b06 	br	6918 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    68ec:	e0bffe17 	ldw	r2,-8(fp)
    68f0:	10c00044 	addi	r3,r2,1
    68f4:	e0fffe15 	stw	r3,-8(fp)
    68f8:	e0ffff17 	ldw	r3,-4(fp)
    68fc:	19000044 	addi	r4,r3,1
    6900:	e13fff15 	stw	r4,-4(fp)
    6904:	18c00003 	ldbu	r3,0(r3)
    6908:	10c00005 	stb	r3,0(r2)
        len++;
    690c:	e0bffd03 	ldbu	r2,-12(fp)
    6910:	10800044 	addi	r2,r2,1
    6914:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    6918:	e0bfff17 	ldw	r2,-4(fp)
    691c:	10800003 	ldbu	r2,0(r2)
    6920:	10803fcc 	andi	r2,r2,255
    6924:	103ff11e 	bne	r2,zero,68ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068ec>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    6928:	e0bffe17 	ldw	r2,-8(fp)
    692c:	10000005 	stb	zero,0(r2)
    return (len);
    6930:	e0bffd03 	ldbu	r2,-12(fp)
}
    6934:	e037883a 	mov	sp,fp
    6938:	df000017 	ldw	fp,0(sp)
    693c:	dec00104 	addi	sp,sp,4
    6940:	f800283a 	ret

00006944 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    6944:	defffd04 	addi	sp,sp,-12
    6948:	df000215 	stw	fp,8(sp)
    694c:	df000204 	addi	fp,sp,8
    6950:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    6954:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    6958:	00000606 	br	6974 <OS_StrLen+0x30>
        psrc++;
    695c:	e0bfff17 	ldw	r2,-4(fp)
    6960:	10800044 	addi	r2,r2,1
    6964:	e0bfff15 	stw	r2,-4(fp)
        len++;
    6968:	e0bffe03 	ldbu	r2,-8(fp)
    696c:	10800044 	addi	r2,r2,1
    6970:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    6974:	e0bfff17 	ldw	r2,-4(fp)
    6978:	10800003 	ldbu	r2,0(r2)
    697c:	10803fcc 	andi	r2,r2,255
    6980:	103ff61e 	bne	r2,zero,695c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700695c>
        psrc++;
        len++;
    }
    return (len);
    6984:	e0bffe03 	ldbu	r2,-8(fp)
}
    6988:	e037883a 	mov	sp,fp
    698c:	df000017 	ldw	fp,0(sp)
    6990:	dec00104 	addi	sp,sp,4
    6994:	f800283a 	ret

00006998 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    6998:	defffa04 	addi	sp,sp,-24
    699c:	dfc00515 	stw	ra,20(sp)
    69a0:	df000415 	stw	fp,16(sp)
    69a4:	df000404 	addi	fp,sp,16
    69a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    69ac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    69b0:	0005303a 	rdctl	r2,status
    69b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69b8:	e0fffd17 	ldw	r3,-12(fp)
    69bc:	00bfff84 	movi	r2,-2
    69c0:	1884703a 	and	r2,r3,r2
    69c4:	1001703a 	wrctl	status,r2
  
  return context;
    69c8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    69cc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    69d0:	d0a7d317 	ldw	r2,-24756(gp)
    69d4:	10800044 	addi	r2,r2,1
    69d8:	d0a7d315 	stw	r2,-24756(gp)
    69dc:	e0bffc17 	ldw	r2,-16(fp)
    69e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    69e4:	e0bffe17 	ldw	r2,-8(fp)
    69e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    69ec:	00109400 	call	10940 <OSTaskIdleHook>
    }
    69f0:	003fef06 	br	69b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069b0>

000069f4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    69f4:	defff804 	addi	sp,sp,-32
    69f8:	dfc00715 	stw	ra,28(sp)
    69fc:	df000615 	stw	fp,24(sp)
    6a00:	dc400515 	stw	r17,20(sp)
    6a04:	dc000415 	stw	r16,16(sp)
    6a08:	df000604 	addi	fp,sp,24
    6a0c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6a10:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    6a14:	00000206 	br	6a20 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    6a18:	01000044 	movi	r4,1
    6a1c:	000cc000 	call	cc00 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    6a20:	d0a7e403 	ldbu	r2,-24688(gp)
    6a24:	10803fcc 	andi	r2,r2,255
    6a28:	103ffb26 	beq	r2,zero,6a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a18>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    6a2c:	d0e7d817 	ldw	r3,-24736(gp)
    6a30:	00947b34 	movhi	r2,20972
    6a34:	10a147c4 	addi	r2,r2,-31457
    6a38:	1888383a 	mulxuu	r4,r3,r2
    6a3c:	1885383a 	mul	r2,r3,r2
    6a40:	1021883a 	mov	r16,r2
    6a44:	2023883a 	mov	r17,r4
    6a48:	8804d17a 	srli	r2,r17,5
    6a4c:	d0a7d815 	stw	r2,-24736(gp)
    if (OSIdleCtrMax == 0L) {
    6a50:	d0a7d817 	ldw	r2,-24736(gp)
    6a54:	1000031e 	bne	r2,zero,6a64 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    6a58:	d027da05 	stb	zero,-24728(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    6a5c:	01003fc4 	movi	r4,255
    6a60:	000c8880 	call	c888 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a64:	0005303a 	rdctl	r2,status
    6a68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a6c:	e0fffb17 	ldw	r3,-20(fp)
    6a70:	00bfff84 	movi	r2,-2
    6a74:	1884703a 	and	r2,r3,r2
    6a78:	1001703a 	wrctl	status,r2
  
  return context;
    6a7c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    6a80:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    6a84:	d0a7d317 	ldw	r2,-24756(gp)
    6a88:	d0a7e515 	stw	r2,-24684(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    6a8c:	d027d315 	stw	zero,-24756(gp)
    6a90:	e0bffa17 	ldw	r2,-24(fp)
    6a94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6a98:	e0bffc17 	ldw	r2,-16(fp)
    6a9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    6aa0:	d0e7e517 	ldw	r3,-24684(gp)
    6aa4:	d0a7d817 	ldw	r2,-24736(gp)
    6aa8:	1885203a 	divu	r2,r3,r2
    6aac:	1007883a 	mov	r3,r2
    6ab0:	00801904 	movi	r2,100
    6ab4:	10c5c83a 	sub	r2,r2,r3
    6ab8:	d0a7da05 	stb	r2,-24728(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    6abc:	00108c00 	call	108c0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    6ac0:	0006ad00 	call	6ad0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    6ac4:	0009883a 	mov	r4,zero
    6ac8:	000cc000 	call	cc00 <OSTimeDly>
    }
    6acc:	003fe506 	br	6a64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a64>

00006ad0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    6ad0:	defffa04 	addi	sp,sp,-24
    6ad4:	dfc00515 	stw	ra,20(sp)
    6ad8:	df000415 	stw	fp,16(sp)
    6adc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    6ae0:	e03ffc05 	stb	zero,-16(fp)
    6ae4:	00002406 	br	6b78 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    6ae8:	e0bffc03 	ldbu	r2,-16(fp)
    6aec:	e0fffe04 	addi	r3,fp,-8
    6af0:	180b883a 	mov	r5,r3
    6af4:	1009883a 	mov	r4,r2
    6af8:	000c6c80 	call	c6c8 <OSTaskStkChk>
    6afc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    6b00:	e0bffc43 	ldbu	r2,-15(fp)
    6b04:	1000191e 	bne	r2,zero,6b6c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    6b08:	e0fffc03 	ldbu	r3,-16(fp)
    6b0c:	008000b4 	movhi	r2,2
    6b10:	10b8c204 	addi	r2,r2,-7416
    6b14:	18c7883a 	add	r3,r3,r3
    6b18:	18c7883a 	add	r3,r3,r3
    6b1c:	10c5883a 	add	r2,r2,r3
    6b20:	10800017 	ldw	r2,0(r2)
    6b24:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    6b28:	e0bffd17 	ldw	r2,-12(fp)
    6b2c:	10000f26 	beq	r2,zero,6b6c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    6b30:	e0bffd17 	ldw	r2,-12(fp)
    6b34:	10800060 	cmpeqi	r2,r2,1
    6b38:	10000c1e 	bne	r2,zero,6b6c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    6b3c:	e0bffd17 	ldw	r2,-12(fp)
    6b40:	10c00217 	ldw	r3,8(r2)
    6b44:	e0bffd17 	ldw	r2,-12(fp)
    6b48:	10800317 	ldw	r2,12(r2)
    6b4c:	1085883a 	add	r2,r2,r2
    6b50:	1085883a 	add	r2,r2,r2
    6b54:	1887883a 	add	r3,r3,r2
    6b58:	e0bffd17 	ldw	r2,-12(fp)
    6b5c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    6b60:	e0ffff17 	ldw	r3,-4(fp)
    6b64:	e0bffd17 	ldw	r2,-12(fp)
    6b68:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    6b6c:	e0bffc03 	ldbu	r2,-16(fp)
    6b70:	10800044 	addi	r2,r2,1
    6b74:	e0bffc05 	stb	r2,-16(fp)
    6b78:	e0bffc03 	ldbu	r2,-16(fp)
    6b7c:	10800570 	cmpltui	r2,r2,21
    6b80:	103fd91e 	bne	r2,zero,6ae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ae8>
#endif
                }
            }
        }
    }
}
    6b84:	0001883a 	nop
    6b88:	e037883a 	mov	sp,fp
    6b8c:	dfc00117 	ldw	ra,4(sp)
    6b90:	df000017 	ldw	fp,0(sp)
    6b94:	dec00204 	addi	sp,sp,8
    6b98:	f800283a 	ret

00006b9c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    6b9c:	defff204 	addi	sp,sp,-56
    6ba0:	dfc00d15 	stw	ra,52(sp)
    6ba4:	df000c15 	stw	fp,48(sp)
    6ba8:	df000c04 	addi	fp,sp,48
    6bac:	e17ffc15 	stw	r5,-16(fp)
    6bb0:	e1bffd15 	stw	r6,-12(fp)
    6bb4:	3807883a 	mov	r3,r7
    6bb8:	e0800417 	ldw	r2,16(fp)
    6bbc:	e13ffb05 	stb	r4,-20(fp)
    6bc0:	e0fffe0d 	sth	r3,-8(fp)
    6bc4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6bc8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6bcc:	0005303a 	rdctl	r2,status
    6bd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6bd4:	e0fffa17 	ldw	r3,-24(fp)
    6bd8:	00bfff84 	movi	r2,-2
    6bdc:	1884703a 	and	r2,r3,r2
    6be0:	1001703a 	wrctl	status,r2
  
  return context;
    6be4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    6be8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    6bec:	d0a7d917 	ldw	r2,-24732(gp)
    6bf0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    6bf4:	e0bff617 	ldw	r2,-40(fp)
    6bf8:	10009326 	beq	r2,zero,6e48 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    6bfc:	e0bff617 	ldw	r2,-40(fp)
    6c00:	10800517 	ldw	r2,20(r2)
    6c04:	d0a7d915 	stw	r2,-24732(gp)
    6c08:	e0bff417 	ldw	r2,-48(fp)
    6c0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6c10:	e0bff817 	ldw	r2,-32(fp)
    6c14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    6c18:	e0bff617 	ldw	r2,-40(fp)
    6c1c:	e0fffc17 	ldw	r3,-16(fp)
    6c20:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    6c24:	e0bff617 	ldw	r2,-40(fp)
    6c28:	e0fffb03 	ldbu	r3,-20(fp)
    6c2c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    6c30:	e0bff617 	ldw	r2,-40(fp)
    6c34:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    6c38:	e0bff617 	ldw	r2,-40(fp)
    6c3c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    6c40:	e0bff617 	ldw	r2,-40(fp)
    6c44:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    6c48:	e0bff617 	ldw	r2,-40(fp)
    6c4c:	e0c00317 	ldw	r3,12(fp)
    6c50:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    6c54:	e0bff617 	ldw	r2,-40(fp)
    6c58:	e0c00217 	ldw	r3,8(fp)
    6c5c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    6c60:	e0bff617 	ldw	r2,-40(fp)
    6c64:	e0fffd17 	ldw	r3,-12(fp)
    6c68:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    6c6c:	e0bff617 	ldw	r2,-40(fp)
    6c70:	e0ffff0b 	ldhu	r3,-4(fp)
    6c74:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    6c78:	e0bff617 	ldw	r2,-40(fp)
    6c7c:	e0fffe0b 	ldhu	r3,-8(fp)
    6c80:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    6c84:	e0bff617 	ldw	r2,-40(fp)
    6c88:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    6c8c:	e0bffb03 	ldbu	r2,-20(fp)
    6c90:	1004d0fa 	srli	r2,r2,3
    6c94:	1007883a 	mov	r3,r2
    6c98:	e0bff617 	ldw	r2,-40(fp)
    6c9c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    6ca0:	e0bffb03 	ldbu	r2,-20(fp)
    6ca4:	108001cc 	andi	r2,r2,7
    6ca8:	1007883a 	mov	r3,r2
    6cac:	e0bff617 	ldw	r2,-40(fp)
    6cb0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    6cb4:	e0bff617 	ldw	r2,-40(fp)
    6cb8:	10800d03 	ldbu	r2,52(r2)
    6cbc:	10803fcc 	andi	r2,r2,255
    6cc0:	00c00044 	movi	r3,1
    6cc4:	1884983a 	sll	r2,r3,r2
    6cc8:	1007883a 	mov	r3,r2
    6ccc:	e0bff617 	ldw	r2,-40(fp)
    6cd0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    6cd4:	e0bff617 	ldw	r2,-40(fp)
    6cd8:	10800cc3 	ldbu	r2,51(r2)
    6cdc:	10803fcc 	andi	r2,r2,255
    6ce0:	00c00044 	movi	r3,1
    6ce4:	1884983a 	sll	r2,r3,r2
    6ce8:	1007883a 	mov	r3,r2
    6cec:	e0bff617 	ldw	r2,-40(fp)
    6cf0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    6cf4:	e0bff617 	ldw	r2,-40(fp)
    6cf8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    6cfc:	e0bff617 	ldw	r2,-40(fp)
    6d00:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    6d04:	e0bff617 	ldw	r2,-40(fp)
    6d08:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    6d0c:	e0bff617 	ldw	r2,-40(fp)
    6d10:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    6d14:	e0bff617 	ldw	r2,-40(fp)
    6d18:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    6d1c:	e0bff617 	ldw	r2,-40(fp)
    6d20:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    6d24:	e0bff617 	ldw	r2,-40(fp)
    6d28:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    6d2c:	e0bff617 	ldw	r2,-40(fp)
    6d30:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    6d34:	e0bff617 	ldw	r2,-40(fp)
    6d38:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    6d3c:	e0bff617 	ldw	r2,-40(fp)
    6d40:	00c00fc4 	movi	r3,63
    6d44:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    6d48:	e0bff617 	ldw	r2,-40(fp)
    6d4c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    6d50:	e13ff617 	ldw	r4,-40(fp)
    6d54:	00109600 	call	10960 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    6d58:	e13ff617 	ldw	r4,-40(fp)
    6d5c:	00108580 	call	10858 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6d60:	0005303a 	rdctl	r2,status
    6d64:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6d68:	e0fff517 	ldw	r3,-44(fp)
    6d6c:	00bfff84 	movi	r2,-2
    6d70:	1884703a 	and	r2,r3,r2
    6d74:	1001703a 	wrctl	status,r2
  
  return context;
    6d78:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    6d7c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    6d80:	e0fffb03 	ldbu	r3,-20(fp)
    6d84:	008000b4 	movhi	r2,2
    6d88:	10b8c204 	addi	r2,r2,-7416
    6d8c:	18c7883a 	add	r3,r3,r3
    6d90:	18c7883a 	add	r3,r3,r3
    6d94:	10c5883a 	add	r2,r2,r3
    6d98:	e0fff617 	ldw	r3,-40(fp)
    6d9c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    6da0:	d0e7d517 	ldw	r3,-24748(gp)
    6da4:	e0bff617 	ldw	r2,-40(fp)
    6da8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    6dac:	e0bff617 	ldw	r2,-40(fp)
    6db0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    6db4:	d0a7d517 	ldw	r2,-24748(gp)
    6db8:	10000326 	beq	r2,zero,6dc8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    6dbc:	d0a7d517 	ldw	r2,-24748(gp)
    6dc0:	e0fff617 	ldw	r3,-40(fp)
    6dc4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    6dc8:	e0bff617 	ldw	r2,-40(fp)
    6dcc:	d0a7d515 	stw	r2,-24748(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    6dd0:	e0bff617 	ldw	r2,-40(fp)
    6dd4:	10c00d83 	ldbu	r3,54(r2)
    6dd8:	d0a7de03 	ldbu	r2,-24712(gp)
    6ddc:	1884b03a 	or	r2,r3,r2
    6de0:	d0a7de05 	stb	r2,-24712(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    6de4:	e0bff617 	ldw	r2,-40(fp)
    6de8:	10800d03 	ldbu	r2,52(r2)
    6dec:	10c03fcc 	andi	r3,r2,255
    6df0:	e0bff617 	ldw	r2,-40(fp)
    6df4:	10800d03 	ldbu	r2,52(r2)
    6df8:	11003fcc 	andi	r4,r2,255
    6dfc:	d0a7de44 	addi	r2,gp,-24711
    6e00:	2085883a 	add	r2,r4,r2
    6e04:	11000003 	ldbu	r4,0(r2)
    6e08:	e0bff617 	ldw	r2,-40(fp)
    6e0c:	10800d43 	ldbu	r2,53(r2)
    6e10:	2084b03a 	or	r2,r4,r2
    6e14:	1009883a 	mov	r4,r2
    6e18:	d0a7de44 	addi	r2,gp,-24711
    6e1c:	1885883a 	add	r2,r3,r2
    6e20:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    6e24:	d0a7da43 	ldbu	r2,-24727(gp)
    6e28:	10800044 	addi	r2,r2,1
    6e2c:	d0a7da45 	stb	r2,-24727(gp)
    6e30:	e0bff417 	ldw	r2,-48(fp)
    6e34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e38:	e0bff717 	ldw	r2,-36(fp)
    6e3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    6e40:	0005883a 	mov	r2,zero
    6e44:	00000506 	br	6e5c <OS_TCBInit+0x2c0>
    6e48:	e0bff417 	ldw	r2,-48(fp)
    6e4c:	e0bff915 	stw	r2,-28(fp)
    6e50:	e0bff917 	ldw	r2,-28(fp)
    6e54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    6e58:	00801084 	movi	r2,66
}
    6e5c:	e037883a 	mov	sp,fp
    6e60:	dfc00117 	ldw	ra,4(sp)
    6e64:	df000017 	ldw	fp,0(sp)
    6e68:	dec00204 	addi	sp,sp,8
    6e6c:	f800283a 	ret

00006e70 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    6e70:	defffe04 	addi	sp,sp,-8
    6e74:	df000115 	stw	fp,4(sp)
    6e78:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    6e7c:	d0a00f04 	addi	r2,gp,-32708
    6e80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    6e84:	d0a01004 	addi	r2,gp,-32704
    6e88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    6e8c:	d0a01184 	addi	r2,gp,-32698
    6e90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    6e94:	d0a01204 	addi	r2,gp,-32696
    6e98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    6e9c:	d0a01104 	addi	r2,gp,-32700
    6ea0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    6ea4:	d0a01284 	addi	r2,gp,-32694
    6ea8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    6eac:	d0a01304 	addi	r2,gp,-32692
    6eb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    6eb4:	d0a01384 	addi	r2,gp,-32690
    6eb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    6ebc:	d0a01404 	addi	r2,gp,-32688
    6ec0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    6ec4:	d0a01484 	addi	r2,gp,-32686
    6ec8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    6ecc:	d0a01504 	addi	r2,gp,-32684
    6ed0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    6ed4:	d0a01584 	addi	r2,gp,-32682
    6ed8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    6edc:	d0a01604 	addi	r2,gp,-32680
    6ee0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    6ee4:	d0a01684 	addi	r2,gp,-32678
    6ee8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    6eec:	d0a01704 	addi	r2,gp,-32676
    6ef0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    6ef4:	d0a01784 	addi	r2,gp,-32674
    6ef8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    6efc:	d0a01804 	addi	r2,gp,-32672
    6f00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    6f04:	d0a01884 	addi	r2,gp,-32670
    6f08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    6f0c:	d0a01904 	addi	r2,gp,-32668
    6f10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    6f14:	d0a01984 	addi	r2,gp,-32666
    6f18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    6f1c:	d0a01a04 	addi	r2,gp,-32664
    6f20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    6f24:	d0a01a84 	addi	r2,gp,-32662
    6f28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    6f2c:	d0a01b04 	addi	r2,gp,-32660
    6f30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    6f34:	d0a01b84 	addi	r2,gp,-32658
    6f38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    6f3c:	d0a01c04 	addi	r2,gp,-32656
    6f40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    6f44:	d0a01c84 	addi	r2,gp,-32654
    6f48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    6f4c:	d0a01d04 	addi	r2,gp,-32652
    6f50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    6f54:	d0a01d84 	addi	r2,gp,-32650
    6f58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    6f5c:	d0a01e04 	addi	r2,gp,-32648
    6f60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    6f64:	d0a01e84 	addi	r2,gp,-32646
    6f68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    6f6c:	d0a01f04 	addi	r2,gp,-32644
    6f70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    6f74:	d0a01f84 	addi	r2,gp,-32642
    6f78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    6f7c:	d0a02004 	addi	r2,gp,-32640
    6f80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    6f84:	d0a02084 	addi	r2,gp,-32638
    6f88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    6f8c:	d0a02104 	addi	r2,gp,-32636
    6f90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    6f94:	d0a02184 	addi	r2,gp,-32634
    6f98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    6f9c:	d0a02204 	addi	r2,gp,-32632
    6fa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    6fa4:	d0a02284 	addi	r2,gp,-32630
    6fa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    6fac:	d0a02304 	addi	r2,gp,-32628
    6fb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    6fb4:	d0a02384 	addi	r2,gp,-32626
    6fb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    6fbc:	d0a02404 	addi	r2,gp,-32624
    6fc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    6fc4:	d0a02484 	addi	r2,gp,-32622
    6fc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    6fcc:	d0a02504 	addi	r2,gp,-32620
    6fd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    6fd4:	d0a02584 	addi	r2,gp,-32618
    6fd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    6fdc:	d0a02604 	addi	r2,gp,-32616
    6fe0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    6fe4:	d0a02b04 	addi	r2,gp,-32596
    6fe8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    6fec:	0001883a 	nop
    6ff0:	e037883a 	mov	sp,fp
    6ff4:	df000017 	ldw	fp,0(sp)
    6ff8:	dec00104 	addi	sp,sp,4
    6ffc:	f800283a 	ret

00007000 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    7000:	defff204 	addi	sp,sp,-56
    7004:	df000d15 	stw	fp,52(sp)
    7008:	df000d04 	addi	fp,sp,52
    700c:	e13ffc15 	stw	r4,-16(fp)
    7010:	2807883a 	mov	r3,r5
    7014:	3005883a 	mov	r2,r6
    7018:	e1ffff15 	stw	r7,-4(fp)
    701c:	e0fffd0d 	sth	r3,-12(fp)
    7020:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7024:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7028:	e0bfff17 	ldw	r2,-4(fp)
    702c:	1000021e 	bne	r2,zero,7038 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    7030:	0005883a 	mov	r2,zero
    7034:	0000b006 	br	72f8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    7038:	e0bffc17 	ldw	r2,-16(fp)
    703c:	1000051e 	bne	r2,zero,7054 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7040:	e0bfff17 	ldw	r2,-4(fp)
    7044:	00c01b84 	movi	r3,110
    7048:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    704c:	0005883a 	mov	r2,zero
    7050:	0000a906 	br	72f8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    7054:	e0bffc17 	ldw	r2,-16(fp)
    7058:	10800003 	ldbu	r2,0(r2)
    705c:	10803fcc 	andi	r2,r2,255
    7060:	10800160 	cmpeqi	r2,r2,5
    7064:	1000051e 	bne	r2,zero,707c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    7068:	e0bfff17 	ldw	r2,-4(fp)
    706c:	00c00044 	movi	r3,1
    7070:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7074:	0005883a 	mov	r2,zero
    7078:	00009f06 	br	72f8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    707c:	e0fffe03 	ldbu	r3,-8(fp)
    7080:	00bfe004 	movi	r2,-128
    7084:	1884703a 	and	r2,r3,r2
    7088:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    708c:	e0bff503 	ldbu	r2,-44(fp)
    7090:	10000626 	beq	r2,zero,70ac <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    7094:	e0bffe03 	ldbu	r2,-8(fp)
    7098:	10801fcc 	andi	r2,r2,127
    709c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    70a0:	00800044 	movi	r2,1
    70a4:	e0bff385 	stb	r2,-50(fp)
    70a8:	00000106 	br	70b0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    70ac:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    70b0:	e0bfff17 	ldw	r2,-4(fp)
    70b4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    70b8:	0005303a 	rdctl	r2,status
    70bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    70c0:	e0fffb17 	ldw	r3,-20(fp)
    70c4:	00bfff84 	movi	r2,-2
    70c8:	1884703a 	and	r2,r3,r2
    70cc:	1001703a 	wrctl	status,r2
  
  return context;
    70d0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    70d4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    70d8:	e0bffe03 	ldbu	r2,-8(fp)
    70dc:	10c00060 	cmpeqi	r3,r2,1
    70e0:	18005f1e 	bne	r3,zero,7260 <OSFlagAccept+0x260>
    70e4:	10c00088 	cmpgei	r3,r2,2
    70e8:	1800021e 	bne	r3,zero,70f4 <OSFlagAccept+0xf4>
    70ec:	10003f26 	beq	r2,zero,71ec <OSFlagAccept+0x1ec>
    70f0:	00007706 	br	72d0 <OSFlagAccept+0x2d0>
    70f4:	10c000a0 	cmpeqi	r3,r2,2
    70f8:	1800031e 	bne	r3,zero,7108 <OSFlagAccept+0x108>
    70fc:	108000e0 	cmpeqi	r2,r2,3
    7100:	10001e1e 	bne	r2,zero,717c <OSFlagAccept+0x17c>
    7104:	00007206 	br	72d0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    7108:	e0bffc17 	ldw	r2,-16(fp)
    710c:	10c0020b 	ldhu	r3,8(r2)
    7110:	e0bffd0b 	ldhu	r2,-12(fp)
    7114:	1884703a 	and	r2,r3,r2
    7118:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    711c:	e0fff30b 	ldhu	r3,-52(fp)
    7120:	e0bffd0b 	ldhu	r2,-12(fp)
    7124:	18800d1e 	bne	r3,r2,715c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7128:	e0bff383 	ldbu	r2,-50(fp)
    712c:	10800058 	cmpnei	r2,r2,1
    7130:	10000d1e 	bne	r2,zero,7168 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    7134:	e0bffc17 	ldw	r2,-16(fp)
    7138:	1080020b 	ldhu	r2,8(r2)
    713c:	1007883a 	mov	r3,r2
    7140:	e0bff30b 	ldhu	r2,-52(fp)
    7144:	0084303a 	nor	r2,zero,r2
    7148:	1884703a 	and	r2,r3,r2
    714c:	1007883a 	mov	r3,r2
    7150:	e0bffc17 	ldw	r2,-16(fp)
    7154:	10c0020d 	sth	r3,8(r2)
    7158:	00000306 	br	7168 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    715c:	e0bfff17 	ldw	r2,-4(fp)
    7160:	00c01c04 	movi	r3,112
    7164:	10c00005 	stb	r3,0(r2)
    7168:	e0bff417 	ldw	r2,-48(fp)
    716c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7170:	e0bff617 	ldw	r2,-40(fp)
    7174:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    7178:	00005e06 	br	72f4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    717c:	e0bffc17 	ldw	r2,-16(fp)
    7180:	10c0020b 	ldhu	r3,8(r2)
    7184:	e0bffd0b 	ldhu	r2,-12(fp)
    7188:	1884703a 	and	r2,r3,r2
    718c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    7190:	e0bff30b 	ldhu	r2,-52(fp)
    7194:	10000d26 	beq	r2,zero,71cc <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7198:	e0bff383 	ldbu	r2,-50(fp)
    719c:	10800058 	cmpnei	r2,r2,1
    71a0:	10000d1e 	bne	r2,zero,71d8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    71a4:	e0bffc17 	ldw	r2,-16(fp)
    71a8:	1080020b 	ldhu	r2,8(r2)
    71ac:	1007883a 	mov	r3,r2
    71b0:	e0bff30b 	ldhu	r2,-52(fp)
    71b4:	0084303a 	nor	r2,zero,r2
    71b8:	1884703a 	and	r2,r3,r2
    71bc:	1007883a 	mov	r3,r2
    71c0:	e0bffc17 	ldw	r2,-16(fp)
    71c4:	10c0020d 	sth	r3,8(r2)
    71c8:	00000306 	br	71d8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    71cc:	e0bfff17 	ldw	r2,-4(fp)
    71d0:	00c01c04 	movi	r3,112
    71d4:	10c00005 	stb	r3,0(r2)
    71d8:	e0bff417 	ldw	r2,-48(fp)
    71dc:	e0bff715 	stw	r2,-36(fp)
    71e0:	e0bff717 	ldw	r2,-36(fp)
    71e4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    71e8:	00004206 	br	72f4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    71ec:	e0bffc17 	ldw	r2,-16(fp)
    71f0:	1080020b 	ldhu	r2,8(r2)
    71f4:	0084303a 	nor	r2,zero,r2
    71f8:	1007883a 	mov	r3,r2
    71fc:	e0bffd0b 	ldhu	r2,-12(fp)
    7200:	1884703a 	and	r2,r3,r2
    7204:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7208:	e0fff30b 	ldhu	r3,-52(fp)
    720c:	e0bffd0b 	ldhu	r2,-12(fp)
    7210:	18800b1e 	bne	r3,r2,7240 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7214:	e0bff383 	ldbu	r2,-50(fp)
    7218:	10800058 	cmpnei	r2,r2,1
    721c:	10000b1e 	bne	r2,zero,724c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    7220:	e0bffc17 	ldw	r2,-16(fp)
    7224:	10c0020b 	ldhu	r3,8(r2)
    7228:	e0bff30b 	ldhu	r2,-52(fp)
    722c:	1884b03a 	or	r2,r3,r2
    7230:	1007883a 	mov	r3,r2
    7234:	e0bffc17 	ldw	r2,-16(fp)
    7238:	10c0020d 	sth	r3,8(r2)
    723c:	00000306 	br	724c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    7240:	e0bfff17 	ldw	r2,-4(fp)
    7244:	00c01c04 	movi	r3,112
    7248:	10c00005 	stb	r3,0(r2)
    724c:	e0bff417 	ldw	r2,-48(fp)
    7250:	e0bff815 	stw	r2,-32(fp)
    7254:	e0bff817 	ldw	r2,-32(fp)
    7258:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    725c:	00002506 	br	72f4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    7260:	e0bffc17 	ldw	r2,-16(fp)
    7264:	1080020b 	ldhu	r2,8(r2)
    7268:	0084303a 	nor	r2,zero,r2
    726c:	1007883a 	mov	r3,r2
    7270:	e0bffd0b 	ldhu	r2,-12(fp)
    7274:	1884703a 	and	r2,r3,r2
    7278:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    727c:	e0bff30b 	ldhu	r2,-52(fp)
    7280:	10000b26 	beq	r2,zero,72b0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7284:	e0bff383 	ldbu	r2,-50(fp)
    7288:	10800058 	cmpnei	r2,r2,1
    728c:	10000b1e 	bne	r2,zero,72bc <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    7290:	e0bffc17 	ldw	r2,-16(fp)
    7294:	10c0020b 	ldhu	r3,8(r2)
    7298:	e0bff30b 	ldhu	r2,-52(fp)
    729c:	1884b03a 	or	r2,r3,r2
    72a0:	1007883a 	mov	r3,r2
    72a4:	e0bffc17 	ldw	r2,-16(fp)
    72a8:	10c0020d 	sth	r3,8(r2)
    72ac:	00000306 	br	72bc <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    72b0:	e0bfff17 	ldw	r2,-4(fp)
    72b4:	00c01c04 	movi	r3,112
    72b8:	10c00005 	stb	r3,0(r2)
    72bc:	e0bff417 	ldw	r2,-48(fp)
    72c0:	e0bff915 	stw	r2,-28(fp)
    72c4:	e0bff917 	ldw	r2,-28(fp)
    72c8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    72cc:	00000906 	br	72f4 <OSFlagAccept+0x2f4>
    72d0:	e0bff417 	ldw	r2,-48(fp)
    72d4:	e0bffa15 	stw	r2,-24(fp)
    72d8:	e0bffa17 	ldw	r2,-24(fp)
    72dc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    72e0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    72e4:	e0bfff17 	ldw	r2,-4(fp)
    72e8:	00c01bc4 	movi	r3,111
    72ec:	10c00005 	stb	r3,0(r2)
             break;
    72f0:	0001883a 	nop
    }
    return (flags_rdy);
    72f4:	e0bff30b 	ldhu	r2,-52(fp)
}
    72f8:	e037883a 	mov	sp,fp
    72fc:	df000017 	ldw	fp,0(sp)
    7300:	dec00104 	addi	sp,sp,4
    7304:	f800283a 	ret

00007308 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    7308:	defff804 	addi	sp,sp,-32
    730c:	df000715 	stw	fp,28(sp)
    7310:	df000704 	addi	fp,sp,28
    7314:	2005883a 	mov	r2,r4
    7318:	e17fff15 	stw	r5,-4(fp)
    731c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    7320:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    7324:	e0bfff17 	ldw	r2,-4(fp)
    7328:	1000021e 	bne	r2,zero,7334 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    732c:	0005883a 	mov	r2,zero
    7330:	00003306 	br	7400 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    7334:	d0a7e003 	ldbu	r2,-24704(gp)
    7338:	10803fcc 	andi	r2,r2,255
    733c:	10000526 	beq	r2,zero,7354 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    7340:	e0bfff17 	ldw	r2,-4(fp)
    7344:	00c00404 	movi	r3,16
    7348:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    734c:	0005883a 	mov	r2,zero
    7350:	00002b06 	br	7400 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7354:	0005303a 	rdctl	r2,status
    7358:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    735c:	e0fffd17 	ldw	r3,-12(fp)
    7360:	00bfff84 	movi	r2,-2
    7364:	1884703a 	and	r2,r3,r2
    7368:	1001703a 	wrctl	status,r2
  
  return context;
    736c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7370:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    7374:	d0a7e317 	ldw	r2,-24692(gp)
    7378:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    737c:	e0bffb17 	ldw	r2,-20(fp)
    7380:	10001726 	beq	r2,zero,73e0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    7384:	d0a7e317 	ldw	r2,-24692(gp)
    7388:	10800117 	ldw	r2,4(r2)
    738c:	d0a7e315 	stw	r2,-24692(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    7390:	e0bffb17 	ldw	r2,-20(fp)
    7394:	00c00144 	movi	r3,5
    7398:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    739c:	e0bffb17 	ldw	r2,-20(fp)
    73a0:	e0fffe0b 	ldhu	r3,-8(fp)
    73a4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    73a8:	e0bffb17 	ldw	r2,-20(fp)
    73ac:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    73b0:	e0bffb17 	ldw	r2,-20(fp)
    73b4:	00c00fc4 	movi	r3,63
    73b8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    73bc:	e0bffb17 	ldw	r2,-20(fp)
    73c0:	100002c5 	stb	zero,11(r2)
    73c4:	e0bff917 	ldw	r2,-28(fp)
    73c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    73cc:	e0bffa17 	ldw	r2,-24(fp)
    73d0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    73d4:	e0bfff17 	ldw	r2,-4(fp)
    73d8:	10000005 	stb	zero,0(r2)
    73dc:	00000706 	br	73fc <OSFlagCreate+0xf4>
    73e0:	e0bff917 	ldw	r2,-28(fp)
    73e4:	e0bffc15 	stw	r2,-16(fp)
    73e8:	e0bffc17 	ldw	r2,-16(fp)
    73ec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    73f0:	e0bfff17 	ldw	r2,-4(fp)
    73f4:	00c01c84 	movi	r3,114
    73f8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    73fc:	e0bffb17 	ldw	r2,-20(fp)
}
    7400:	e037883a 	mov	sp,fp
    7404:	df000017 	ldw	fp,0(sp)
    7408:	dec00104 	addi	sp,sp,4
    740c:	f800283a 	ret

00007410 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    7410:	defff204 	addi	sp,sp,-56
    7414:	dfc00d15 	stw	ra,52(sp)
    7418:	df000c15 	stw	fp,48(sp)
    741c:	df000c04 	addi	fp,sp,48
    7420:	e13ffd15 	stw	r4,-12(fp)
    7424:	2805883a 	mov	r2,r5
    7428:	e1bfff15 	stw	r6,-4(fp)
    742c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7430:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7434:	e0bfff17 	ldw	r2,-4(fp)
    7438:	1000021e 	bne	r2,zero,7444 <OSFlagDel+0x34>
        return (pgrp);
    743c:	e0bffd17 	ldw	r2,-12(fp)
    7440:	00008006 	br	7644 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    7444:	e0bffd17 	ldw	r2,-12(fp)
    7448:	1000051e 	bne	r2,zero,7460 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    744c:	e0bfff17 	ldw	r2,-4(fp)
    7450:	00c01b84 	movi	r3,110
    7454:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    7458:	e0bffd17 	ldw	r2,-12(fp)
    745c:	00007906 	br	7644 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7460:	d0a7e003 	ldbu	r2,-24704(gp)
    7464:	10803fcc 	andi	r2,r2,255
    7468:	10000526 	beq	r2,zero,7480 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    746c:	e0bfff17 	ldw	r2,-4(fp)
    7470:	00c003c4 	movi	r3,15
    7474:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    7478:	e0bffd17 	ldw	r2,-12(fp)
    747c:	00007106 	br	7644 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    7480:	e0bffd17 	ldw	r2,-12(fp)
    7484:	10800003 	ldbu	r2,0(r2)
    7488:	10803fcc 	andi	r2,r2,255
    748c:	10800160 	cmpeqi	r2,r2,5
    7490:	1000051e 	bne	r2,zero,74a8 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    7494:	e0bfff17 	ldw	r2,-4(fp)
    7498:	00c00044 	movi	r3,1
    749c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    74a0:	e0bffd17 	ldw	r2,-12(fp)
    74a4:	00006706 	br	7644 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    74a8:	0005303a 	rdctl	r2,status
    74ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74b0:	e0fffc17 	ldw	r3,-16(fp)
    74b4:	00bfff84 	movi	r2,-2
    74b8:	1884703a 	and	r2,r3,r2
    74bc:	1001703a 	wrctl	status,r2
  
  return context;
    74c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    74c4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    74c8:	e0bffd17 	ldw	r2,-12(fp)
    74cc:	10800117 	ldw	r2,4(r2)
    74d0:	10000326 	beq	r2,zero,74e0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    74d4:	00800044 	movi	r2,1
    74d8:	e0bff405 	stb	r2,-48(fp)
    74dc:	00000106 	br	74e4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    74e0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    74e4:	e0bffe03 	ldbu	r2,-8(fp)
    74e8:	10000326 	beq	r2,zero,74f8 <OSFlagDel+0xe8>
    74ec:	10800060 	cmpeqi	r2,r2,1
    74f0:	1000231e 	bne	r2,zero,7580 <OSFlagDel+0x170>
    74f4:	00004806 	br	7618 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    74f8:	e0bff403 	ldbu	r2,-48(fp)
    74fc:	1000161e 	bne	r2,zero,7558 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    7500:	e0bffd17 	ldw	r2,-12(fp)
    7504:	00c00fc4 	movi	r3,63
    7508:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    750c:	e0bffd17 	ldw	r2,-12(fp)
    7510:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7514:	e0bffd17 	ldw	r2,-12(fp)
    7518:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    751c:	d0e7e317 	ldw	r3,-24692(gp)
    7520:	e0bffd17 	ldw	r2,-12(fp)
    7524:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    7528:	e0bffd17 	ldw	r2,-12(fp)
    752c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    7530:	e0bffd17 	ldw	r2,-12(fp)
    7534:	d0a7e315 	stw	r2,-24692(gp)
    7538:	e0bff717 	ldw	r2,-36(fp)
    753c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7540:	e0bff817 	ldw	r2,-32(fp)
    7544:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    7548:	e0bfff17 	ldw	r2,-4(fp)
    754c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    7550:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    7554:	00003a06 	br	7640 <OSFlagDel+0x230>
    7558:	e0bff717 	ldw	r2,-36(fp)
    755c:	e0bff915 	stw	r2,-28(fp)
    7560:	e0bff917 	ldw	r2,-28(fp)
    7564:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    7568:	e0bfff17 	ldw	r2,-4(fp)
    756c:	00c01244 	movi	r3,73
    7570:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    7574:	e0bffd17 	ldw	r2,-12(fp)
    7578:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    757c:	00003006 	br	7640 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7580:	e0bffd17 	ldw	r2,-12(fp)
    7584:	10800117 	ldw	r2,4(r2)
    7588:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    758c:	00000606 	br	75a8 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    7590:	000b883a 	mov	r5,zero
    7594:	e13ff517 	ldw	r4,-44(fp)
    7598:	000857c0 	call	857c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    759c:	e0bff517 	ldw	r2,-44(fp)
    75a0:	10800017 	ldw	r2,0(r2)
    75a4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    75a8:	e0bff517 	ldw	r2,-44(fp)
    75ac:	103ff81e 	bne	r2,zero,7590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007590>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    75b0:	e0bffd17 	ldw	r2,-12(fp)
    75b4:	00c00fc4 	movi	r3,63
    75b8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    75bc:	e0bffd17 	ldw	r2,-12(fp)
    75c0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    75c4:	e0bffd17 	ldw	r2,-12(fp)
    75c8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    75cc:	d0e7e317 	ldw	r3,-24692(gp)
    75d0:	e0bffd17 	ldw	r2,-12(fp)
    75d4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    75d8:	e0bffd17 	ldw	r2,-12(fp)
    75dc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    75e0:	e0bffd17 	ldw	r2,-12(fp)
    75e4:	d0a7e315 	stw	r2,-24692(gp)
    75e8:	e0bff717 	ldw	r2,-36(fp)
    75ec:	e0bffa15 	stw	r2,-24(fp)
    75f0:	e0bffa17 	ldw	r2,-24(fp)
    75f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    75f8:	e0bff403 	ldbu	r2,-48(fp)
    75fc:	10800058 	cmpnei	r2,r2,1
    7600:	1000011e 	bne	r2,zero,7608 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7604:	000678c0 	call	678c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    7608:	e0bfff17 	ldw	r2,-4(fp)
    760c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    7610:	e03ff615 	stw	zero,-40(fp)
             break;
    7614:	00000a06 	br	7640 <OSFlagDel+0x230>
    7618:	e0bff717 	ldw	r2,-36(fp)
    761c:	e0bffb15 	stw	r2,-20(fp)
    7620:	e0bffb17 	ldw	r2,-20(fp)
    7624:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    7628:	e0bfff17 	ldw	r2,-4(fp)
    762c:	00c001c4 	movi	r3,7
    7630:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    7634:	e0bffd17 	ldw	r2,-12(fp)
    7638:	e0bff615 	stw	r2,-40(fp)
             break;
    763c:	0001883a 	nop
    }
    return (pgrp_return);
    7640:	e0bff617 	ldw	r2,-40(fp)
}
    7644:	e037883a 	mov	sp,fp
    7648:	dfc00117 	ldw	ra,4(sp)
    764c:	df000017 	ldw	fp,0(sp)
    7650:	dec00204 	addi	sp,sp,8
    7654:	f800283a 	ret

00007658 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    7658:	defff604 	addi	sp,sp,-40
    765c:	dfc00915 	stw	ra,36(sp)
    7660:	df000815 	stw	fp,32(sp)
    7664:	df000804 	addi	fp,sp,32
    7668:	e13ffd15 	stw	r4,-12(fp)
    766c:	e17ffe15 	stw	r5,-8(fp)
    7670:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7674:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7678:	e0bfff17 	ldw	r2,-4(fp)
    767c:	1000021e 	bne	r2,zero,7688 <OSFlagNameGet+0x30>
        return (0);
    7680:	0005883a 	mov	r2,zero
    7684:	00003906 	br	776c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    7688:	e0bffd17 	ldw	r2,-12(fp)
    768c:	1000051e 	bne	r2,zero,76a4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7690:	e0bfff17 	ldw	r2,-4(fp)
    7694:	00c01b84 	movi	r3,110
    7698:	10c00005 	stb	r3,0(r2)
        return (0);
    769c:	0005883a 	mov	r2,zero
    76a0:	00003206 	br	776c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    76a4:	e0bffe17 	ldw	r2,-8(fp)
    76a8:	1000051e 	bne	r2,zero,76c0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    76ac:	e0bfff17 	ldw	r2,-4(fp)
    76b0:	00c00304 	movi	r3,12
    76b4:	10c00005 	stb	r3,0(r2)
        return (0);
    76b8:	0005883a 	mov	r2,zero
    76bc:	00002b06 	br	776c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    76c0:	d0a7e003 	ldbu	r2,-24704(gp)
    76c4:	10803fcc 	andi	r2,r2,255
    76c8:	10000526 	beq	r2,zero,76e0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    76cc:	e0bfff17 	ldw	r2,-4(fp)
    76d0:	00c00444 	movi	r3,17
    76d4:	10c00005 	stb	r3,0(r2)
        return (0);
    76d8:	0005883a 	mov	r2,zero
    76dc:	00002306 	br	776c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    76e0:	0005303a 	rdctl	r2,status
    76e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    76e8:	e0fffc17 	ldw	r3,-16(fp)
    76ec:	00bfff84 	movi	r2,-2
    76f0:	1884703a 	and	r2,r3,r2
    76f4:	1001703a 	wrctl	status,r2
  
  return context;
    76f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    76fc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    7700:	e0bffd17 	ldw	r2,-12(fp)
    7704:	10800003 	ldbu	r2,0(r2)
    7708:	10803fcc 	andi	r2,r2,255
    770c:	10800160 	cmpeqi	r2,r2,5
    7710:	1000091e 	bne	r2,zero,7738 <OSFlagNameGet+0xe0>
    7714:	e0bff817 	ldw	r2,-32(fp)
    7718:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    771c:	e0bff917 	ldw	r2,-28(fp)
    7720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    7724:	e0bfff17 	ldw	r2,-4(fp)
    7728:	00c00044 	movi	r3,1
    772c:	10c00005 	stb	r3,0(r2)
        return (0);
    7730:	0005883a 	mov	r2,zero
    7734:	00000d06 	br	776c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    7738:	e0bffd17 	ldw	r2,-12(fp)
    773c:	10800284 	addi	r2,r2,10
    7740:	100b883a 	mov	r5,r2
    7744:	e13ffe17 	ldw	r4,-8(fp)
    7748:	00068d00 	call	68d0 <OS_StrCopy>
    774c:	e0bffb05 	stb	r2,-20(fp)
    7750:	e0bff817 	ldw	r2,-32(fp)
    7754:	e0bffa15 	stw	r2,-24(fp)
    7758:	e0bffa17 	ldw	r2,-24(fp)
    775c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7760:	e0bfff17 	ldw	r2,-4(fp)
    7764:	10000005 	stb	zero,0(r2)
    return (len);
    7768:	e0bffb03 	ldbu	r2,-20(fp)
}
    776c:	e037883a 	mov	sp,fp
    7770:	dfc00117 	ldw	ra,4(sp)
    7774:	df000017 	ldw	fp,0(sp)
    7778:	dec00204 	addi	sp,sp,8
    777c:	f800283a 	ret

00007780 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    7780:	defff504 	addi	sp,sp,-44
    7784:	dfc00a15 	stw	ra,40(sp)
    7788:	df000915 	stw	fp,36(sp)
    778c:	df000904 	addi	fp,sp,36
    7790:	e13ffd15 	stw	r4,-12(fp)
    7794:	e17ffe15 	stw	r5,-8(fp)
    7798:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    779c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    77a0:	e0bfff17 	ldw	r2,-4(fp)
    77a4:	10004326 	beq	r2,zero,78b4 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    77a8:	e0bffd17 	ldw	r2,-12(fp)
    77ac:	1000041e 	bne	r2,zero,77c0 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    77b0:	e0bfff17 	ldw	r2,-4(fp)
    77b4:	00c01b84 	movi	r3,110
    77b8:	10c00005 	stb	r3,0(r2)
        return;
    77bc:	00003e06 	br	78b8 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    77c0:	e0bffe17 	ldw	r2,-8(fp)
    77c4:	1000041e 	bne	r2,zero,77d8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    77c8:	e0bfff17 	ldw	r2,-4(fp)
    77cc:	00c00304 	movi	r3,12
    77d0:	10c00005 	stb	r3,0(r2)
        return;
    77d4:	00003806 	br	78b8 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    77d8:	d0a7e003 	ldbu	r2,-24704(gp)
    77dc:	10803fcc 	andi	r2,r2,255
    77e0:	10000426 	beq	r2,zero,77f4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    77e4:	e0bfff17 	ldw	r2,-4(fp)
    77e8:	00c00484 	movi	r3,18
    77ec:	10c00005 	stb	r3,0(r2)
        return;
    77f0:	00003106 	br	78b8 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    77f4:	0005303a 	rdctl	r2,status
    77f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    77fc:	e0fffc17 	ldw	r3,-16(fp)
    7800:	00bfff84 	movi	r2,-2
    7804:	1884703a 	and	r2,r3,r2
    7808:	1001703a 	wrctl	status,r2
  
  return context;
    780c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7810:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    7814:	e0bffd17 	ldw	r2,-12(fp)
    7818:	10800003 	ldbu	r2,0(r2)
    781c:	10803fcc 	andi	r2,r2,255
    7820:	10800160 	cmpeqi	r2,r2,5
    7824:	1000081e 	bne	r2,zero,7848 <OSFlagNameSet+0xc8>
    7828:	e0bff717 	ldw	r2,-36(fp)
    782c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7830:	e0bff817 	ldw	r2,-32(fp)
    7834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    7838:	e0bfff17 	ldw	r2,-4(fp)
    783c:	00c00044 	movi	r3,1
    7840:	10c00005 	stb	r3,0(r2)
        return;
    7844:	00001c06 	br	78b8 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    7848:	e13ffe17 	ldw	r4,-8(fp)
    784c:	00069440 	call	6944 <OS_StrLen>
    7850:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    7854:	e0bffa03 	ldbu	r2,-24(fp)
    7858:	10800830 	cmpltui	r2,r2,32
    785c:	1000081e 	bne	r2,zero,7880 <OSFlagNameSet+0x100>
    7860:	e0bff717 	ldw	r2,-36(fp)
    7864:	e0bff915 	stw	r2,-28(fp)
    7868:	e0bff917 	ldw	r2,-28(fp)
    786c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    7870:	e0bfff17 	ldw	r2,-4(fp)
    7874:	00c01cc4 	movi	r3,115
    7878:	10c00005 	stb	r3,0(r2)
        return;
    787c:	00000e06 	br	78b8 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    7880:	e0bffd17 	ldw	r2,-12(fp)
    7884:	10800284 	addi	r2,r2,10
    7888:	e17ffe17 	ldw	r5,-8(fp)
    788c:	1009883a 	mov	r4,r2
    7890:	00068d00 	call	68d0 <OS_StrCopy>
    7894:	e0bff717 	ldw	r2,-36(fp)
    7898:	e0bffb15 	stw	r2,-20(fp)
    789c:	e0bffb17 	ldw	r2,-20(fp)
    78a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    78a4:	e0bfff17 	ldw	r2,-4(fp)
    78a8:	10000005 	stb	zero,0(r2)
    return;
    78ac:	0001883a 	nop
    78b0:	00000106 	br	78b8 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    78b4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    78b8:	e037883a 	mov	sp,fp
    78bc:	dfc00117 	ldw	ra,4(sp)
    78c0:	df000017 	ldw	fp,0(sp)
    78c4:	dec00204 	addi	sp,sp,8
    78c8:	f800283a 	ret

000078cc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    78cc:	deffe104 	addi	sp,sp,-124
    78d0:	dfc01e15 	stw	ra,120(sp)
    78d4:	df001d15 	stw	fp,116(sp)
    78d8:	df001d04 	addi	fp,sp,116
    78dc:	e13ffc15 	stw	r4,-16(fp)
    78e0:	2809883a 	mov	r4,r5
    78e4:	3007883a 	mov	r3,r6
    78e8:	3805883a 	mov	r2,r7
    78ec:	e13ffd0d 	sth	r4,-12(fp)
    78f0:	e0fffe05 	stb	r3,-8(fp)
    78f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    78f8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    78fc:	e0800217 	ldw	r2,8(fp)
    7900:	1000021e 	bne	r2,zero,790c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    7904:	0005883a 	mov	r2,zero
    7908:	00015906 	br	7e70 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    790c:	e0bffc17 	ldw	r2,-16(fp)
    7910:	1000051e 	bne	r2,zero,7928 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7914:	e0800217 	ldw	r2,8(fp)
    7918:	00c01b84 	movi	r3,110
    791c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7920:	0005883a 	mov	r2,zero
    7924:	00015206 	br	7e70 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7928:	d0a7e003 	ldbu	r2,-24704(gp)
    792c:	10803fcc 	andi	r2,r2,255
    7930:	10000526 	beq	r2,zero,7948 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    7934:	e0800217 	ldw	r2,8(fp)
    7938:	00c00084 	movi	r3,2
    793c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7940:	0005883a 	mov	r2,zero
    7944:	00014a06 	br	7e70 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    7948:	d0a7d203 	ldbu	r2,-24760(gp)
    794c:	10803fcc 	andi	r2,r2,255
    7950:	10000526 	beq	r2,zero,7968 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    7954:	e0800217 	ldw	r2,8(fp)
    7958:	00c00344 	movi	r3,13
    795c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7960:	0005883a 	mov	r2,zero
    7964:	00014206 	br	7e70 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    7968:	e0bffc17 	ldw	r2,-16(fp)
    796c:	10800003 	ldbu	r2,0(r2)
    7970:	10803fcc 	andi	r2,r2,255
    7974:	10800160 	cmpeqi	r2,r2,5
    7978:	1000051e 	bne	r2,zero,7990 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    797c:	e0800217 	ldw	r2,8(fp)
    7980:	00c00044 	movi	r3,1
    7984:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7988:	0005883a 	mov	r2,zero
    798c:	00013806 	br	7e70 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    7990:	e0fffe03 	ldbu	r3,-8(fp)
    7994:	00bfe004 	movi	r2,-128
    7998:	1884703a 	and	r2,r3,r2
    799c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    79a0:	e0bfe603 	ldbu	r2,-104(fp)
    79a4:	10000626 	beq	r2,zero,79c0 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    79a8:	e0bffe03 	ldbu	r2,-8(fp)
    79ac:	10801fcc 	andi	r2,r2,127
    79b0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    79b4:	00800044 	movi	r2,1
    79b8:	e0bfe405 	stb	r2,-112(fp)
    79bc:	00000106 	br	79c4 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    79c0:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79c4:	0005303a 	rdctl	r2,status
    79c8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    79cc:	e0fff617 	ldw	r3,-40(fp)
    79d0:	00bfff84 	movi	r2,-2
    79d4:	1884703a 	and	r2,r3,r2
    79d8:	1001703a 	wrctl	status,r2
  
  return context;
    79dc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    79e0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    79e4:	e0bffe03 	ldbu	r2,-8(fp)
    79e8:	10c00060 	cmpeqi	r3,r2,1
    79ec:	1800921e 	bne	r3,zero,7c38 <OSFlagPend+0x36c>
    79f0:	10c00088 	cmpgei	r3,r2,2
    79f4:	1800021e 	bne	r3,zero,7a00 <OSFlagPend+0x134>
    79f8:	10006126 	beq	r2,zero,7b80 <OSFlagPend+0x2b4>
    79fc:	0000bb06 	br	7cec <OSFlagPend+0x420>
    7a00:	10c000a0 	cmpeqi	r3,r2,2
    7a04:	1800031e 	bne	r3,zero,7a14 <OSFlagPend+0x148>
    7a08:	108000e0 	cmpeqi	r2,r2,3
    7a0c:	10002f1e 	bne	r2,zero,7acc <OSFlagPend+0x200>
    7a10:	0000b606 	br	7cec <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    7a14:	e0bffc17 	ldw	r2,-16(fp)
    7a18:	10c0020b 	ldhu	r3,8(r2)
    7a1c:	e0bffd0b 	ldhu	r2,-12(fp)
    7a20:	1884703a 	and	r2,r3,r2
    7a24:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7a28:	e0ffe80b 	ldhu	r3,-96(fp)
    7a2c:	e0bffd0b 	ldhu	r2,-12(fp)
    7a30:	1880171e 	bne	r3,r2,7a90 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7a34:	e0bfe403 	ldbu	r2,-112(fp)
    7a38:	10800058 	cmpnei	r2,r2,1
    7a3c:	1000091e 	bne	r2,zero,7a64 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    7a40:	e0bffc17 	ldw	r2,-16(fp)
    7a44:	1080020b 	ldhu	r2,8(r2)
    7a48:	1007883a 	mov	r3,r2
    7a4c:	e0bfe80b 	ldhu	r2,-96(fp)
    7a50:	0084303a 	nor	r2,zero,r2
    7a54:	1884703a 	and	r2,r3,r2
    7a58:	1007883a 	mov	r3,r2
    7a5c:	e0bffc17 	ldw	r2,-16(fp)
    7a60:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7a64:	d0a7e117 	ldw	r2,-24700(gp)
    7a68:	e0ffe80b 	ldhu	r3,-96(fp)
    7a6c:	10c00b0d 	sth	r3,44(r2)
    7a70:	e0bfe517 	ldw	r2,-108(fp)
    7a74:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7a78:	e0bfe717 	ldw	r2,-100(fp)
    7a7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7a80:	e0800217 	ldw	r2,8(fp)
    7a84:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7a88:	e0bfe80b 	ldhu	r2,-96(fp)
    7a8c:	0000f806 	br	7e70 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7a90:	e13ffd0b 	ldhu	r4,-12(fp)
    7a94:	e17ffe03 	ldbu	r5,-8(fp)
    7a98:	e0bfff0b 	ldhu	r2,-4(fp)
    7a9c:	e0fff704 	addi	r3,fp,-36
    7aa0:	d8800015 	stw	r2,0(sp)
    7aa4:	280f883a 	mov	r7,r5
    7aa8:	200d883a 	mov	r6,r4
    7aac:	180b883a 	mov	r5,r3
    7ab0:	e13ffc17 	ldw	r4,-16(fp)
    7ab4:	000833c0 	call	833c <OS_FlagBlock>
    7ab8:	e0bfe517 	ldw	r2,-108(fp)
    7abc:	e0bfe915 	stw	r2,-92(fp)
    7ac0:	e0bfe917 	ldw	r2,-92(fp)
    7ac4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7ac8:	00009206 	br	7d14 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    7acc:	e0bffc17 	ldw	r2,-16(fp)
    7ad0:	10c0020b 	ldhu	r3,8(r2)
    7ad4:	e0bffd0b 	ldhu	r2,-12(fp)
    7ad8:	1884703a 	and	r2,r3,r2
    7adc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    7ae0:	e0bfe80b 	ldhu	r2,-96(fp)
    7ae4:	10001726 	beq	r2,zero,7b44 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7ae8:	e0bfe403 	ldbu	r2,-112(fp)
    7aec:	10800058 	cmpnei	r2,r2,1
    7af0:	1000091e 	bne	r2,zero,7b18 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    7af4:	e0bffc17 	ldw	r2,-16(fp)
    7af8:	1080020b 	ldhu	r2,8(r2)
    7afc:	1007883a 	mov	r3,r2
    7b00:	e0bfe80b 	ldhu	r2,-96(fp)
    7b04:	0084303a 	nor	r2,zero,r2
    7b08:	1884703a 	and	r2,r3,r2
    7b0c:	1007883a 	mov	r3,r2
    7b10:	e0bffc17 	ldw	r2,-16(fp)
    7b14:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7b18:	d0a7e117 	ldw	r2,-24700(gp)
    7b1c:	e0ffe80b 	ldhu	r3,-96(fp)
    7b20:	10c00b0d 	sth	r3,44(r2)
    7b24:	e0bfe517 	ldw	r2,-108(fp)
    7b28:	e0bfea15 	stw	r2,-88(fp)
    7b2c:	e0bfea17 	ldw	r2,-88(fp)
    7b30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7b34:	e0800217 	ldw	r2,8(fp)
    7b38:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7b3c:	e0bfe80b 	ldhu	r2,-96(fp)
    7b40:	0000cb06 	br	7e70 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7b44:	e13ffd0b 	ldhu	r4,-12(fp)
    7b48:	e17ffe03 	ldbu	r5,-8(fp)
    7b4c:	e0bfff0b 	ldhu	r2,-4(fp)
    7b50:	e0fff704 	addi	r3,fp,-36
    7b54:	d8800015 	stw	r2,0(sp)
    7b58:	280f883a 	mov	r7,r5
    7b5c:	200d883a 	mov	r6,r4
    7b60:	180b883a 	mov	r5,r3
    7b64:	e13ffc17 	ldw	r4,-16(fp)
    7b68:	000833c0 	call	833c <OS_FlagBlock>
    7b6c:	e0bfe517 	ldw	r2,-108(fp)
    7b70:	e0bfeb15 	stw	r2,-84(fp)
    7b74:	e0bfeb17 	ldw	r2,-84(fp)
    7b78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7b7c:	00006506 	br	7d14 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    7b80:	e0bffc17 	ldw	r2,-16(fp)
    7b84:	1080020b 	ldhu	r2,8(r2)
    7b88:	0084303a 	nor	r2,zero,r2
    7b8c:	1007883a 	mov	r3,r2
    7b90:	e0bffd0b 	ldhu	r2,-12(fp)
    7b94:	1884703a 	and	r2,r3,r2
    7b98:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7b9c:	e0ffe80b 	ldhu	r3,-96(fp)
    7ba0:	e0bffd0b 	ldhu	r2,-12(fp)
    7ba4:	1880151e 	bne	r3,r2,7bfc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7ba8:	e0bfe403 	ldbu	r2,-112(fp)
    7bac:	10800058 	cmpnei	r2,r2,1
    7bb0:	1000071e 	bne	r2,zero,7bd0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    7bb4:	e0bffc17 	ldw	r2,-16(fp)
    7bb8:	10c0020b 	ldhu	r3,8(r2)
    7bbc:	e0bfe80b 	ldhu	r2,-96(fp)
    7bc0:	1884b03a 	or	r2,r3,r2
    7bc4:	1007883a 	mov	r3,r2
    7bc8:	e0bffc17 	ldw	r2,-16(fp)
    7bcc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7bd0:	d0a7e117 	ldw	r2,-24700(gp)
    7bd4:	e0ffe80b 	ldhu	r3,-96(fp)
    7bd8:	10c00b0d 	sth	r3,44(r2)
    7bdc:	e0bfe517 	ldw	r2,-108(fp)
    7be0:	e0bfec15 	stw	r2,-80(fp)
    7be4:	e0bfec17 	ldw	r2,-80(fp)
    7be8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7bec:	e0800217 	ldw	r2,8(fp)
    7bf0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7bf4:	e0bfe80b 	ldhu	r2,-96(fp)
    7bf8:	00009d06 	br	7e70 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7bfc:	e13ffd0b 	ldhu	r4,-12(fp)
    7c00:	e17ffe03 	ldbu	r5,-8(fp)
    7c04:	e0bfff0b 	ldhu	r2,-4(fp)
    7c08:	e0fff704 	addi	r3,fp,-36
    7c0c:	d8800015 	stw	r2,0(sp)
    7c10:	280f883a 	mov	r7,r5
    7c14:	200d883a 	mov	r6,r4
    7c18:	180b883a 	mov	r5,r3
    7c1c:	e13ffc17 	ldw	r4,-16(fp)
    7c20:	000833c0 	call	833c <OS_FlagBlock>
    7c24:	e0bfe517 	ldw	r2,-108(fp)
    7c28:	e0bfed15 	stw	r2,-76(fp)
    7c2c:	e0bfed17 	ldw	r2,-76(fp)
    7c30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7c34:	00003706 	br	7d14 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    7c38:	e0bffc17 	ldw	r2,-16(fp)
    7c3c:	1080020b 	ldhu	r2,8(r2)
    7c40:	0084303a 	nor	r2,zero,r2
    7c44:	1007883a 	mov	r3,r2
    7c48:	e0bffd0b 	ldhu	r2,-12(fp)
    7c4c:	1884703a 	and	r2,r3,r2
    7c50:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    7c54:	e0bfe80b 	ldhu	r2,-96(fp)
    7c58:	10001526 	beq	r2,zero,7cb0 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7c5c:	e0bfe403 	ldbu	r2,-112(fp)
    7c60:	10800058 	cmpnei	r2,r2,1
    7c64:	1000071e 	bne	r2,zero,7c84 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    7c68:	e0bffc17 	ldw	r2,-16(fp)
    7c6c:	10c0020b 	ldhu	r3,8(r2)
    7c70:	e0bfe80b 	ldhu	r2,-96(fp)
    7c74:	1884b03a 	or	r2,r3,r2
    7c78:	1007883a 	mov	r3,r2
    7c7c:	e0bffc17 	ldw	r2,-16(fp)
    7c80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7c84:	d0a7e117 	ldw	r2,-24700(gp)
    7c88:	e0ffe80b 	ldhu	r3,-96(fp)
    7c8c:	10c00b0d 	sth	r3,44(r2)
    7c90:	e0bfe517 	ldw	r2,-108(fp)
    7c94:	e0bfee15 	stw	r2,-72(fp)
    7c98:	e0bfee17 	ldw	r2,-72(fp)
    7c9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7ca0:	e0800217 	ldw	r2,8(fp)
    7ca4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7ca8:	e0bfe80b 	ldhu	r2,-96(fp)
    7cac:	00007006 	br	7e70 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7cb0:	e13ffd0b 	ldhu	r4,-12(fp)
    7cb4:	e17ffe03 	ldbu	r5,-8(fp)
    7cb8:	e0bfff0b 	ldhu	r2,-4(fp)
    7cbc:	e0fff704 	addi	r3,fp,-36
    7cc0:	d8800015 	stw	r2,0(sp)
    7cc4:	280f883a 	mov	r7,r5
    7cc8:	200d883a 	mov	r6,r4
    7ccc:	180b883a 	mov	r5,r3
    7cd0:	e13ffc17 	ldw	r4,-16(fp)
    7cd4:	000833c0 	call	833c <OS_FlagBlock>
    7cd8:	e0bfe517 	ldw	r2,-108(fp)
    7cdc:	e0bfef15 	stw	r2,-68(fp)
    7ce0:	e0bfef17 	ldw	r2,-68(fp)
    7ce4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7ce8:	00000a06 	br	7d14 <OSFlagPend+0x448>
    7cec:	e0bfe517 	ldw	r2,-108(fp)
    7cf0:	e0bff015 	stw	r2,-64(fp)
    7cf4:	e0bff017 	ldw	r2,-64(fp)
    7cf8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    7cfc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    7d00:	e0800217 	ldw	r2,8(fp)
    7d04:	00c01bc4 	movi	r3,111
    7d08:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    7d0c:	e0bfe80b 	ldhu	r2,-96(fp)
    7d10:	00005706 	br	7e70 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    7d14:	000678c0 	call	678c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d18:	0005303a 	rdctl	r2,status
    7d1c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d20:	e0fff117 	ldw	r3,-60(fp)
    7d24:	00bfff84 	movi	r2,-2
    7d28:	1884703a 	and	r2,r3,r2
    7d2c:	1001703a 	wrctl	status,r2
  
  return context;
    7d30:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    7d34:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    7d38:	d0a7e117 	ldw	r2,-24700(gp)
    7d3c:	10800c43 	ldbu	r2,49(r2)
    7d40:	10803fcc 	andi	r2,r2,255
    7d44:	10001c26 	beq	r2,zero,7db8 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    7d48:	d0a7e117 	ldw	r2,-24700(gp)
    7d4c:	10800c43 	ldbu	r2,49(r2)
    7d50:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    7d54:	d0a7e117 	ldw	r2,-24700(gp)
    7d58:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    7d5c:	e0bff704 	addi	r2,fp,-36
    7d60:	1009883a 	mov	r4,r2
    7d64:	00086700 	call	8670 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    7d68:	d0a7e117 	ldw	r2,-24700(gp)
    7d6c:	10000c05 	stb	zero,48(r2)
    7d70:	e0bfe517 	ldw	r2,-108(fp)
    7d74:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d78:	e0bff217 	ldw	r2,-56(fp)
    7d7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    7d80:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    7d84:	e0bff303 	ldbu	r2,-52(fp)
    7d88:	108000a0 	cmpeqi	r2,r2,2
    7d8c:	10000426 	beq	r2,zero,7da0 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    7d90:	e0800217 	ldw	r2,8(fp)
    7d94:	00c00384 	movi	r3,14
    7d98:	10c00005 	stb	r3,0(r2)
                 break;
    7d9c:	00000406 	br	7db0 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    7da0:	e0800217 	ldw	r2,8(fp)
    7da4:	00c00284 	movi	r3,10
    7da8:	10c00005 	stb	r3,0(r2)
                 break;
    7dac:	0001883a 	nop
        }
        return (flags_rdy);
    7db0:	e0bfe80b 	ldhu	r2,-96(fp)
    7db4:	00002e06 	br	7e70 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    7db8:	d0a7e117 	ldw	r2,-24700(gp)
    7dbc:	10800b0b 	ldhu	r2,44(r2)
    7dc0:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    7dc4:	e0bfe403 	ldbu	r2,-112(fp)
    7dc8:	10800058 	cmpnei	r2,r2,1
    7dcc:	1000211e 	bne	r2,zero,7e54 <OSFlagPend+0x588>
        switch (wait_type) {
    7dd0:	e0bffe03 	ldbu	r2,-8(fp)
    7dd4:	10001616 	blt	r2,zero,7e30 <OSFlagPend+0x564>
    7dd8:	10c00090 	cmplti	r3,r2,2
    7ddc:	18000c1e 	bne	r3,zero,7e10 <OSFlagPend+0x544>
    7de0:	10800108 	cmpgei	r2,r2,4
    7de4:	1000121e 	bne	r2,zero,7e30 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    7de8:	e0bffc17 	ldw	r2,-16(fp)
    7dec:	1080020b 	ldhu	r2,8(r2)
    7df0:	1007883a 	mov	r3,r2
    7df4:	e0bfe80b 	ldhu	r2,-96(fp)
    7df8:	0084303a 	nor	r2,zero,r2
    7dfc:	1884703a 	and	r2,r3,r2
    7e00:	1007883a 	mov	r3,r2
    7e04:	e0bffc17 	ldw	r2,-16(fp)
    7e08:	10c0020d 	sth	r3,8(r2)
                 break;
    7e0c:	00001106 	br	7e54 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    7e10:	e0bffc17 	ldw	r2,-16(fp)
    7e14:	10c0020b 	ldhu	r3,8(r2)
    7e18:	e0bfe80b 	ldhu	r2,-96(fp)
    7e1c:	1884b03a 	or	r2,r3,r2
    7e20:	1007883a 	mov	r3,r2
    7e24:	e0bffc17 	ldw	r2,-16(fp)
    7e28:	10c0020d 	sth	r3,8(r2)
                 break;
    7e2c:	00000906 	br	7e54 <OSFlagPend+0x588>
    7e30:	e0bfe517 	ldw	r2,-108(fp)
    7e34:	e0bff415 	stw	r2,-48(fp)
    7e38:	e0bff417 	ldw	r2,-48(fp)
    7e3c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7e40:	e0800217 	ldw	r2,8(fp)
    7e44:	00c01bc4 	movi	r3,111
    7e48:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    7e4c:	0005883a 	mov	r2,zero
    7e50:	00000706 	br	7e70 <OSFlagPend+0x5a4>
    7e54:	e0bfe517 	ldw	r2,-108(fp)
    7e58:	e0bff515 	stw	r2,-44(fp)
    7e5c:	e0bff517 	ldw	r2,-44(fp)
    7e60:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    7e64:	e0800217 	ldw	r2,8(fp)
    7e68:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    7e6c:	e0bfe80b 	ldhu	r2,-96(fp)
}
    7e70:	e037883a 	mov	sp,fp
    7e74:	dfc00117 	ldw	ra,4(sp)
    7e78:	df000017 	ldw	fp,0(sp)
    7e7c:	dec00204 	addi	sp,sp,8
    7e80:	f800283a 	ret

00007e84 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    7e84:	defffb04 	addi	sp,sp,-20
    7e88:	df000415 	stw	fp,16(sp)
    7e8c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7e90:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e94:	0005303a 	rdctl	r2,status
    7e98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e9c:	e0fffe17 	ldw	r3,-8(fp)
    7ea0:	00bfff84 	movi	r2,-2
    7ea4:	1884703a 	and	r2,r3,r2
    7ea8:	1001703a 	wrctl	status,r2
  
  return context;
    7eac:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    7eb0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    7eb4:	d0a7e117 	ldw	r2,-24700(gp)
    7eb8:	10800b0b 	ldhu	r2,44(r2)
    7ebc:	e0bffd0d 	sth	r2,-12(fp)
    7ec0:	e0bffc17 	ldw	r2,-16(fp)
    7ec4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ec8:	e0bfff17 	ldw	r2,-4(fp)
    7ecc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    7ed0:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7ed4:	e037883a 	mov	sp,fp
    7ed8:	df000017 	ldw	fp,0(sp)
    7edc:	dec00104 	addi	sp,sp,4
    7ee0:	f800283a 	ret

00007ee4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    7ee4:	deffef04 	addi	sp,sp,-68
    7ee8:	dfc01015 	stw	ra,64(sp)
    7eec:	df000f15 	stw	fp,60(sp)
    7ef0:	df000f04 	addi	fp,sp,60
    7ef4:	e13ffc15 	stw	r4,-16(fp)
    7ef8:	2807883a 	mov	r3,r5
    7efc:	3005883a 	mov	r2,r6
    7f00:	e1ffff15 	stw	r7,-4(fp)
    7f04:	e0fffd0d 	sth	r3,-12(fp)
    7f08:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    7f0c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    7f10:	e0bfff17 	ldw	r2,-4(fp)
    7f14:	1000021e 	bne	r2,zero,7f20 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    7f18:	0005883a 	mov	r2,zero
    7f1c:	0000d106 	br	8264 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    7f20:	e0bffc17 	ldw	r2,-16(fp)
    7f24:	1000051e 	bne	r2,zero,7f3c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7f28:	e0bfff17 	ldw	r2,-4(fp)
    7f2c:	00c01b84 	movi	r3,110
    7f30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7f34:	0005883a 	mov	r2,zero
    7f38:	0000ca06 	br	8264 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    7f3c:	e0bffc17 	ldw	r2,-16(fp)
    7f40:	10800003 	ldbu	r2,0(r2)
    7f44:	10803fcc 	andi	r2,r2,255
    7f48:	10800160 	cmpeqi	r2,r2,5
    7f4c:	1000051e 	bne	r2,zero,7f64 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    7f50:	e0bfff17 	ldw	r2,-4(fp)
    7f54:	00c00044 	movi	r3,1
    7f58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7f5c:	0005883a 	mov	r2,zero
    7f60:	0000c006 	br	8264 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f64:	0005303a 	rdctl	r2,status
    7f68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f6c:	e0fffb17 	ldw	r3,-20(fp)
    7f70:	00bfff84 	movi	r2,-2
    7f74:	1884703a 	and	r2,r3,r2
    7f78:	1001703a 	wrctl	status,r2
  
  return context;
    7f7c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7f80:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    7f84:	e0bffe03 	ldbu	r2,-8(fp)
    7f88:	10000326 	beq	r2,zero,7f98 <OSFlagPost+0xb4>
    7f8c:	10800060 	cmpeqi	r2,r2,1
    7f90:	10000b1e 	bne	r2,zero,7fc0 <OSFlagPost+0xdc>
    7f94:	00001206 	br	7fe0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    7f98:	e0bffc17 	ldw	r2,-16(fp)
    7f9c:	1080020b 	ldhu	r2,8(r2)
    7fa0:	1007883a 	mov	r3,r2
    7fa4:	e0bffd0b 	ldhu	r2,-12(fp)
    7fa8:	0084303a 	nor	r2,zero,r2
    7fac:	1884703a 	and	r2,r3,r2
    7fb0:	1007883a 	mov	r3,r2
    7fb4:	e0bffc17 	ldw	r2,-16(fp)
    7fb8:	10c0020d 	sth	r3,8(r2)
             break;
    7fbc:	00001106 	br	8004 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    7fc0:	e0bffc17 	ldw	r2,-16(fp)
    7fc4:	10c0020b 	ldhu	r3,8(r2)
    7fc8:	e0bffd0b 	ldhu	r2,-12(fp)
    7fcc:	1884b03a 	or	r2,r3,r2
    7fd0:	1007883a 	mov	r3,r2
    7fd4:	e0bffc17 	ldw	r2,-16(fp)
    7fd8:	10c0020d 	sth	r3,8(r2)
             break;
    7fdc:	00000906 	br	8004 <OSFlagPost+0x120>
    7fe0:	e0bff317 	ldw	r2,-52(fp)
    7fe4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7fe8:	e0bff417 	ldw	r2,-48(fp)
    7fec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    7ff0:	e0bfff17 	ldw	r2,-4(fp)
    7ff4:	00c01c44 	movi	r3,113
    7ff8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    7ffc:	0005883a 	mov	r2,zero
    8000:	00009806 	br	8264 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    8004:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    8008:	e0bffc17 	ldw	r2,-16(fp)
    800c:	10800117 	ldw	r2,4(r2)
    8010:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    8014:	00007706 	br	81f4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    8018:	e0bff117 	ldw	r2,-60(fp)
    801c:	10800483 	ldbu	r2,18(r2)
    8020:	10803fcc 	andi	r2,r2,255
    8024:	10c00060 	cmpeqi	r3,r2,1
    8028:	18004a1e 	bne	r3,zero,8154 <OSFlagPost+0x270>
    802c:	10c00088 	cmpgei	r3,r2,2
    8030:	1800021e 	bne	r3,zero,803c <OSFlagPost+0x158>
    8034:	10002f26 	beq	r2,zero,80f4 <OSFlagPost+0x210>
    8038:	00005b06 	br	81a8 <OSFlagPost+0x2c4>
    803c:	10c000a0 	cmpeqi	r3,r2,2
    8040:	1800031e 	bne	r3,zero,8050 <OSFlagPost+0x16c>
    8044:	108000e0 	cmpeqi	r2,r2,3
    8048:	1000171e 	bne	r2,zero,80a8 <OSFlagPost+0x1c4>
    804c:	00005606 	br	81a8 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    8050:	e0bffc17 	ldw	r2,-16(fp)
    8054:	10c0020b 	ldhu	r3,8(r2)
    8058:	e0bff117 	ldw	r2,-60(fp)
    805c:	1080040b 	ldhu	r2,16(r2)
    8060:	1884703a 	and	r2,r3,r2
    8064:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    8068:	e0bff117 	ldw	r2,-60(fp)
    806c:	1080040b 	ldhu	r2,16(r2)
    8070:	10ffffcc 	andi	r3,r2,65535
    8074:	e0bff60b 	ldhu	r2,-40(fp)
    8078:	1880541e 	bne	r3,r2,81cc <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    807c:	e0bff60b 	ldhu	r2,-40(fp)
    8080:	100b883a 	mov	r5,r2
    8084:	e13ff117 	ldw	r4,-60(fp)
    8088:	000857c0 	call	857c <OS_FlagTaskRdy>
    808c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    8090:	e0bff683 	ldbu	r2,-38(fp)
    8094:	10800058 	cmpnei	r2,r2,1
    8098:	10004c1e 	bne	r2,zero,81cc <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    809c:	00800044 	movi	r2,1
    80a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    80a4:	00004906 	br	81cc <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    80a8:	e0bffc17 	ldw	r2,-16(fp)
    80ac:	10c0020b 	ldhu	r3,8(r2)
    80b0:	e0bff117 	ldw	r2,-60(fp)
    80b4:	1080040b 	ldhu	r2,16(r2)
    80b8:	1884703a 	and	r2,r3,r2
    80bc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    80c0:	e0bff60b 	ldhu	r2,-40(fp)
    80c4:	10004326 	beq	r2,zero,81d4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    80c8:	e0bff60b 	ldhu	r2,-40(fp)
    80cc:	100b883a 	mov	r5,r2
    80d0:	e13ff117 	ldw	r4,-60(fp)
    80d4:	000857c0 	call	857c <OS_FlagTaskRdy>
    80d8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    80dc:	e0bff683 	ldbu	r2,-38(fp)
    80e0:	10800058 	cmpnei	r2,r2,1
    80e4:	10003b1e 	bne	r2,zero,81d4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    80e8:	00800044 	movi	r2,1
    80ec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    80f0:	00003806 	br	81d4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    80f4:	e0bffc17 	ldw	r2,-16(fp)
    80f8:	1080020b 	ldhu	r2,8(r2)
    80fc:	0084303a 	nor	r2,zero,r2
    8100:	1007883a 	mov	r3,r2
    8104:	e0bff117 	ldw	r2,-60(fp)
    8108:	1080040b 	ldhu	r2,16(r2)
    810c:	1884703a 	and	r2,r3,r2
    8110:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    8114:	e0bff117 	ldw	r2,-60(fp)
    8118:	1080040b 	ldhu	r2,16(r2)
    811c:	10ffffcc 	andi	r3,r2,65535
    8120:	e0bff60b 	ldhu	r2,-40(fp)
    8124:	18802d1e 	bne	r3,r2,81dc <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8128:	e0bff60b 	ldhu	r2,-40(fp)
    812c:	100b883a 	mov	r5,r2
    8130:	e13ff117 	ldw	r4,-60(fp)
    8134:	000857c0 	call	857c <OS_FlagTaskRdy>
    8138:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    813c:	e0bff683 	ldbu	r2,-38(fp)
    8140:	10800058 	cmpnei	r2,r2,1
    8144:	1000251e 	bne	r2,zero,81dc <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    8148:	00800044 	movi	r2,1
    814c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    8150:	00002206 	br	81dc <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    8154:	e0bffc17 	ldw	r2,-16(fp)
    8158:	1080020b 	ldhu	r2,8(r2)
    815c:	0084303a 	nor	r2,zero,r2
    8160:	1007883a 	mov	r3,r2
    8164:	e0bff117 	ldw	r2,-60(fp)
    8168:	1080040b 	ldhu	r2,16(r2)
    816c:	1884703a 	and	r2,r3,r2
    8170:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    8174:	e0bff60b 	ldhu	r2,-40(fp)
    8178:	10001a26 	beq	r2,zero,81e4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    817c:	e0bff60b 	ldhu	r2,-40(fp)
    8180:	100b883a 	mov	r5,r2
    8184:	e13ff117 	ldw	r4,-60(fp)
    8188:	000857c0 	call	857c <OS_FlagTaskRdy>
    818c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    8190:	e0bff683 	ldbu	r2,-38(fp)
    8194:	10800058 	cmpnei	r2,r2,1
    8198:	1000121e 	bne	r2,zero,81e4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    819c:	00800044 	movi	r2,1
    81a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    81a4:	00000f06 	br	81e4 <OSFlagPost+0x300>
    81a8:	e0bff317 	ldw	r2,-52(fp)
    81ac:	e0bff515 	stw	r2,-44(fp)
    81b0:	e0bff517 	ldw	r2,-44(fp)
    81b4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    81b8:	e0bfff17 	ldw	r2,-4(fp)
    81bc:	00c01bc4 	movi	r3,111
    81c0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    81c4:	0005883a 	mov	r2,zero
    81c8:	00002606 	br	8264 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    81cc:	0001883a 	nop
    81d0:	00000506 	br	81e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    81d4:	0001883a 	nop
    81d8:	00000306 	br	81e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    81dc:	0001883a 	nop
    81e0:	00000106 	br	81e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    81e4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    81e8:	e0bff117 	ldw	r2,-60(fp)
    81ec:	10800017 	ldw	r2,0(r2)
    81f0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    81f4:	e0bff117 	ldw	r2,-60(fp)
    81f8:	103f871e 	bne	r2,zero,8018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008018>
    81fc:	e0bff317 	ldw	r2,-52(fp)
    8200:	e0bff715 	stw	r2,-36(fp)
    8204:	e0bff717 	ldw	r2,-36(fp)
    8208:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    820c:	e0bff203 	ldbu	r2,-56(fp)
    8210:	10800058 	cmpnei	r2,r2,1
    8214:	1000011e 	bne	r2,zero,821c <OSFlagPost+0x338>
        OS_Sched();
    8218:	000678c0 	call	678c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    821c:	0005303a 	rdctl	r2,status
    8220:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8224:	e0fffa17 	ldw	r3,-24(fp)
    8228:	00bfff84 	movi	r2,-2
    822c:	1884703a 	and	r2,r3,r2
    8230:	1001703a 	wrctl	status,r2
  
  return context;
    8234:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8238:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    823c:	e0bffc17 	ldw	r2,-16(fp)
    8240:	1080020b 	ldhu	r2,8(r2)
    8244:	e0bff90d 	sth	r2,-28(fp)
    8248:	e0bff317 	ldw	r2,-52(fp)
    824c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8250:	e0bff817 	ldw	r2,-32(fp)
    8254:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    8258:	e0bfff17 	ldw	r2,-4(fp)
    825c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    8260:	e0bff90b 	ldhu	r2,-28(fp)
}
    8264:	e037883a 	mov	sp,fp
    8268:	dfc00117 	ldw	ra,4(sp)
    826c:	df000017 	ldw	fp,0(sp)
    8270:	dec00204 	addi	sp,sp,8
    8274:	f800283a 	ret

00008278 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    8278:	defff904 	addi	sp,sp,-28
    827c:	df000615 	stw	fp,24(sp)
    8280:	df000604 	addi	fp,sp,24
    8284:	e13ffe15 	stw	r4,-8(fp)
    8288:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    828c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    8290:	e0bfff17 	ldw	r2,-4(fp)
    8294:	1000021e 	bne	r2,zero,82a0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    8298:	0005883a 	mov	r2,zero
    829c:	00002306 	br	832c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    82a0:	e0bffe17 	ldw	r2,-8(fp)
    82a4:	1000051e 	bne	r2,zero,82bc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    82a8:	e0bfff17 	ldw	r2,-4(fp)
    82ac:	00c01b84 	movi	r3,110
    82b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    82b4:	0005883a 	mov	r2,zero
    82b8:	00001c06 	br	832c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    82bc:	e0bffe17 	ldw	r2,-8(fp)
    82c0:	10800003 	ldbu	r2,0(r2)
    82c4:	10803fcc 	andi	r2,r2,255
    82c8:	10800160 	cmpeqi	r2,r2,5
    82cc:	1000051e 	bne	r2,zero,82e4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    82d0:	e0bfff17 	ldw	r2,-4(fp)
    82d4:	00c00044 	movi	r3,1
    82d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    82dc:	0005883a 	mov	r2,zero
    82e0:	00001206 	br	832c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    82e4:	0005303a 	rdctl	r2,status
    82e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    82ec:	e0fffc17 	ldw	r3,-16(fp)
    82f0:	00bfff84 	movi	r2,-2
    82f4:	1884703a 	and	r2,r3,r2
    82f8:	1001703a 	wrctl	status,r2
  
  return context;
    82fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8300:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    8304:	e0bffe17 	ldw	r2,-8(fp)
    8308:	1080020b 	ldhu	r2,8(r2)
    830c:	e0bffb0d 	sth	r2,-20(fp)
    8310:	e0bffa17 	ldw	r2,-24(fp)
    8314:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8318:	e0bffd17 	ldw	r2,-12(fp)
    831c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8320:	e0bfff17 	ldw	r2,-4(fp)
    8324:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    8328:	e0bffb0b 	ldhu	r2,-20(fp)
}
    832c:	e037883a 	mov	sp,fp
    8330:	df000017 	ldw	fp,0(sp)
    8334:	dec00104 	addi	sp,sp,4
    8338:	f800283a 	ret

0000833c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    833c:	defff804 	addi	sp,sp,-32
    8340:	df000715 	stw	fp,28(sp)
    8344:	df000704 	addi	fp,sp,28
    8348:	e13ffb15 	stw	r4,-20(fp)
    834c:	e17ffc15 	stw	r5,-16(fp)
    8350:	3009883a 	mov	r4,r6
    8354:	3807883a 	mov	r3,r7
    8358:	e0800117 	ldw	r2,4(fp)
    835c:	e13ffd0d 	sth	r4,-12(fp)
    8360:	e0fffe05 	stb	r3,-8(fp)
    8364:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    8368:	d0a7e117 	ldw	r2,-24700(gp)
    836c:	d0e7e117 	ldw	r3,-24700(gp)
    8370:	18c00c03 	ldbu	r3,48(r3)
    8374:	18c00814 	ori	r3,r3,32
    8378:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    837c:	d0a7e117 	ldw	r2,-24700(gp)
    8380:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    8384:	d0a7e117 	ldw	r2,-24700(gp)
    8388:	e0ffff0b 	ldhu	r3,-4(fp)
    838c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    8390:	d0a7e117 	ldw	r2,-24700(gp)
    8394:	e0fffc17 	ldw	r3,-16(fp)
    8398:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    839c:	e0bffc17 	ldw	r2,-16(fp)
    83a0:	e0fffd0b 	ldhu	r3,-12(fp)
    83a4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    83a8:	e0bffc17 	ldw	r2,-16(fp)
    83ac:	e0fffe03 	ldbu	r3,-8(fp)
    83b0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    83b4:	d0e7e117 	ldw	r3,-24700(gp)
    83b8:	e0bffc17 	ldw	r2,-16(fp)
    83bc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    83c0:	e0bffb17 	ldw	r2,-20(fp)
    83c4:	10c00117 	ldw	r3,4(r2)
    83c8:	e0bffc17 	ldw	r2,-16(fp)
    83cc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    83d0:	e0bffc17 	ldw	r2,-16(fp)
    83d4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    83d8:	e0bffc17 	ldw	r2,-16(fp)
    83dc:	e0fffb17 	ldw	r3,-20(fp)
    83e0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    83e4:	e0bffb17 	ldw	r2,-20(fp)
    83e8:	10800117 	ldw	r2,4(r2)
    83ec:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    83f0:	e0bff917 	ldw	r2,-28(fp)
    83f4:	10000326 	beq	r2,zero,8404 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    83f8:	e0bff917 	ldw	r2,-28(fp)
    83fc:	e0fffc17 	ldw	r3,-16(fp)
    8400:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    8404:	e0bffb17 	ldw	r2,-20(fp)
    8408:	e0fffc17 	ldw	r3,-16(fp)
    840c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    8410:	d0a7e117 	ldw	r2,-24700(gp)
    8414:	10800d03 	ldbu	r2,52(r2)
    8418:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    841c:	e0fffa03 	ldbu	r3,-24(fp)
    8420:	e13ffa03 	ldbu	r4,-24(fp)
    8424:	d0a7de44 	addi	r2,gp,-24711
    8428:	2085883a 	add	r2,r4,r2
    842c:	10800003 	ldbu	r2,0(r2)
    8430:	1009883a 	mov	r4,r2
    8434:	d0a7e117 	ldw	r2,-24700(gp)
    8438:	10800d43 	ldbu	r2,53(r2)
    843c:	0084303a 	nor	r2,zero,r2
    8440:	2084703a 	and	r2,r4,r2
    8444:	1009883a 	mov	r4,r2
    8448:	d0a7de44 	addi	r2,gp,-24711
    844c:	1885883a 	add	r2,r3,r2
    8450:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    8454:	e0fffa03 	ldbu	r3,-24(fp)
    8458:	d0a7de44 	addi	r2,gp,-24711
    845c:	1885883a 	add	r2,r3,r2
    8460:	10800003 	ldbu	r2,0(r2)
    8464:	10803fcc 	andi	r2,r2,255
    8468:	1000071e 	bne	r2,zero,8488 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    846c:	d0a7e117 	ldw	r2,-24700(gp)
    8470:	10800d83 	ldbu	r2,54(r2)
    8474:	0084303a 	nor	r2,zero,r2
    8478:	1007883a 	mov	r3,r2
    847c:	d0a7de03 	ldbu	r2,-24712(gp)
    8480:	1884703a 	and	r2,r3,r2
    8484:	d0a7de05 	stb	r2,-24712(gp)
    }
}
    8488:	0001883a 	nop
    848c:	e037883a 	mov	sp,fp
    8490:	df000017 	ldw	fp,0(sp)
    8494:	dec00104 	addi	sp,sp,4
    8498:	f800283a 	ret

0000849c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    849c:	defffb04 	addi	sp,sp,-20
    84a0:	dfc00415 	stw	ra,16(sp)
    84a4:	df000315 	stw	fp,12(sp)
    84a8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    84ac:	0140dc04 	movi	r5,880
    84b0:	010000b4 	movhi	r4,2
    84b4:	212c4e04 	addi	r4,r4,-20168
    84b8:	00066d00 	call	66d0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    84bc:	008000b4 	movhi	r2,2
    84c0:	10ac4e04 	addi	r2,r2,-20168
    84c4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    84c8:	008000b4 	movhi	r2,2
    84cc:	10ac5904 	addi	r2,r2,-20124
    84d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    84d4:	e03ffd0d 	sth	zero,-12(fp)
    84d8:	00001306 	br	8528 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    84dc:	e0bffe17 	ldw	r2,-8(fp)
    84e0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    84e4:	e0bffe17 	ldw	r2,-8(fp)
    84e8:	e0ffff17 	ldw	r3,-4(fp)
    84ec:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    84f0:	e0bffe17 	ldw	r2,-8(fp)
    84f4:	00c00fc4 	movi	r3,63
    84f8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    84fc:	e0bffe17 	ldw	r2,-8(fp)
    8500:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    8504:	e0bffe17 	ldw	r2,-8(fp)
    8508:	10800b04 	addi	r2,r2,44
    850c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    8510:	e0bfff17 	ldw	r2,-4(fp)
    8514:	10800b04 	addi	r2,r2,44
    8518:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    851c:	e0bffd0b 	ldhu	r2,-12(fp)
    8520:	10800044 	addi	r2,r2,1
    8524:	e0bffd0d 	sth	r2,-12(fp)
    8528:	e0bffd0b 	ldhu	r2,-12(fp)
    852c:	108004f0 	cmpltui	r2,r2,19
    8530:	103fea1e 	bne	r2,zero,84dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084dc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8534:	e0bffe17 	ldw	r2,-8(fp)
    8538:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    853c:	e0bffe17 	ldw	r2,-8(fp)
    8540:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    8544:	e0bffe17 	ldw	r2,-8(fp)
    8548:	00c00fc4 	movi	r3,63
    854c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    8550:	e0bffe17 	ldw	r2,-8(fp)
    8554:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    8558:	008000b4 	movhi	r2,2
    855c:	10ac4e04 	addi	r2,r2,-20168
    8560:	d0a7e315 	stw	r2,-24692(gp)
#endif
}
    8564:	0001883a 	nop
    8568:	e037883a 	mov	sp,fp
    856c:	dfc00117 	ldw	ra,4(sp)
    8570:	df000017 	ldw	fp,0(sp)
    8574:	dec00204 	addi	sp,sp,8
    8578:	f800283a 	ret

0000857c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    857c:	defffa04 	addi	sp,sp,-24
    8580:	dfc00515 	stw	ra,20(sp)
    8584:	df000415 	stw	fp,16(sp)
    8588:	df000404 	addi	fp,sp,16
    858c:	e13ffe15 	stw	r4,-8(fp)
    8590:	2805883a 	mov	r2,r5
    8594:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    8598:	e0bffe17 	ldw	r2,-8(fp)
    859c:	10800217 	ldw	r2,8(r2)
    85a0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    85a4:	e0bffd17 	ldw	r2,-12(fp)
    85a8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    85ac:	e0bffd17 	ldw	r2,-12(fp)
    85b0:	e0ffff0b 	ldhu	r3,-4(fp)
    85b4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    85b8:	e0bffd17 	ldw	r2,-12(fp)
    85bc:	10c00c03 	ldbu	r3,48(r2)
    85c0:	00bff7c4 	movi	r2,-33
    85c4:	1884703a 	and	r2,r3,r2
    85c8:	1007883a 	mov	r3,r2
    85cc:	e0bffd17 	ldw	r2,-12(fp)
    85d0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    85d4:	e0bffd17 	ldw	r2,-12(fp)
    85d8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    85dc:	e0bffd17 	ldw	r2,-12(fp)
    85e0:	10800c03 	ldbu	r2,48(r2)
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	1000181e 	bne	r2,zero,864c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    85ec:	e0bffd17 	ldw	r2,-12(fp)
    85f0:	10c00d83 	ldbu	r3,54(r2)
    85f4:	d0a7de03 	ldbu	r2,-24712(gp)
    85f8:	1884b03a 	or	r2,r3,r2
    85fc:	d0a7de05 	stb	r2,-24712(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8600:	e0bffd17 	ldw	r2,-12(fp)
    8604:	10800d03 	ldbu	r2,52(r2)
    8608:	10c03fcc 	andi	r3,r2,255
    860c:	e0bffd17 	ldw	r2,-12(fp)
    8610:	10800d03 	ldbu	r2,52(r2)
    8614:	11003fcc 	andi	r4,r2,255
    8618:	d0a7de44 	addi	r2,gp,-24711
    861c:	2085883a 	add	r2,r4,r2
    8620:	11000003 	ldbu	r4,0(r2)
    8624:	e0bffd17 	ldw	r2,-12(fp)
    8628:	10800d43 	ldbu	r2,53(r2)
    862c:	2084b03a 	or	r2,r4,r2
    8630:	1009883a 	mov	r4,r2
    8634:	d0a7de44 	addi	r2,gp,-24711
    8638:	1885883a 	add	r2,r3,r2
    863c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    8640:	00800044 	movi	r2,1
    8644:	e0bffc05 	stb	r2,-16(fp)
    8648:	00000106 	br	8650 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    864c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    8650:	e13ffe17 	ldw	r4,-8(fp)
    8654:	00086700 	call	8670 <OS_FlagUnlink>
    return (sched);
    8658:	e0bffc03 	ldbu	r2,-16(fp)
}
    865c:	e037883a 	mov	sp,fp
    8660:	dfc00117 	ldw	ra,4(sp)
    8664:	df000017 	ldw	fp,0(sp)
    8668:	dec00204 	addi	sp,sp,8
    866c:	f800283a 	ret

00008670 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    8670:	defffa04 	addi	sp,sp,-24
    8674:	df000515 	stw	fp,20(sp)
    8678:	df000504 	addi	fp,sp,20
    867c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    8680:	e0bfff17 	ldw	r2,-4(fp)
    8684:	10800117 	ldw	r2,4(r2)
    8688:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    868c:	e0bfff17 	ldw	r2,-4(fp)
    8690:	10800017 	ldw	r2,0(r2)
    8694:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    8698:	e0bffb17 	ldw	r2,-20(fp)
    869c:	10000b1e 	bne	r2,zero,86cc <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    86a0:	e0bfff17 	ldw	r2,-4(fp)
    86a4:	10800317 	ldw	r2,12(r2)
    86a8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    86ac:	e0bffd17 	ldw	r2,-12(fp)
    86b0:	e0fffc17 	ldw	r3,-16(fp)
    86b4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    86b8:	e0bffc17 	ldw	r2,-16(fp)
    86bc:	10000b26 	beq	r2,zero,86ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    86c0:	e0bffc17 	ldw	r2,-16(fp)
    86c4:	10000115 	stw	zero,4(r2)
    86c8:	00000806 	br	86ec <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    86cc:	e0bffb17 	ldw	r2,-20(fp)
    86d0:	e0fffc17 	ldw	r3,-16(fp)
    86d4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    86d8:	e0bffc17 	ldw	r2,-16(fp)
    86dc:	10000326 	beq	r2,zero,86ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    86e0:	e0bffc17 	ldw	r2,-16(fp)
    86e4:	e0fffb17 	ldw	r3,-20(fp)
    86e8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    86ec:	e0bfff17 	ldw	r2,-4(fp)
    86f0:	10800217 	ldw	r2,8(r2)
    86f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    86f8:	e0bffe17 	ldw	r2,-8(fp)
    86fc:	10000a15 	stw	zero,40(r2)
#endif
}
    8700:	0001883a 	nop
    8704:	e037883a 	mov	sp,fp
    8708:	df000017 	ldw	fp,0(sp)
    870c:	dec00104 	addi	sp,sp,4
    8710:	f800283a 	ret

00008714 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
    8714:	defffa04 	addi	sp,sp,-24
    8718:	df000515 	stw	fp,20(sp)
    871c:	df000504 	addi	fp,sp,20
    8720:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
    8724:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
    8728:	e0bfff17 	ldw	r2,-4(fp)
    872c:	1000021e 	bne	r2,zero,8738 <OSMboxAccept+0x24>
        return ((void *)0);
    8730:	0005883a 	mov	r2,zero
    8734:	00001906 	br	879c <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
    8738:	e0bfff17 	ldw	r2,-4(fp)
    873c:	10800003 	ldbu	r2,0(r2)
    8740:	10803fcc 	andi	r2,r2,255
    8744:	10800060 	cmpeqi	r2,r2,1
    8748:	1000021e 	bne	r2,zero,8754 <OSMboxAccept+0x40>
        return ((void *)0);
    874c:	0005883a 	mov	r2,zero
    8750:	00001206 	br	879c <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8754:	0005303a 	rdctl	r2,status
    8758:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    875c:	e0fffd17 	ldw	r3,-12(fp)
    8760:	00bfff84 	movi	r2,-2
    8764:	1884703a 	and	r2,r3,r2
    8768:	1001703a 	wrctl	status,r2
  
  return context;
    876c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8770:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
    8774:	e0bfff17 	ldw	r2,-4(fp)
    8778:	10800117 	ldw	r2,4(r2)
    877c:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
    8780:	e0bfff17 	ldw	r2,-4(fp)
    8784:	10000115 	stw	zero,4(r2)
    8788:	e0bffb17 	ldw	r2,-20(fp)
    878c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8790:	e0bffe17 	ldw	r2,-8(fp)
    8794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
    8798:	e0bffc17 	ldw	r2,-16(fp)
}
    879c:	e037883a 	mov	sp,fp
    87a0:	df000017 	ldw	fp,0(sp)
    87a4:	dec00104 	addi	sp,sp,4
    87a8:	f800283a 	ret

000087ac <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
    87ac:	defff904 	addi	sp,sp,-28
    87b0:	dfc00615 	stw	ra,24(sp)
    87b4:	df000515 	stw	fp,20(sp)
    87b8:	df000504 	addi	fp,sp,20
    87bc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    87c0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    87c4:	d0a7e003 	ldbu	r2,-24704(gp)
    87c8:	10803fcc 	andi	r2,r2,255
    87cc:	10000226 	beq	r2,zero,87d8 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    87d0:	0005883a 	mov	r2,zero
    87d4:	00002506 	br	886c <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    87d8:	0005303a 	rdctl	r2,status
    87dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    87e0:	e0fffe17 	ldw	r3,-8(fp)
    87e4:	00bfff84 	movi	r2,-2
    87e8:	1884703a 	and	r2,r3,r2
    87ec:	1001703a 	wrctl	status,r2
  
  return context;
    87f0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    87f4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    87f8:	d0a7df17 	ldw	r2,-24708(gp)
    87fc:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    8800:	d0a7df17 	ldw	r2,-24708(gp)
    8804:	10000326 	beq	r2,zero,8814 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8808:	d0a7df17 	ldw	r2,-24708(gp)
    880c:	10800117 	ldw	r2,4(r2)
    8810:	d0a7df15 	stw	r2,-24708(gp)
    8814:	e0bffb17 	ldw	r2,-20(fp)
    8818:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    881c:	e0bffc17 	ldw	r2,-16(fp)
    8820:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
    8824:	e0bffd17 	ldw	r2,-12(fp)
    8828:	10000f26 	beq	r2,zero,8868 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
    882c:	e0bffd17 	ldw	r2,-12(fp)
    8830:	00c00044 	movi	r3,1
    8834:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
    8838:	e0bffd17 	ldw	r2,-12(fp)
    883c:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
    8840:	e0bffd17 	ldw	r2,-12(fp)
    8844:	e0ffff17 	ldw	r3,-4(fp)
    8848:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
    884c:	e0bffd17 	ldw	r2,-12(fp)
    8850:	00c00fc4 	movi	r3,63
    8854:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    8858:	e0bffd17 	ldw	r2,-12(fp)
    885c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
    8860:	e13ffd17 	ldw	r4,-12(fp)
    8864:	00062f00 	call	62f0 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
    8868:	e0bffd17 	ldw	r2,-12(fp)
}
    886c:	e037883a 	mov	sp,fp
    8870:	dfc00117 	ldw	ra,4(sp)
    8874:	df000017 	ldw	fp,0(sp)
    8878:	dec00204 	addi	sp,sp,8
    887c:	f800283a 	ret

00008880 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8880:	defff304 	addi	sp,sp,-52
    8884:	dfc00c15 	stw	ra,48(sp)
    8888:	df000b15 	stw	fp,44(sp)
    888c:	df000b04 	addi	fp,sp,44
    8890:	e13ffd15 	stw	r4,-12(fp)
    8894:	2805883a 	mov	r2,r5
    8898:	e1bfff15 	stw	r6,-4(fp)
    889c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    88a0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    88a4:	e0bfff17 	ldw	r2,-4(fp)
    88a8:	1000021e 	bne	r2,zero,88b4 <OSMboxDel+0x34>
        return (pevent);
    88ac:	e0bffd17 	ldw	r2,-12(fp)
    88b0:	00007e06 	br	8aac <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    88b4:	e0bffd17 	ldw	r2,-12(fp)
    88b8:	1000051e 	bne	r2,zero,88d0 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    88bc:	e0bfff17 	ldw	r2,-4(fp)
    88c0:	00c00104 	movi	r3,4
    88c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    88c8:	e0bffd17 	ldw	r2,-12(fp)
    88cc:	00007706 	br	8aac <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    88d0:	e0bffd17 	ldw	r2,-12(fp)
    88d4:	10800003 	ldbu	r2,0(r2)
    88d8:	10803fcc 	andi	r2,r2,255
    88dc:	10800060 	cmpeqi	r2,r2,1
    88e0:	1000051e 	bne	r2,zero,88f8 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    88e4:	e0bfff17 	ldw	r2,-4(fp)
    88e8:	00c00044 	movi	r3,1
    88ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
    88f0:	e0bffd17 	ldw	r2,-12(fp)
    88f4:	00006d06 	br	8aac <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    88f8:	d0a7e003 	ldbu	r2,-24704(gp)
    88fc:	10803fcc 	andi	r2,r2,255
    8900:	10000526 	beq	r2,zero,8918 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    8904:	e0bfff17 	ldw	r2,-4(fp)
    8908:	00c003c4 	movi	r3,15
    890c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8910:	e0bffd17 	ldw	r2,-12(fp)
    8914:	00006506 	br	8aac <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8918:	0005303a 	rdctl	r2,status
    891c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8920:	e0fffc17 	ldw	r3,-16(fp)
    8924:	00bfff84 	movi	r2,-2
    8928:	1884703a 	and	r2,r3,r2
    892c:	1001703a 	wrctl	status,r2
  
  return context;
    8930:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8934:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
    8938:	e0bffd17 	ldw	r2,-12(fp)
    893c:	10800283 	ldbu	r2,10(r2)
    8940:	10803fcc 	andi	r2,r2,255
    8944:	10000326 	beq	r2,zero,8954 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8948:	00800044 	movi	r2,1
    894c:	e0bff505 	stb	r2,-44(fp)
    8950:	00000106 	br	8958 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8954:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    8958:	e0bffe03 	ldbu	r2,-8(fp)
    895c:	10000326 	beq	r2,zero,896c <OSMboxDel+0xec>
    8960:	10800060 	cmpeqi	r2,r2,1
    8964:	1000281e 	bne	r2,zero,8a08 <OSMboxDel+0x188>
    8968:	00004506 	br	8a80 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
    896c:	e0bff503 	ldbu	r2,-44(fp)
    8970:	1000161e 	bne	r2,zero,89cc <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    8974:	e0bffd17 	ldw	r2,-12(fp)
    8978:	00c00fc4 	movi	r3,63
    897c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    8980:	e0bffd17 	ldw	r2,-12(fp)
    8984:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    8988:	e0bffd17 	ldw	r2,-12(fp)
    898c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
    8990:	d0e7df17 	ldw	r3,-24708(gp)
    8994:	e0bffd17 	ldw	r2,-12(fp)
    8998:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
    899c:	e0bffd17 	ldw	r2,-12(fp)
    89a0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
    89a4:	e0bffd17 	ldw	r2,-12(fp)
    89a8:	d0a7df15 	stw	r2,-24708(gp)
    89ac:	e0bff717 	ldw	r2,-36(fp)
    89b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    89b4:	e0bff817 	ldw	r2,-32(fp)
    89b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
    89bc:	e0bfff17 	ldw	r2,-4(fp)
    89c0:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
    89c4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
    89c8:	00003706 	br	8aa8 <OSMboxDel+0x228>
    89cc:	e0bff717 	ldw	r2,-36(fp)
    89d0:	e0bff915 	stw	r2,-28(fp)
    89d4:	e0bff917 	ldw	r2,-28(fp)
    89d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
    89dc:	e0bfff17 	ldw	r2,-4(fp)
    89e0:	00c01244 	movi	r3,73
    89e4:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
    89e8:	e0bffd17 	ldw	r2,-12(fp)
    89ec:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    89f0:	00002d06 	br	8aa8 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
    89f4:	000f883a 	mov	r7,zero
    89f8:	01800084 	movi	r6,2
    89fc:	000b883a 	mov	r5,zero
    8a00:	e13ffd17 	ldw	r4,-12(fp)
    8a04:	0005d400 	call	5d40 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
    8a08:	e0bffd17 	ldw	r2,-12(fp)
    8a0c:	10800283 	ldbu	r2,10(r2)
    8a10:	10803fcc 	andi	r2,r2,255
    8a14:	103ff71e 	bne	r2,zero,89f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089f4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8a18:	e0bffd17 	ldw	r2,-12(fp)
    8a1c:	00c00fc4 	movi	r3,63
    8a20:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8a24:	e0bffd17 	ldw	r2,-12(fp)
    8a28:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8a2c:	e0bffd17 	ldw	r2,-12(fp)
    8a30:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    8a34:	d0e7df17 	ldw	r3,-24708(gp)
    8a38:	e0bffd17 	ldw	r2,-12(fp)
    8a3c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8a40:	e0bffd17 	ldw	r2,-12(fp)
    8a44:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    8a48:	e0bffd17 	ldw	r2,-12(fp)
    8a4c:	d0a7df15 	stw	r2,-24708(gp)
    8a50:	e0bff717 	ldw	r2,-36(fp)
    8a54:	e0bffa15 	stw	r2,-24(fp)
    8a58:	e0bffa17 	ldw	r2,-24(fp)
    8a5c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8a60:	e0bff503 	ldbu	r2,-44(fp)
    8a64:	10800058 	cmpnei	r2,r2,1
    8a68:	1000011e 	bne	r2,zero,8a70 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    8a6c:	000678c0 	call	678c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
    8a70:	e0bfff17 	ldw	r2,-4(fp)
    8a74:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
    8a78:	e03ff615 	stw	zero,-40(fp)
             break;
    8a7c:	00000a06 	br	8aa8 <OSMboxDel+0x228>
    8a80:	e0bff717 	ldw	r2,-36(fp)
    8a84:	e0bffb15 	stw	r2,-20(fp)
    8a88:	e0bffb17 	ldw	r2,-20(fp)
    8a8c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
    8a90:	e0bfff17 	ldw	r2,-4(fp)
    8a94:	00c001c4 	movi	r3,7
    8a98:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
    8a9c:	e0bffd17 	ldw	r2,-12(fp)
    8aa0:	e0bff615 	stw	r2,-40(fp)
             break;
    8aa4:	0001883a 	nop
    }
    return (pevent_return);
    8aa8:	e0bff617 	ldw	r2,-40(fp)
}
    8aac:	e037883a 	mov	sp,fp
    8ab0:	dfc00117 	ldw	ra,4(sp)
    8ab4:	df000017 	ldw	fp,0(sp)
    8ab8:	dec00204 	addi	sp,sp,8
    8abc:	f800283a 	ret

00008ac0 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    8ac0:	defff404 	addi	sp,sp,-48
    8ac4:	dfc00b15 	stw	ra,44(sp)
    8ac8:	df000a15 	stw	fp,40(sp)
    8acc:	df000a04 	addi	fp,sp,40
    8ad0:	e13ffd15 	stw	r4,-12(fp)
    8ad4:	2805883a 	mov	r2,r5
    8ad8:	e1bfff15 	stw	r6,-4(fp)
    8adc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8ae0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8ae4:	e0bfff17 	ldw	r2,-4(fp)
    8ae8:	1000021e 	bne	r2,zero,8af4 <OSMboxPend+0x34>
        return ((void *)0);
    8aec:	0005883a 	mov	r2,zero
    8af0:	00007b06 	br	8ce0 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8af4:	e0bffd17 	ldw	r2,-12(fp)
    8af8:	1000051e 	bne	r2,zero,8b10 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8afc:	e0bfff17 	ldw	r2,-4(fp)
    8b00:	00c00104 	movi	r3,4
    8b04:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8b08:	0005883a 	mov	r2,zero
    8b0c:	00007406 	br	8ce0 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    8b10:	e0bffd17 	ldw	r2,-12(fp)
    8b14:	10800003 	ldbu	r2,0(r2)
    8b18:	10803fcc 	andi	r2,r2,255
    8b1c:	10800060 	cmpeqi	r2,r2,1
    8b20:	1000051e 	bne	r2,zero,8b38 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8b24:	e0bfff17 	ldw	r2,-4(fp)
    8b28:	00c00044 	movi	r3,1
    8b2c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8b30:	0005883a 	mov	r2,zero
    8b34:	00006a06 	br	8ce0 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    8b38:	d0a7e003 	ldbu	r2,-24704(gp)
    8b3c:	10803fcc 	andi	r2,r2,255
    8b40:	10000526 	beq	r2,zero,8b58 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    8b44:	e0bfff17 	ldw	r2,-4(fp)
    8b48:	00c00084 	movi	r3,2
    8b4c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8b50:	0005883a 	mov	r2,zero
    8b54:	00006206 	br	8ce0 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    8b58:	d0a7d203 	ldbu	r2,-24760(gp)
    8b5c:	10803fcc 	andi	r2,r2,255
    8b60:	10000526 	beq	r2,zero,8b78 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    8b64:	e0bfff17 	ldw	r2,-4(fp)
    8b68:	00c00344 	movi	r3,13
    8b6c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8b70:	0005883a 	mov	r2,zero
    8b74:	00005a06 	br	8ce0 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8b78:	0005303a 	rdctl	r2,status
    8b7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8b80:	e0fffc17 	ldw	r3,-16(fp)
    8b84:	00bfff84 	movi	r2,-2
    8b88:	1884703a 	and	r2,r3,r2
    8b8c:	1001703a 	wrctl	status,r2
  
  return context;
    8b90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8b94:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
    8b98:	e0bffd17 	ldw	r2,-12(fp)
    8b9c:	10800117 	ldw	r2,4(r2)
    8ba0:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
    8ba4:	e0bff617 	ldw	r2,-40(fp)
    8ba8:	10000a26 	beq	r2,zero,8bd4 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
    8bac:	e0bffd17 	ldw	r2,-12(fp)
    8bb0:	10000115 	stw	zero,4(r2)
    8bb4:	e0bff717 	ldw	r2,-36(fp)
    8bb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8bbc:	e0bff817 	ldw	r2,-32(fp)
    8bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    8bc4:	e0bfff17 	ldw	r2,-4(fp)
    8bc8:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
    8bcc:	e0bff617 	ldw	r2,-40(fp)
    8bd0:	00004306 	br	8ce0 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
    8bd4:	d0a7e117 	ldw	r2,-24700(gp)
    8bd8:	d0e7e117 	ldw	r3,-24700(gp)
    8bdc:	18c00c03 	ldbu	r3,48(r3)
    8be0:	18c00094 	ori	r3,r3,2
    8be4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    8be8:	d0a7e117 	ldw	r2,-24700(gp)
    8bec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
    8bf0:	d0a7e117 	ldw	r2,-24700(gp)
    8bf4:	e0fffe0b 	ldhu	r3,-8(fp)
    8bf8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    8bfc:	e13ffd17 	ldw	r4,-12(fp)
    8c00:	0005ed80 	call	5ed8 <OS_EventTaskWait>
    8c04:	e0bff717 	ldw	r2,-36(fp)
    8c08:	e0bffb15 	stw	r2,-20(fp)
    8c0c:	e0bffb17 	ldw	r2,-20(fp)
    8c10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
    8c14:	000678c0 	call	678c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c18:	0005303a 	rdctl	r2,status
    8c1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c20:	e0fff917 	ldw	r3,-28(fp)
    8c24:	00bfff84 	movi	r2,-2
    8c28:	1884703a 	and	r2,r3,r2
    8c2c:	1001703a 	wrctl	status,r2
  
  return context;
    8c30:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    8c34:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    8c38:	d0a7e117 	ldw	r2,-24700(gp)
    8c3c:	10800c43 	ldbu	r2,49(r2)
    8c40:	10803fcc 	andi	r2,r2,255
    8c44:	10000326 	beq	r2,zero,8c54 <OSMboxPend+0x194>
    8c48:	108000a0 	cmpeqi	r2,r2,2
    8c4c:	1000071e 	bne	r2,zero,8c6c <OSMboxPend+0x1ac>
    8c50:	00000b06 	br	8c80 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
    8c54:	d0a7e117 	ldw	r2,-24700(gp)
    8c58:	10800917 	ldw	r2,36(r2)
    8c5c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
    8c60:	e0bfff17 	ldw	r2,-4(fp)
    8c64:	10000005 	stb	zero,0(r2)
             break;
    8c68:	00000e06 	br	8ca4 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    8c6c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    8c70:	e0bfff17 	ldw	r2,-4(fp)
    8c74:	00c00384 	movi	r3,14
    8c78:	10c00005 	stb	r3,0(r2)
             break;
    8c7c:	00000906 	br	8ca4 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    8c80:	d0a7e117 	ldw	r2,-24700(gp)
    8c84:	e17ffd17 	ldw	r5,-12(fp)
    8c88:	1009883a 	mov	r4,r2
    8c8c:	00061380 	call	6138 <OS_EventTaskRemove>
             pmsg = (void *)0;
    8c90:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    8c94:	e0bfff17 	ldw	r2,-4(fp)
    8c98:	00c00284 	movi	r3,10
    8c9c:	10c00005 	stb	r3,0(r2)
             break;
    8ca0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    8ca4:	d0a7e117 	ldw	r2,-24700(gp)
    8ca8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    8cac:	d0a7e117 	ldw	r2,-24700(gp)
    8cb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    8cb4:	d0a7e117 	ldw	r2,-24700(gp)
    8cb8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    8cbc:	d0a7e117 	ldw	r2,-24700(gp)
    8cc0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    8cc4:	d0a7e117 	ldw	r2,-24700(gp)
    8cc8:	10000915 	stw	zero,36(r2)
    8ccc:	e0bff717 	ldw	r2,-36(fp)
    8cd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8cd4:	e0bffa17 	ldw	r2,-24(fp)
    8cd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    8cdc:	e0bff617 	ldw	r2,-40(fp)
}
    8ce0:	e037883a 	mov	sp,fp
    8ce4:	dfc00117 	ldw	ra,4(sp)
    8ce8:	df000017 	ldw	fp,0(sp)
    8cec:	dec00204 	addi	sp,sp,8
    8cf0:	f800283a 	ret

00008cf4 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8cf4:	defff604 	addi	sp,sp,-40
    8cf8:	dfc00915 	stw	ra,36(sp)
    8cfc:	df000815 	stw	fp,32(sp)
    8d00:	df000804 	addi	fp,sp,32
    8d04:	e13ffd15 	stw	r4,-12(fp)
    8d08:	2805883a 	mov	r2,r5
    8d0c:	e1bfff15 	stw	r6,-4(fp)
    8d10:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8d14:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8d18:	e0bfff17 	ldw	r2,-4(fp)
    8d1c:	1000021e 	bne	r2,zero,8d28 <OSMboxPendAbort+0x34>
        return (0);
    8d20:	0005883a 	mov	r2,zero
    8d24:	00004906 	br	8e4c <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8d28:	e0bffd17 	ldw	r2,-12(fp)
    8d2c:	1000051e 	bne	r2,zero,8d44 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8d30:	e0bfff17 	ldw	r2,-4(fp)
    8d34:	00c00104 	movi	r3,4
    8d38:	10c00005 	stb	r3,0(r2)
        return (0);
    8d3c:	0005883a 	mov	r2,zero
    8d40:	00004206 	br	8e4c <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    8d44:	e0bffd17 	ldw	r2,-12(fp)
    8d48:	10800003 	ldbu	r2,0(r2)
    8d4c:	10803fcc 	andi	r2,r2,255
    8d50:	10800060 	cmpeqi	r2,r2,1
    8d54:	1000051e 	bne	r2,zero,8d6c <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8d58:	e0bfff17 	ldw	r2,-4(fp)
    8d5c:	00c00044 	movi	r3,1
    8d60:	10c00005 	stb	r3,0(r2)
        return (0);
    8d64:	0005883a 	mov	r2,zero
    8d68:	00003806 	br	8e4c <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8d6c:	0005303a 	rdctl	r2,status
    8d70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8d74:	e0fffc17 	ldw	r3,-16(fp)
    8d78:	00bfff84 	movi	r2,-2
    8d7c:	1884703a 	and	r2,r3,r2
    8d80:	1001703a 	wrctl	status,r2
  
  return context;
    8d84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8d88:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
    8d8c:	e0bffd17 	ldw	r2,-12(fp)
    8d90:	10800283 	ldbu	r2,10(r2)
    8d94:	10803fcc 	andi	r2,r2,255
    8d98:	10002526 	beq	r2,zero,8e30 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
    8d9c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    8da0:	e0bffe03 	ldbu	r2,-8(fp)
    8da4:	10800060 	cmpeqi	r2,r2,1
    8da8:	10000e26 	beq	r2,zero,8de4 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
    8dac:	00000806 	br	8dd0 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    8db0:	01c00084 	movi	r7,2
    8db4:	01800084 	movi	r6,2
    8db8:	000b883a 	mov	r5,zero
    8dbc:	e13ffd17 	ldw	r4,-12(fp)
    8dc0:	0005d400 	call	5d40 <OS_EventTaskRdy>
                     nbr_tasks++;
    8dc4:	e0bff803 	ldbu	r2,-32(fp)
    8dc8:	10800044 	addi	r2,r2,1
    8dcc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
    8dd0:	e0bffd17 	ldw	r2,-12(fp)
    8dd4:	10800283 	ldbu	r2,10(r2)
    8dd8:	10803fcc 	andi	r2,r2,255
    8ddc:	103ff41e 	bne	r2,zero,8db0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008db0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    8de0:	00000906 	br	8e08 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    8de4:	01c00084 	movi	r7,2
    8de8:	01800084 	movi	r6,2
    8dec:	000b883a 	mov	r5,zero
    8df0:	e13ffd17 	ldw	r4,-12(fp)
    8df4:	0005d400 	call	5d40 <OS_EventTaskRdy>
                 nbr_tasks++;
    8df8:	e0bff803 	ldbu	r2,-32(fp)
    8dfc:	10800044 	addi	r2,r2,1
    8e00:	e0bff805 	stb	r2,-32(fp)
                 break;
    8e04:	0001883a 	nop
    8e08:	e0bff917 	ldw	r2,-28(fp)
    8e0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e10:	e0bffa17 	ldw	r2,-24(fp)
    8e14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    8e18:	000678c0 	call	678c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    8e1c:	e0bfff17 	ldw	r2,-4(fp)
    8e20:	00c00384 	movi	r3,14
    8e24:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    8e28:	e0bff803 	ldbu	r2,-32(fp)
    8e2c:	00000706 	br	8e4c <OSMboxPendAbort+0x158>
    8e30:	e0bff917 	ldw	r2,-28(fp)
    8e34:	e0bffb15 	stw	r2,-20(fp)
    8e38:	e0bffb17 	ldw	r2,-20(fp)
    8e3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8e40:	e0bfff17 	ldw	r2,-4(fp)
    8e44:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
    8e48:	0005883a 	mov	r2,zero
}
    8e4c:	e037883a 	mov	sp,fp
    8e50:	dfc00117 	ldw	ra,4(sp)
    8e54:	df000017 	ldw	fp,0(sp)
    8e58:	dec00204 	addi	sp,sp,8
    8e5c:	f800283a 	ret

00008e60 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
    8e60:	defff704 	addi	sp,sp,-36
    8e64:	dfc00815 	stw	ra,32(sp)
    8e68:	df000715 	stw	fp,28(sp)
    8e6c:	df000704 	addi	fp,sp,28
    8e70:	e13ffe15 	stw	r4,-8(fp)
    8e74:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8e78:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8e7c:	e0bffe17 	ldw	r2,-8(fp)
    8e80:	1000021e 	bne	r2,zero,8e8c <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8e84:	00800104 	movi	r2,4
    8e88:	00003406 	br	8f5c <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    8e8c:	e0bfff17 	ldw	r2,-4(fp)
    8e90:	1000021e 	bne	r2,zero,8e9c <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
    8e94:	008000c4 	movi	r2,3
    8e98:	00003006 	br	8f5c <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    8e9c:	e0bffe17 	ldw	r2,-8(fp)
    8ea0:	10800003 	ldbu	r2,0(r2)
    8ea4:	10803fcc 	andi	r2,r2,255
    8ea8:	10800060 	cmpeqi	r2,r2,1
    8eac:	1000021e 	bne	r2,zero,8eb8 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
    8eb0:	00800044 	movi	r2,1
    8eb4:	00002906 	br	8f5c <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8eb8:	0005303a 	rdctl	r2,status
    8ebc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ec0:	e0fffd17 	ldw	r3,-12(fp)
    8ec4:	00bfff84 	movi	r2,-2
    8ec8:	1884703a 	and	r2,r3,r2
    8ecc:	1001703a 	wrctl	status,r2
  
  return context;
    8ed0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8ed4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    8ed8:	e0bffe17 	ldw	r2,-8(fp)
    8edc:	10800283 	ldbu	r2,10(r2)
    8ee0:	10803fcc 	andi	r2,r2,255
    8ee4:	10000c26 	beq	r2,zero,8f18 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    8ee8:	000f883a 	mov	r7,zero
    8eec:	01800084 	movi	r6,2
    8ef0:	e17fff17 	ldw	r5,-4(fp)
    8ef4:	e13ffe17 	ldw	r4,-8(fp)
    8ef8:	0005d400 	call	5d40 <OS_EventTaskRdy>
    8efc:	e0bff917 	ldw	r2,-28(fp)
    8f00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f04:	e0bffa17 	ldw	r2,-24(fp)
    8f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    8f0c:	000678c0 	call	678c <OS_Sched>
        return (OS_ERR_NONE);
    8f10:	0005883a 	mov	r2,zero
    8f14:	00001106 	br	8f5c <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    8f18:	e0bffe17 	ldw	r2,-8(fp)
    8f1c:	10800117 	ldw	r2,4(r2)
    8f20:	10000626 	beq	r2,zero,8f3c <OSMboxPost+0xdc>
    8f24:	e0bff917 	ldw	r2,-28(fp)
    8f28:	e0bffb15 	stw	r2,-20(fp)
    8f2c:	e0bffb17 	ldw	r2,-20(fp)
    8f30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    8f34:	00800504 	movi	r2,20
    8f38:	00000806 	br	8f5c <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    8f3c:	e0bffe17 	ldw	r2,-8(fp)
    8f40:	e0ffff17 	ldw	r3,-4(fp)
    8f44:	10c00115 	stw	r3,4(r2)
    8f48:	e0bff917 	ldw	r2,-28(fp)
    8f4c:	e0bffc15 	stw	r2,-16(fp)
    8f50:	e0bffc17 	ldw	r2,-16(fp)
    8f54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8f58:	0005883a 	mov	r2,zero
}
    8f5c:	e037883a 	mov	sp,fp
    8f60:	dfc00117 	ldw	ra,4(sp)
    8f64:	df000017 	ldw	fp,0(sp)
    8f68:	dec00204 	addi	sp,sp,8
    8f6c:	f800283a 	ret

00008f70 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    8f70:	defff604 	addi	sp,sp,-40
    8f74:	dfc00915 	stw	ra,36(sp)
    8f78:	df000815 	stw	fp,32(sp)
    8f7c:	df000804 	addi	fp,sp,32
    8f80:	e13ffd15 	stw	r4,-12(fp)
    8f84:	e17ffe15 	stw	r5,-8(fp)
    8f88:	3005883a 	mov	r2,r6
    8f8c:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8f90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8f94:	e0bffd17 	ldw	r2,-12(fp)
    8f98:	1000021e 	bne	r2,zero,8fa4 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    8f9c:	00800104 	movi	r2,4
    8fa0:	00004506 	br	90b8 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    8fa4:	e0bffe17 	ldw	r2,-8(fp)
    8fa8:	1000021e 	bne	r2,zero,8fb4 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
    8fac:	008000c4 	movi	r2,3
    8fb0:	00004106 	br	90b8 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    8fb4:	e0bffd17 	ldw	r2,-12(fp)
    8fb8:	10800003 	ldbu	r2,0(r2)
    8fbc:	10803fcc 	andi	r2,r2,255
    8fc0:	10800060 	cmpeqi	r2,r2,1
    8fc4:	1000021e 	bne	r2,zero,8fd0 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
    8fc8:	00800044 	movi	r2,1
    8fcc:	00003a06 	br	90b8 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fd0:	0005303a 	rdctl	r2,status
    8fd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fd8:	e0fffc17 	ldw	r3,-16(fp)
    8fdc:	00bfff84 	movi	r2,-2
    8fe0:	1884703a 	and	r2,r3,r2
    8fe4:	1001703a 	wrctl	status,r2
  
  return context;
    8fe8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8fec:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    8ff0:	e0bffd17 	ldw	r2,-12(fp)
    8ff4:	10800283 	ldbu	r2,10(r2)
    8ff8:	10803fcc 	andi	r2,r2,255
    8ffc:	10001d26 	beq	r2,zero,9074 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    9000:	e0bfff03 	ldbu	r2,-4(fp)
    9004:	1080004c 	andi	r2,r2,1
    9008:	10000b26 	beq	r2,zero,9038 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    900c:	00000506 	br	9024 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    9010:	000f883a 	mov	r7,zero
    9014:	01800084 	movi	r6,2
    9018:	e17ffe17 	ldw	r5,-8(fp)
    901c:	e13ffd17 	ldw	r4,-12(fp)
    9020:	0005d400 	call	5d40 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    9024:	e0bffd17 	ldw	r2,-12(fp)
    9028:	10800283 	ldbu	r2,10(r2)
    902c:	10803fcc 	andi	r2,r2,255
    9030:	103ff71e 	bne	r2,zero,9010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009010>
    9034:	00000506 	br	904c <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    9038:	000f883a 	mov	r7,zero
    903c:	01800084 	movi	r6,2
    9040:	e17ffe17 	ldw	r5,-8(fp)
    9044:	e13ffd17 	ldw	r4,-12(fp)
    9048:	0005d400 	call	5d40 <OS_EventTaskRdy>
    904c:	e0bff817 	ldw	r2,-32(fp)
    9050:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9054:	e0bff917 	ldw	r2,-28(fp)
    9058:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    905c:	e0bfff03 	ldbu	r2,-4(fp)
    9060:	1080010c 	andi	r2,r2,4
    9064:	1000011e 	bne	r2,zero,906c <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
    9068:	000678c0 	call	678c <OS_Sched>
        }
        return (OS_ERR_NONE);
    906c:	0005883a 	mov	r2,zero
    9070:	00001106 	br	90b8 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    9074:	e0bffd17 	ldw	r2,-12(fp)
    9078:	10800117 	ldw	r2,4(r2)
    907c:	10000626 	beq	r2,zero,9098 <OSMboxPostOpt+0x128>
    9080:	e0bff817 	ldw	r2,-32(fp)
    9084:	e0bffa15 	stw	r2,-24(fp)
    9088:	e0bffa17 	ldw	r2,-24(fp)
    908c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    9090:	00800504 	movi	r2,20
    9094:	00000806 	br	90b8 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    9098:	e0bffd17 	ldw	r2,-12(fp)
    909c:	e0fffe17 	ldw	r3,-8(fp)
    90a0:	10c00115 	stw	r3,4(r2)
    90a4:	e0bff817 	ldw	r2,-32(fp)
    90a8:	e0bffb15 	stw	r2,-20(fp)
    90ac:	e0bffb17 	ldw	r2,-20(fp)
    90b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    90b4:	0005883a 	mov	r2,zero
}
    90b8:	e037883a 	mov	sp,fp
    90bc:	dfc00117 	ldw	ra,4(sp)
    90c0:	df000017 	ldw	fp,0(sp)
    90c4:	dec00204 	addi	sp,sp,8
    90c8:	f800283a 	ret

000090cc <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
    90cc:	defff704 	addi	sp,sp,-36
    90d0:	df000815 	stw	fp,32(sp)
    90d4:	df000804 	addi	fp,sp,32
    90d8:	e13ffe15 	stw	r4,-8(fp)
    90dc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    90e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    90e4:	e0bffe17 	ldw	r2,-8(fp)
    90e8:	1000021e 	bne	r2,zero,90f4 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    90ec:	00800104 	movi	r2,4
    90f0:	00003606 	br	91cc <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
    90f4:	e0bfff17 	ldw	r2,-4(fp)
    90f8:	1000021e 	bne	r2,zero,9104 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    90fc:	00800244 	movi	r2,9
    9100:	00003206 	br	91cc <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    9104:	e0bffe17 	ldw	r2,-8(fp)
    9108:	10800003 	ldbu	r2,0(r2)
    910c:	10803fcc 	andi	r2,r2,255
    9110:	10800060 	cmpeqi	r2,r2,1
    9114:	1000021e 	bne	r2,zero,9120 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    9118:	00800044 	movi	r2,1
    911c:	00002b06 	br	91cc <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9120:	0005303a 	rdctl	r2,status
    9124:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9128:	e0fffd17 	ldw	r3,-12(fp)
    912c:	00bfff84 	movi	r2,-2
    9130:	1884703a 	and	r2,r3,r2
    9134:	1001703a 	wrctl	status,r2
  
  return context;
    9138:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    913c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    9140:	e0bffe17 	ldw	r2,-8(fp)
    9144:	10c00283 	ldbu	r3,10(r2)
    9148:	e0bfff17 	ldw	r2,-4(fp)
    914c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
    9150:	e0bffe17 	ldw	r2,-8(fp)
    9154:	108002c4 	addi	r2,r2,11
    9158:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
    915c:	e0bfff17 	ldw	r2,-4(fp)
    9160:	10800104 	addi	r2,r2,4
    9164:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9168:	e03ff805 	stb	zero,-32(fp)
    916c:	00000b06 	br	919c <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
    9170:	e0bffa17 	ldw	r2,-24(fp)
    9174:	10c00044 	addi	r3,r2,1
    9178:	e0fffa15 	stw	r3,-24(fp)
    917c:	e0fff917 	ldw	r3,-28(fp)
    9180:	19000044 	addi	r4,r3,1
    9184:	e13ff915 	stw	r4,-28(fp)
    9188:	18c00003 	ldbu	r3,0(r3)
    918c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9190:	e0bff803 	ldbu	r2,-32(fp)
    9194:	10800044 	addi	r2,r2,1
    9198:	e0bff805 	stb	r2,-32(fp)
    919c:	e0bff803 	ldbu	r2,-32(fp)
    91a0:	108000f0 	cmpltui	r2,r2,3
    91a4:	103ff21e 	bne	r2,zero,9170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009170>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
    91a8:	e0bffe17 	ldw	r2,-8(fp)
    91ac:	10c00117 	ldw	r3,4(r2)
    91b0:	e0bfff17 	ldw	r2,-4(fp)
    91b4:	10c00015 	stw	r3,0(r2)
    91b8:	e0bffb17 	ldw	r2,-20(fp)
    91bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91c0:	e0bffc17 	ldw	r2,-16(fp)
    91c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    91c8:	0005883a 	mov	r2,zero
}
    91cc:	e037883a 	mov	sp,fp
    91d0:	df000017 	ldw	fp,0(sp)
    91d4:	dec00104 	addi	sp,sp,4
    91d8:	f800283a 	ret

000091dc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    91dc:	defff404 	addi	sp,sp,-48
    91e0:	df000b15 	stw	fp,44(sp)
    91e4:	df000b04 	addi	fp,sp,44
    91e8:	e13ffc15 	stw	r4,-16(fp)
    91ec:	e17ffd15 	stw	r5,-12(fp)
    91f0:	e1bffe15 	stw	r6,-8(fp)
    91f4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    91f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    91fc:	e0bfff17 	ldw	r2,-4(fp)
    9200:	1000021e 	bne	r2,zero,920c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    9204:	0005883a 	mov	r2,zero
    9208:	00006506 	br	93a0 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    920c:	e0bffc17 	ldw	r2,-16(fp)
    9210:	1000051e 	bne	r2,zero,9228 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    9214:	e0bfff17 	ldw	r2,-4(fp)
    9218:	00c01884 	movi	r3,98
    921c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    9220:	0005883a 	mov	r2,zero
    9224:	00005e06 	br	93a0 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    9228:	e0bffc17 	ldw	r2,-16(fp)
    922c:	108000cc 	andi	r2,r2,3
    9230:	10000526 	beq	r2,zero,9248 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    9234:	e0bfff17 	ldw	r2,-4(fp)
    9238:	00c01884 	movi	r3,98
    923c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    9240:	0005883a 	mov	r2,zero
    9244:	00005606 	br	93a0 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    9248:	e0bffd17 	ldw	r2,-12(fp)
    924c:	108000a8 	cmpgeui	r2,r2,2
    9250:	1000051e 	bne	r2,zero,9268 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    9254:	e0bfff17 	ldw	r2,-4(fp)
    9258:	00c016c4 	movi	r3,91
    925c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    9260:	0005883a 	mov	r2,zero
    9264:	00004e06 	br	93a0 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    9268:	e0bffe17 	ldw	r2,-8(fp)
    926c:	10800128 	cmpgeui	r2,r2,4
    9270:	1000051e 	bne	r2,zero,9288 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    9274:	e0bfff17 	ldw	r2,-4(fp)
    9278:	00c01704 	movi	r3,92
    927c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    9280:	0005883a 	mov	r2,zero
    9284:	00004606 	br	93a0 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9288:	0005303a 	rdctl	r2,status
    928c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9290:	e0fffb17 	ldw	r3,-20(fp)
    9294:	00bfff84 	movi	r2,-2
    9298:	1884703a 	and	r2,r3,r2
    929c:	1001703a 	wrctl	status,r2
  
  return context;
    92a0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    92a4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    92a8:	d0a7db17 	ldw	r2,-24724(gp)
    92ac:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    92b0:	d0a7db17 	ldw	r2,-24724(gp)
    92b4:	10000326 	beq	r2,zero,92c4 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    92b8:	d0a7db17 	ldw	r2,-24724(gp)
    92bc:	10800117 	ldw	r2,4(r2)
    92c0:	d0a7db15 	stw	r2,-24724(gp)
    92c4:	e0bff817 	ldw	r2,-32(fp)
    92c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    92cc:	e0bff917 	ldw	r2,-28(fp)
    92d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    92d4:	e0bffa17 	ldw	r2,-24(fp)
    92d8:	1000051e 	bne	r2,zero,92f0 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
    92dc:	e0bfff17 	ldw	r2,-4(fp)
    92e0:	00c01684 	movi	r3,90
    92e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    92e8:	0005883a 	mov	r2,zero
    92ec:	00002c06 	br	93a0 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    92f0:	e0bffc17 	ldw	r2,-16(fp)
    92f4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    92f8:	e0fffc17 	ldw	r3,-16(fp)
    92fc:	e0bffe17 	ldw	r2,-8(fp)
    9300:	1885883a 	add	r2,r3,r2
    9304:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    9308:	e03ff715 	stw	zero,-36(fp)
    930c:	00000c06 	br	9340 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    9310:	e0bff617 	ldw	r2,-40(fp)
    9314:	e0fff517 	ldw	r3,-44(fp)
    9318:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    931c:	e0bff517 	ldw	r2,-44(fp)
    9320:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    9324:	e0fff517 	ldw	r3,-44(fp)
    9328:	e0bffe17 	ldw	r2,-8(fp)
    932c:	1885883a 	add	r2,r3,r2
    9330:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    9334:	e0bff717 	ldw	r2,-36(fp)
    9338:	10800044 	addi	r2,r2,1
    933c:	e0bff715 	stw	r2,-36(fp)
    9340:	e0bffd17 	ldw	r2,-12(fp)
    9344:	10bfffc4 	addi	r2,r2,-1
    9348:	e0fff717 	ldw	r3,-36(fp)
    934c:	18bff036 	bltu	r3,r2,9310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009310>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    9350:	e0bff617 	ldw	r2,-40(fp)
    9354:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    9358:	e0bffa17 	ldw	r2,-24(fp)
    935c:	e0fffc17 	ldw	r3,-16(fp)
    9360:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    9364:	e0bffa17 	ldw	r2,-24(fp)
    9368:	e0fffc17 	ldw	r3,-16(fp)
    936c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    9370:	e0bffa17 	ldw	r2,-24(fp)
    9374:	e0fffd17 	ldw	r3,-12(fp)
    9378:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    937c:	e0bffa17 	ldw	r2,-24(fp)
    9380:	e0fffd17 	ldw	r3,-12(fp)
    9384:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    9388:	e0bffa17 	ldw	r2,-24(fp)
    938c:	e0fffe17 	ldw	r3,-8(fp)
    9390:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    9394:	e0bfff17 	ldw	r2,-4(fp)
    9398:	10000005 	stb	zero,0(r2)
    return (pmem);
    939c:	e0bffa17 	ldw	r2,-24(fp)
}
    93a0:	e037883a 	mov	sp,fp
    93a4:	df000017 	ldw	fp,0(sp)
    93a8:	dec00104 	addi	sp,sp,4
    93ac:	f800283a 	ret

000093b0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    93b0:	defff804 	addi	sp,sp,-32
    93b4:	df000715 	stw	fp,28(sp)
    93b8:	df000704 	addi	fp,sp,28
    93bc:	e13ffe15 	stw	r4,-8(fp)
    93c0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    93c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    93c8:	e0bfff17 	ldw	r2,-4(fp)
    93cc:	1000021e 	bne	r2,zero,93d8 <OSMemGet+0x28>
        return ((void *)0);
    93d0:	0005883a 	mov	r2,zero
    93d4:	00002e06 	br	9490 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    93d8:	e0bffe17 	ldw	r2,-8(fp)
    93dc:	1000051e 	bne	r2,zero,93f4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    93e0:	e0bfff17 	ldw	r2,-4(fp)
    93e4:	00c01804 	movi	r3,96
    93e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    93ec:	0005883a 	mov	r2,zero
    93f0:	00002706 	br	9490 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    93f4:	0005303a 	rdctl	r2,status
    93f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    93fc:	e0fffd17 	ldw	r3,-12(fp)
    9400:	00bfff84 	movi	r2,-2
    9404:	1884703a 	and	r2,r3,r2
    9408:	1001703a 	wrctl	status,r2
  
  return context;
    940c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9410:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    9414:	e0bffe17 	ldw	r2,-8(fp)
    9418:	10800417 	ldw	r2,16(r2)
    941c:	10001426 	beq	r2,zero,9470 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    9420:	e0bffe17 	ldw	r2,-8(fp)
    9424:	10800117 	ldw	r2,4(r2)
    9428:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    942c:	e0bffb17 	ldw	r2,-20(fp)
    9430:	10c00017 	ldw	r3,0(r2)
    9434:	e0bffe17 	ldw	r2,-8(fp)
    9438:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    943c:	e0bffe17 	ldw	r2,-8(fp)
    9440:	10800417 	ldw	r2,16(r2)
    9444:	10ffffc4 	addi	r3,r2,-1
    9448:	e0bffe17 	ldw	r2,-8(fp)
    944c:	10c00415 	stw	r3,16(r2)
    9450:	e0bff917 	ldw	r2,-28(fp)
    9454:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9458:	e0bffa17 	ldw	r2,-24(fp)
    945c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    9460:	e0bfff17 	ldw	r2,-4(fp)
    9464:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    9468:	e0bffb17 	ldw	r2,-20(fp)
    946c:	00000806 	br	9490 <OSMemGet+0xe0>
    9470:	e0bff917 	ldw	r2,-28(fp)
    9474:	e0bffc15 	stw	r2,-16(fp)
    9478:	e0bffc17 	ldw	r2,-16(fp)
    947c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    9480:	e0bfff17 	ldw	r2,-4(fp)
    9484:	00c01744 	movi	r3,93
    9488:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    948c:	0005883a 	mov	r2,zero
}
    9490:	e037883a 	mov	sp,fp
    9494:	df000017 	ldw	fp,0(sp)
    9498:	dec00104 	addi	sp,sp,4
    949c:	f800283a 	ret

000094a0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    94a0:	defff704 	addi	sp,sp,-36
    94a4:	dfc00815 	stw	ra,32(sp)
    94a8:	df000715 	stw	fp,28(sp)
    94ac:	df000704 	addi	fp,sp,28
    94b0:	e13ffd15 	stw	r4,-12(fp)
    94b4:	e17ffe15 	stw	r5,-8(fp)
    94b8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    94bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    94c0:	e0bfff17 	ldw	r2,-4(fp)
    94c4:	1000021e 	bne	r2,zero,94d0 <OSMemNameGet+0x30>
        return (0);
    94c8:	0005883a 	mov	r2,zero
    94cc:	00002b06 	br	957c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    94d0:	e0bffd17 	ldw	r2,-12(fp)
    94d4:	1000051e 	bne	r2,zero,94ec <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    94d8:	e0bfff17 	ldw	r2,-4(fp)
    94dc:	00c01804 	movi	r3,96
    94e0:	10c00005 	stb	r3,0(r2)
        return (0);
    94e4:	0005883a 	mov	r2,zero
    94e8:	00002406 	br	957c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    94ec:	e0bffe17 	ldw	r2,-8(fp)
    94f0:	1000051e 	bne	r2,zero,9508 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    94f4:	e0bfff17 	ldw	r2,-4(fp)
    94f8:	00c00304 	movi	r3,12
    94fc:	10c00005 	stb	r3,0(r2)
        return (0);
    9500:	0005883a 	mov	r2,zero
    9504:	00001d06 	br	957c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    9508:	d0a7e003 	ldbu	r2,-24704(gp)
    950c:	10803fcc 	andi	r2,r2,255
    9510:	10000526 	beq	r2,zero,9528 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    9514:	e0bfff17 	ldw	r2,-4(fp)
    9518:	00c00444 	movi	r3,17
    951c:	10c00005 	stb	r3,0(r2)
        return (0);
    9520:	0005883a 	mov	r2,zero
    9524:	00001506 	br	957c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9528:	0005303a 	rdctl	r2,status
    952c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9530:	e0fffb17 	ldw	r3,-20(fp)
    9534:	00bfff84 	movi	r2,-2
    9538:	1884703a 	and	r2,r3,r2
    953c:	1001703a 	wrctl	status,r2
  
  return context;
    9540:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    9544:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    9548:	e0bffd17 	ldw	r2,-12(fp)
    954c:	10800504 	addi	r2,r2,20
    9550:	100b883a 	mov	r5,r2
    9554:	e13ffe17 	ldw	r4,-8(fp)
    9558:	00068d00 	call	68d0 <OS_StrCopy>
    955c:	e0bffa05 	stb	r2,-24(fp)
    9560:	e0bff917 	ldw	r2,-28(fp)
    9564:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9568:	e0bffc17 	ldw	r2,-16(fp)
    956c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9570:	e0bfff17 	ldw	r2,-4(fp)
    9574:	10000005 	stb	zero,0(r2)
    return (len);
    9578:	e0bffa03 	ldbu	r2,-24(fp)
}
    957c:	e037883a 	mov	sp,fp
    9580:	dfc00117 	ldw	ra,4(sp)
    9584:	df000017 	ldw	fp,0(sp)
    9588:	dec00204 	addi	sp,sp,8
    958c:	f800283a 	ret

00009590 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    9590:	defff604 	addi	sp,sp,-40
    9594:	dfc00915 	stw	ra,36(sp)
    9598:	df000815 	stw	fp,32(sp)
    959c:	df000804 	addi	fp,sp,32
    95a0:	e13ffd15 	stw	r4,-12(fp)
    95a4:	e17ffe15 	stw	r5,-8(fp)
    95a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    95ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    95b0:	e0bfff17 	ldw	r2,-4(fp)
    95b4:	10003526 	beq	r2,zero,968c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    95b8:	e0bffd17 	ldw	r2,-12(fp)
    95bc:	1000041e 	bne	r2,zero,95d0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    95c0:	e0bfff17 	ldw	r2,-4(fp)
    95c4:	00c01804 	movi	r3,96
    95c8:	10c00005 	stb	r3,0(r2)
        return;
    95cc:	00003006 	br	9690 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    95d0:	e0bffe17 	ldw	r2,-8(fp)
    95d4:	1000041e 	bne	r2,zero,95e8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    95d8:	e0bfff17 	ldw	r2,-4(fp)
    95dc:	00c00304 	movi	r3,12
    95e0:	10c00005 	stb	r3,0(r2)
        return;
    95e4:	00002a06 	br	9690 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    95e8:	d0a7e003 	ldbu	r2,-24704(gp)
    95ec:	10803fcc 	andi	r2,r2,255
    95f0:	10000426 	beq	r2,zero,9604 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    95f4:	e0bfff17 	ldw	r2,-4(fp)
    95f8:	00c00484 	movi	r3,18
    95fc:	10c00005 	stb	r3,0(r2)
        return;
    9600:	00002306 	br	9690 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9604:	0005303a 	rdctl	r2,status
    9608:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    960c:	e0fffc17 	ldw	r3,-16(fp)
    9610:	00bfff84 	movi	r2,-2
    9614:	1884703a 	and	r2,r3,r2
    9618:	1001703a 	wrctl	status,r2
  
  return context;
    961c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9620:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    9624:	e13ffe17 	ldw	r4,-8(fp)
    9628:	00069440 	call	6944 <OS_StrLen>
    962c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    9630:	e0bffa03 	ldbu	r2,-24(fp)
    9634:	10800830 	cmpltui	r2,r2,32
    9638:	1000081e 	bne	r2,zero,965c <OSMemNameSet+0xcc>
    963c:	e0bff817 	ldw	r2,-32(fp)
    9640:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9644:	e0bff917 	ldw	r2,-28(fp)
    9648:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    964c:	e0bfff17 	ldw	r2,-4(fp)
    9650:	00c018c4 	movi	r3,99
    9654:	10c00005 	stb	r3,0(r2)
        return;
    9658:	00000d06 	br	9690 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    965c:	e0bffd17 	ldw	r2,-12(fp)
    9660:	10800504 	addi	r2,r2,20
    9664:	e17ffe17 	ldw	r5,-8(fp)
    9668:	1009883a 	mov	r4,r2
    966c:	00068d00 	call	68d0 <OS_StrCopy>
    9670:	e0bff817 	ldw	r2,-32(fp)
    9674:	e0bffb15 	stw	r2,-20(fp)
    9678:	e0bffb17 	ldw	r2,-20(fp)
    967c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9680:	e0bfff17 	ldw	r2,-4(fp)
    9684:	10000005 	stb	zero,0(r2)
    9688:	00000106 	br	9690 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    968c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    9690:	e037883a 	mov	sp,fp
    9694:	dfc00117 	ldw	ra,4(sp)
    9698:	df000017 	ldw	fp,0(sp)
    969c:	dec00204 	addi	sp,sp,8
    96a0:	f800283a 	ret

000096a4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    96a4:	defff904 	addi	sp,sp,-28
    96a8:	df000615 	stw	fp,24(sp)
    96ac:	df000604 	addi	fp,sp,24
    96b0:	e13ffe15 	stw	r4,-8(fp)
    96b4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    96b8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    96bc:	e0bffe17 	ldw	r2,-8(fp)
    96c0:	1000021e 	bne	r2,zero,96cc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    96c4:	00801804 	movi	r2,96
    96c8:	00002806 	br	976c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    96cc:	e0bfff17 	ldw	r2,-4(fp)
    96d0:	1000021e 	bne	r2,zero,96dc <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    96d4:	008017c4 	movi	r2,95
    96d8:	00002406 	br	976c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96dc:	0005303a 	rdctl	r2,status
    96e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    96e4:	e0fffd17 	ldw	r3,-12(fp)
    96e8:	00bfff84 	movi	r2,-2
    96ec:	1884703a 	and	r2,r3,r2
    96f0:	1001703a 	wrctl	status,r2
  
  return context;
    96f4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    96f8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    96fc:	e0bffe17 	ldw	r2,-8(fp)
    9700:	10c00417 	ldw	r3,16(r2)
    9704:	e0bffe17 	ldw	r2,-8(fp)
    9708:	10800317 	ldw	r2,12(r2)
    970c:	18800636 	bltu	r3,r2,9728 <OSMemPut+0x84>
    9710:	e0bffa17 	ldw	r2,-24(fp)
    9714:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9718:	e0bffb17 	ldw	r2,-20(fp)
    971c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    9720:	00801784 	movi	r2,94
    9724:	00001106 	br	976c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    9728:	e0bffe17 	ldw	r2,-8(fp)
    972c:	10c00117 	ldw	r3,4(r2)
    9730:	e0bfff17 	ldw	r2,-4(fp)
    9734:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    9738:	e0bffe17 	ldw	r2,-8(fp)
    973c:	e0ffff17 	ldw	r3,-4(fp)
    9740:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    9744:	e0bffe17 	ldw	r2,-8(fp)
    9748:	10800417 	ldw	r2,16(r2)
    974c:	10c00044 	addi	r3,r2,1
    9750:	e0bffe17 	ldw	r2,-8(fp)
    9754:	10c00415 	stw	r3,16(r2)
    9758:	e0bffa17 	ldw	r2,-24(fp)
    975c:	e0bffc15 	stw	r2,-16(fp)
    9760:	e0bffc17 	ldw	r2,-16(fp)
    9764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    9768:	0005883a 	mov	r2,zero
}
    976c:	e037883a 	mov	sp,fp
    9770:	df000017 	ldw	fp,0(sp)
    9774:	dec00104 	addi	sp,sp,4
    9778:	f800283a 	ret

0000977c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    977c:	defffa04 	addi	sp,sp,-24
    9780:	df000515 	stw	fp,20(sp)
    9784:	df000504 	addi	fp,sp,20
    9788:	e13ffe15 	stw	r4,-8(fp)
    978c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9790:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    9794:	e0bffe17 	ldw	r2,-8(fp)
    9798:	1000021e 	bne	r2,zero,97a4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    979c:	00801804 	movi	r2,96
    97a0:	00002c06 	br	9854 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    97a4:	e0bfff17 	ldw	r2,-4(fp)
    97a8:	1000021e 	bne	r2,zero,97b4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    97ac:	00801844 	movi	r2,97
    97b0:	00002806 	br	9854 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    97b4:	0005303a 	rdctl	r2,status
    97b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    97bc:	e0fffc17 	ldw	r3,-16(fp)
    97c0:	00bfff84 	movi	r2,-2
    97c4:	1884703a 	and	r2,r3,r2
    97c8:	1001703a 	wrctl	status,r2
  
  return context;
    97cc:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    97d0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    97d4:	e0bffe17 	ldw	r2,-8(fp)
    97d8:	10c00017 	ldw	r3,0(r2)
    97dc:	e0bfff17 	ldw	r2,-4(fp)
    97e0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    97e4:	e0bffe17 	ldw	r2,-8(fp)
    97e8:	10c00117 	ldw	r3,4(r2)
    97ec:	e0bfff17 	ldw	r2,-4(fp)
    97f0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    97f4:	e0bffe17 	ldw	r2,-8(fp)
    97f8:	10c00217 	ldw	r3,8(r2)
    97fc:	e0bfff17 	ldw	r2,-4(fp)
    9800:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    9804:	e0bffe17 	ldw	r2,-8(fp)
    9808:	10c00317 	ldw	r3,12(r2)
    980c:	e0bfff17 	ldw	r2,-4(fp)
    9810:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    9814:	e0bffe17 	ldw	r2,-8(fp)
    9818:	10c00417 	ldw	r3,16(r2)
    981c:	e0bfff17 	ldw	r2,-4(fp)
    9820:	10c00415 	stw	r3,16(r2)
    9824:	e0bffb17 	ldw	r2,-20(fp)
    9828:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    982c:	e0bffd17 	ldw	r2,-12(fp)
    9830:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    9834:	e0bfff17 	ldw	r2,-4(fp)
    9838:	10c00317 	ldw	r3,12(r2)
    983c:	e0bfff17 	ldw	r2,-4(fp)
    9840:	10800417 	ldw	r2,16(r2)
    9844:	1887c83a 	sub	r3,r3,r2
    9848:	e0bfff17 	ldw	r2,-4(fp)
    984c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    9850:	0005883a 	mov	r2,zero
}
    9854:	e037883a 	mov	sp,fp
    9858:	df000017 	ldw	fp,0(sp)
    985c:	dec00104 	addi	sp,sp,4
    9860:	f800283a 	ret

00009864 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    9864:	defffc04 	addi	sp,sp,-16
    9868:	dfc00315 	stw	ra,12(sp)
    986c:	df000215 	stw	fp,8(sp)
    9870:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    9874:	01430c04 	movi	r5,3120
    9878:	010000b4 	movhi	r4,2
    987c:	212d2a04 	addi	r4,r4,-19288
    9880:	00066d00 	call	66d0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    9884:	008000b4 	movhi	r2,2
    9888:	10ad2a04 	addi	r2,r2,-19288
    988c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    9890:	e03fff0d 	sth	zero,-4(fp)
    9894:	00001306 	br	98e4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    9898:	e0bfff0b 	ldhu	r2,-4(fp)
    989c:	10800044 	addi	r2,r2,1
    98a0:	10c00d24 	muli	r3,r2,52
    98a4:	008000b4 	movhi	r2,2
    98a8:	10ad2a04 	addi	r2,r2,-19288
    98ac:	1887883a 	add	r3,r3,r2
    98b0:	e0bffe17 	ldw	r2,-8(fp)
    98b4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    98b8:	e0bffe17 	ldw	r2,-8(fp)
    98bc:	00c00fc4 	movi	r3,63
    98c0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    98c4:	e0bffe17 	ldw	r2,-8(fp)
    98c8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    98cc:	e0bffe17 	ldw	r2,-8(fp)
    98d0:	10800d04 	addi	r2,r2,52
    98d4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    98d8:	e0bfff0b 	ldhu	r2,-4(fp)
    98dc:	10800044 	addi	r2,r2,1
    98e0:	e0bfff0d 	sth	r2,-4(fp)
    98e4:	e0bfff0b 	ldhu	r2,-4(fp)
    98e8:	10800ef0 	cmpltui	r2,r2,59
    98ec:	103fea1e 	bne	r2,zero,9898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009898>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    98f0:	e0bffe17 	ldw	r2,-8(fp)
    98f4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    98f8:	e0bffe17 	ldw	r2,-8(fp)
    98fc:	00c00fc4 	movi	r3,63
    9900:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    9904:	e0bffe17 	ldw	r2,-8(fp)
    9908:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    990c:	008000b4 	movhi	r2,2
    9910:	10ad2a04 	addi	r2,r2,-19288
    9914:	d0a7db15 	stw	r2,-24724(gp)
#endif
}
    9918:	0001883a 	nop
    991c:	e037883a 	mov	sp,fp
    9920:	dfc00117 	ldw	ra,4(sp)
    9924:	df000017 	ldw	fp,0(sp)
    9928:	dec00204 	addi	sp,sp,8
    992c:	f800283a 	ret

00009930 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    9930:	defff804 	addi	sp,sp,-32
    9934:	df000715 	stw	fp,28(sp)
    9938:	df000704 	addi	fp,sp,28
    993c:	e13ffe15 	stw	r4,-8(fp)
    9940:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9944:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9948:	e0bfff17 	ldw	r2,-4(fp)
    994c:	1000021e 	bne	r2,zero,9958 <OSQAccept+0x28>
        return ((void *)0);
    9950:	0005883a 	mov	r2,zero
    9954:	00004206 	br	9a60 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    9958:	e0bffe17 	ldw	r2,-8(fp)
    995c:	1000051e 	bne	r2,zero,9974 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    9960:	e0bfff17 	ldw	r2,-4(fp)
    9964:	00c00104 	movi	r3,4
    9968:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    996c:	0005883a 	mov	r2,zero
    9970:	00003b06 	br	9a60 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    9974:	e0bffe17 	ldw	r2,-8(fp)
    9978:	10800003 	ldbu	r2,0(r2)
    997c:	10803fcc 	andi	r2,r2,255
    9980:	108000a0 	cmpeqi	r2,r2,2
    9984:	1000051e 	bne	r2,zero,999c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    9988:	e0bfff17 	ldw	r2,-4(fp)
    998c:	00c00044 	movi	r3,1
    9990:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9994:	0005883a 	mov	r2,zero
    9998:	00003106 	br	9a60 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    999c:	0005303a 	rdctl	r2,status
    99a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99a4:	e0fffd17 	ldw	r3,-12(fp)
    99a8:	00bfff84 	movi	r2,-2
    99ac:	1884703a 	and	r2,r3,r2
    99b0:	1001703a 	wrctl	status,r2
  
  return context;
    99b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    99b8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    99bc:	e0bffe17 	ldw	r2,-8(fp)
    99c0:	10800117 	ldw	r2,4(r2)
    99c4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    99c8:	e0bffc17 	ldw	r2,-16(fp)
    99cc:	1080058b 	ldhu	r2,22(r2)
    99d0:	10bfffcc 	andi	r2,r2,65535
    99d4:	10001926 	beq	r2,zero,9a3c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    99d8:	e0bffc17 	ldw	r2,-16(fp)
    99dc:	10800417 	ldw	r2,16(r2)
    99e0:	11000104 	addi	r4,r2,4
    99e4:	e0fffc17 	ldw	r3,-16(fp)
    99e8:	19000415 	stw	r4,16(r3)
    99ec:	10800017 	ldw	r2,0(r2)
    99f0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    99f4:	e0bffc17 	ldw	r2,-16(fp)
    99f8:	1080058b 	ldhu	r2,22(r2)
    99fc:	10bfffc4 	addi	r2,r2,-1
    9a00:	1007883a 	mov	r3,r2
    9a04:	e0bffc17 	ldw	r2,-16(fp)
    9a08:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    9a0c:	e0bffc17 	ldw	r2,-16(fp)
    9a10:	10c00417 	ldw	r3,16(r2)
    9a14:	e0bffc17 	ldw	r2,-16(fp)
    9a18:	10800217 	ldw	r2,8(r2)
    9a1c:	1880041e 	bne	r3,r2,9a30 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    9a20:	e0bffc17 	ldw	r2,-16(fp)
    9a24:	10c00117 	ldw	r3,4(r2)
    9a28:	e0bffc17 	ldw	r2,-16(fp)
    9a2c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    9a30:	e0bfff17 	ldw	r2,-4(fp)
    9a34:	10000005 	stb	zero,0(r2)
    9a38:	00000406 	br	9a4c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    9a3c:	e0bfff17 	ldw	r2,-4(fp)
    9a40:	00c007c4 	movi	r3,31
    9a44:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    9a48:	e03ff915 	stw	zero,-28(fp)
    9a4c:	e0bffa17 	ldw	r2,-24(fp)
    9a50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a54:	e0bffb17 	ldw	r2,-20(fp)
    9a58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    9a5c:	e0bff917 	ldw	r2,-28(fp)
}
    9a60:	e037883a 	mov	sp,fp
    9a64:	df000017 	ldw	fp,0(sp)
    9a68:	dec00104 	addi	sp,sp,4
    9a6c:	f800283a 	ret

00009a70 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    9a70:	defff404 	addi	sp,sp,-48
    9a74:	dfc00b15 	stw	ra,44(sp)
    9a78:	df000a15 	stw	fp,40(sp)
    9a7c:	df000a04 	addi	fp,sp,40
    9a80:	e13ffe15 	stw	r4,-8(fp)
    9a84:	2805883a 	mov	r2,r5
    9a88:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9a8c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    9a90:	d0a7e003 	ldbu	r2,-24704(gp)
    9a94:	10803fcc 	andi	r2,r2,255
    9a98:	10000226 	beq	r2,zero,9aa4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    9a9c:	0005883a 	mov	r2,zero
    9aa0:	00005906 	br	9c08 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9aa4:	0005303a 	rdctl	r2,status
    9aa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9aac:	e0fffd17 	ldw	r3,-12(fp)
    9ab0:	00bfff84 	movi	r2,-2
    9ab4:	1884703a 	and	r2,r3,r2
    9ab8:	1001703a 	wrctl	status,r2
  
  return context;
    9abc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9ac0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    9ac4:	d0a7df17 	ldw	r2,-24708(gp)
    9ac8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    9acc:	d0a7df17 	ldw	r2,-24708(gp)
    9ad0:	10000326 	beq	r2,zero,9ae0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9ad4:	d0a7df17 	ldw	r2,-24708(gp)
    9ad8:	10800117 	ldw	r2,4(r2)
    9adc:	d0a7df15 	stw	r2,-24708(gp)
    9ae0:	e0bff717 	ldw	r2,-36(fp)
    9ae4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ae8:	e0bff817 	ldw	r2,-32(fp)
    9aec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    9af0:	e0bff617 	ldw	r2,-40(fp)
    9af4:	10004326 	beq	r2,zero,9c04 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9af8:	0005303a 	rdctl	r2,status
    9afc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b00:	e0fff917 	ldw	r3,-28(fp)
    9b04:	00bfff84 	movi	r2,-2
    9b08:	1884703a 	and	r2,r3,r2
    9b0c:	1001703a 	wrctl	status,r2
  
  return context;
    9b10:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    9b14:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    9b18:	d0a7dd17 	ldw	r2,-24716(gp)
    9b1c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    9b20:	e0bffb17 	ldw	r2,-20(fp)
    9b24:	10002d26 	beq	r2,zero,9bdc <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    9b28:	d0a7dd17 	ldw	r2,-24716(gp)
    9b2c:	10800017 	ldw	r2,0(r2)
    9b30:	d0a7dd15 	stw	r2,-24716(gp)
    9b34:	e0bff717 	ldw	r2,-36(fp)
    9b38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b3c:	e0bffa17 	ldw	r2,-24(fp)
    9b40:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    9b44:	e0bffb17 	ldw	r2,-20(fp)
    9b48:	e0fffe17 	ldw	r3,-8(fp)
    9b4c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    9b50:	e0bfff0b 	ldhu	r2,-4(fp)
    9b54:	1085883a 	add	r2,r2,r2
    9b58:	1085883a 	add	r2,r2,r2
    9b5c:	1007883a 	mov	r3,r2
    9b60:	e0bffe17 	ldw	r2,-8(fp)
    9b64:	10c7883a 	add	r3,r2,r3
    9b68:	e0bffb17 	ldw	r2,-20(fp)
    9b6c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    9b70:	e0bffb17 	ldw	r2,-20(fp)
    9b74:	e0fffe17 	ldw	r3,-8(fp)
    9b78:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    9b7c:	e0bffb17 	ldw	r2,-20(fp)
    9b80:	e0fffe17 	ldw	r3,-8(fp)
    9b84:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    9b88:	e0bffb17 	ldw	r2,-20(fp)
    9b8c:	e0ffff0b 	ldhu	r3,-4(fp)
    9b90:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    9b94:	e0bffb17 	ldw	r2,-20(fp)
    9b98:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    9b9c:	e0bff617 	ldw	r2,-40(fp)
    9ba0:	00c00084 	movi	r3,2
    9ba4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    9ba8:	e0bff617 	ldw	r2,-40(fp)
    9bac:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    9bb0:	e0bff617 	ldw	r2,-40(fp)
    9bb4:	e0fffb17 	ldw	r3,-20(fp)
    9bb8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    9bbc:	e0bff617 	ldw	r2,-40(fp)
    9bc0:	00c00fc4 	movi	r3,63
    9bc4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    9bc8:	e0bff617 	ldw	r2,-40(fp)
    9bcc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    9bd0:	e13ff617 	ldw	r4,-40(fp)
    9bd4:	00062f00 	call	62f0 <OS_EventWaitListInit>
    9bd8:	00000a06 	br	9c04 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    9bdc:	d0e7df17 	ldw	r3,-24708(gp)
    9be0:	e0bff617 	ldw	r2,-40(fp)
    9be4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    9be8:	e0bff617 	ldw	r2,-40(fp)
    9bec:	d0a7df15 	stw	r2,-24708(gp)
    9bf0:	e0bff717 	ldw	r2,-36(fp)
    9bf4:	e0bffc15 	stw	r2,-16(fp)
    9bf8:	e0bffc17 	ldw	r2,-16(fp)
    9bfc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    9c00:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    9c04:	e0bff617 	ldw	r2,-40(fp)
}
    9c08:	e037883a 	mov	sp,fp
    9c0c:	dfc00117 	ldw	ra,4(sp)
    9c10:	df000017 	ldw	fp,0(sp)
    9c14:	dec00204 	addi	sp,sp,8
    9c18:	f800283a 	ret

00009c1c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9c1c:	defff204 	addi	sp,sp,-56
    9c20:	dfc00d15 	stw	ra,52(sp)
    9c24:	df000c15 	stw	fp,48(sp)
    9c28:	df000c04 	addi	fp,sp,48
    9c2c:	e13ffd15 	stw	r4,-12(fp)
    9c30:	2805883a 	mov	r2,r5
    9c34:	e1bfff15 	stw	r6,-4(fp)
    9c38:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9c3c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9c40:	e0bfff17 	ldw	r2,-4(fp)
    9c44:	1000021e 	bne	r2,zero,9c50 <OSQDel+0x34>
        return (pevent);
    9c48:	e0bffd17 	ldw	r2,-12(fp)
    9c4c:	00008e06 	br	9e88 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9c50:	e0bffd17 	ldw	r2,-12(fp)
    9c54:	1000051e 	bne	r2,zero,9c6c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9c58:	e0bfff17 	ldw	r2,-4(fp)
    9c5c:	00c00104 	movi	r3,4
    9c60:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9c64:	e0bffd17 	ldw	r2,-12(fp)
    9c68:	00008706 	br	9e88 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    9c6c:	e0bffd17 	ldw	r2,-12(fp)
    9c70:	10800003 	ldbu	r2,0(r2)
    9c74:	10803fcc 	andi	r2,r2,255
    9c78:	108000a0 	cmpeqi	r2,r2,2
    9c7c:	1000051e 	bne	r2,zero,9c94 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9c80:	e0bfff17 	ldw	r2,-4(fp)
    9c84:	00c00044 	movi	r3,1
    9c88:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9c8c:	e0bffd17 	ldw	r2,-12(fp)
    9c90:	00007d06 	br	9e88 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9c94:	d0a7e003 	ldbu	r2,-24704(gp)
    9c98:	10803fcc 	andi	r2,r2,255
    9c9c:	10000526 	beq	r2,zero,9cb4 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    9ca0:	e0bfff17 	ldw	r2,-4(fp)
    9ca4:	00c003c4 	movi	r3,15
    9ca8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9cac:	e0bffd17 	ldw	r2,-12(fp)
    9cb0:	00007506 	br	9e88 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9cb4:	0005303a 	rdctl	r2,status
    9cb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9cbc:	e0fffc17 	ldw	r3,-16(fp)
    9cc0:	00bfff84 	movi	r2,-2
    9cc4:	1884703a 	and	r2,r3,r2
    9cc8:	1001703a 	wrctl	status,r2
  
  return context;
    9ccc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9cd0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    9cd4:	e0bffd17 	ldw	r2,-12(fp)
    9cd8:	10800283 	ldbu	r2,10(r2)
    9cdc:	10803fcc 	andi	r2,r2,255
    9ce0:	10000326 	beq	r2,zero,9cf0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    9ce4:	00800044 	movi	r2,1
    9ce8:	e0bff405 	stb	r2,-48(fp)
    9cec:	00000106 	br	9cf4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9cf0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    9cf4:	e0bffe03 	ldbu	r2,-8(fp)
    9cf8:	10000326 	beq	r2,zero,9d08 <OSQDel+0xec>
    9cfc:	10800060 	cmpeqi	r2,r2,1
    9d00:	1000301e 	bne	r2,zero,9dc4 <OSQDel+0x1a8>
    9d04:	00005506 	br	9e5c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    9d08:	e0bff403 	ldbu	r2,-48(fp)
    9d0c:	10001e1e 	bne	r2,zero,9d88 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9d10:	e0bffd17 	ldw	r2,-12(fp)
    9d14:	00c00fc4 	movi	r3,63
    9d18:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    9d1c:	e0bffd17 	ldw	r2,-12(fp)
    9d20:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    9d24:	e0bffd17 	ldw	r2,-12(fp)
    9d28:	10800117 	ldw	r2,4(r2)
    9d2c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    9d30:	d0e7dd17 	ldw	r3,-24716(gp)
    9d34:	e0bff817 	ldw	r2,-32(fp)
    9d38:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    9d3c:	e0bff817 	ldw	r2,-32(fp)
    9d40:	d0a7dd15 	stw	r2,-24716(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9d44:	e0bffd17 	ldw	r2,-12(fp)
    9d48:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    9d4c:	d0e7df17 	ldw	r3,-24708(gp)
    9d50:	e0bffd17 	ldw	r2,-12(fp)
    9d54:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9d58:	e0bffd17 	ldw	r2,-12(fp)
    9d5c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    9d60:	e0bffd17 	ldw	r2,-12(fp)
    9d64:	d0a7df15 	stw	r2,-24708(gp)
    9d68:	e0bff617 	ldw	r2,-40(fp)
    9d6c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d70:	e0bff717 	ldw	r2,-36(fp)
    9d74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    9d78:	e0bfff17 	ldw	r2,-4(fp)
    9d7c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    9d80:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    9d84:	00003f06 	br	9e84 <OSQDel+0x268>
    9d88:	e0bff617 	ldw	r2,-40(fp)
    9d8c:	e0bff915 	stw	r2,-28(fp)
    9d90:	e0bff917 	ldw	r2,-28(fp)
    9d94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    9d98:	e0bfff17 	ldw	r2,-4(fp)
    9d9c:	00c01244 	movi	r3,73
    9da0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    9da4:	e0bffd17 	ldw	r2,-12(fp)
    9da8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    9dac:	00003506 	br	9e84 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    9db0:	000f883a 	mov	r7,zero
    9db4:	01800104 	movi	r6,4
    9db8:	000b883a 	mov	r5,zero
    9dbc:	e13ffd17 	ldw	r4,-12(fp)
    9dc0:	0005d400 	call	5d40 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    9dc4:	e0bffd17 	ldw	r2,-12(fp)
    9dc8:	10800283 	ldbu	r2,10(r2)
    9dcc:	10803fcc 	andi	r2,r2,255
    9dd0:	103ff71e 	bne	r2,zero,9db0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009db0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9dd4:	e0bffd17 	ldw	r2,-12(fp)
    9dd8:	00c00fc4 	movi	r3,63
    9ddc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    9de0:	e0bffd17 	ldw	r2,-12(fp)
    9de4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    9de8:	e0bffd17 	ldw	r2,-12(fp)
    9dec:	10800117 	ldw	r2,4(r2)
    9df0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    9df4:	d0e7dd17 	ldw	r3,-24716(gp)
    9df8:	e0bff817 	ldw	r2,-32(fp)
    9dfc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    9e00:	e0bff817 	ldw	r2,-32(fp)
    9e04:	d0a7dd15 	stw	r2,-24716(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9e08:	e0bffd17 	ldw	r2,-12(fp)
    9e0c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9e10:	d0e7df17 	ldw	r3,-24708(gp)
    9e14:	e0bffd17 	ldw	r2,-12(fp)
    9e18:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9e1c:	e0bffd17 	ldw	r2,-12(fp)
    9e20:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9e24:	e0bffd17 	ldw	r2,-12(fp)
    9e28:	d0a7df15 	stw	r2,-24708(gp)
    9e2c:	e0bff617 	ldw	r2,-40(fp)
    9e30:	e0bffa15 	stw	r2,-24(fp)
    9e34:	e0bffa17 	ldw	r2,-24(fp)
    9e38:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9e3c:	e0bff403 	ldbu	r2,-48(fp)
    9e40:	10800058 	cmpnei	r2,r2,1
    9e44:	1000011e 	bne	r2,zero,9e4c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    9e48:	000678c0 	call	678c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    9e4c:	e0bfff17 	ldw	r2,-4(fp)
    9e50:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    9e54:	e03ff515 	stw	zero,-44(fp)
             break;
    9e58:	00000a06 	br	9e84 <OSQDel+0x268>
    9e5c:	e0bff617 	ldw	r2,-40(fp)
    9e60:	e0bffb15 	stw	r2,-20(fp)
    9e64:	e0bffb17 	ldw	r2,-20(fp)
    9e68:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    9e6c:	e0bfff17 	ldw	r2,-4(fp)
    9e70:	00c001c4 	movi	r3,7
    9e74:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9e78:	e0bffd17 	ldw	r2,-12(fp)
    9e7c:	e0bff515 	stw	r2,-44(fp)
             break;
    9e80:	0001883a 	nop
    }
    return (pevent_return);
    9e84:	e0bff517 	ldw	r2,-44(fp)
}
    9e88:	e037883a 	mov	sp,fp
    9e8c:	dfc00117 	ldw	ra,4(sp)
    9e90:	df000017 	ldw	fp,0(sp)
    9e94:	dec00204 	addi	sp,sp,8
    9e98:	f800283a 	ret

00009e9c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    9e9c:	defffa04 	addi	sp,sp,-24
    9ea0:	df000515 	stw	fp,20(sp)
    9ea4:	df000504 	addi	fp,sp,20
    9ea8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9eac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9eb0:	e0bfff17 	ldw	r2,-4(fp)
    9eb4:	1000021e 	bne	r2,zero,9ec0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    9eb8:	00800104 	movi	r2,4
    9ebc:	00002106 	br	9f44 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9ec0:	e0bfff17 	ldw	r2,-4(fp)
    9ec4:	10800003 	ldbu	r2,0(r2)
    9ec8:	10803fcc 	andi	r2,r2,255
    9ecc:	108000a0 	cmpeqi	r2,r2,2
    9ed0:	1000021e 	bne	r2,zero,9edc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    9ed4:	00800044 	movi	r2,1
    9ed8:	00001a06 	br	9f44 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9edc:	0005303a 	rdctl	r2,status
    9ee0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ee4:	e0fffd17 	ldw	r3,-12(fp)
    9ee8:	00bfff84 	movi	r2,-2
    9eec:	1884703a 	and	r2,r3,r2
    9ef0:	1001703a 	wrctl	status,r2
  
  return context;
    9ef4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9ef8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    9efc:	e0bfff17 	ldw	r2,-4(fp)
    9f00:	10800117 	ldw	r2,4(r2)
    9f04:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    9f08:	e0bffc17 	ldw	r2,-16(fp)
    9f0c:	10c00117 	ldw	r3,4(r2)
    9f10:	e0bffc17 	ldw	r2,-16(fp)
    9f14:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    9f18:	e0bffc17 	ldw	r2,-16(fp)
    9f1c:	10c00117 	ldw	r3,4(r2)
    9f20:	e0bffc17 	ldw	r2,-16(fp)
    9f24:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    9f28:	e0bffc17 	ldw	r2,-16(fp)
    9f2c:	1000058d 	sth	zero,22(r2)
    9f30:	e0bffb17 	ldw	r2,-20(fp)
    9f34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f38:	e0bffe17 	ldw	r2,-8(fp)
    9f3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9f40:	0005883a 	mov	r2,zero
}
    9f44:	e037883a 	mov	sp,fp
    9f48:	df000017 	ldw	fp,0(sp)
    9f4c:	dec00104 	addi	sp,sp,4
    9f50:	f800283a 	ret

00009f54 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    9f54:	defff304 	addi	sp,sp,-52
    9f58:	dfc00c15 	stw	ra,48(sp)
    9f5c:	df000b15 	stw	fp,44(sp)
    9f60:	df000b04 	addi	fp,sp,44
    9f64:	e13ffd15 	stw	r4,-12(fp)
    9f68:	2805883a 	mov	r2,r5
    9f6c:	e1bfff15 	stw	r6,-4(fp)
    9f70:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9f74:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9f78:	e0bfff17 	ldw	r2,-4(fp)
    9f7c:	1000021e 	bne	r2,zero,9f88 <OSQPend+0x34>
        return ((void *)0);
    9f80:	0005883a 	mov	r2,zero
    9f84:	00009106 	br	a1cc <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    9f88:	e0bffd17 	ldw	r2,-12(fp)
    9f8c:	1000051e 	bne	r2,zero,9fa4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9f90:	e0bfff17 	ldw	r2,-4(fp)
    9f94:	00c00104 	movi	r3,4
    9f98:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9f9c:	0005883a 	mov	r2,zero
    9fa0:	00008a06 	br	a1cc <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    9fa4:	e0bffd17 	ldw	r2,-12(fp)
    9fa8:	10800003 	ldbu	r2,0(r2)
    9fac:	10803fcc 	andi	r2,r2,255
    9fb0:	108000a0 	cmpeqi	r2,r2,2
    9fb4:	1000051e 	bne	r2,zero,9fcc <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9fb8:	e0bfff17 	ldw	r2,-4(fp)
    9fbc:	00c00044 	movi	r3,1
    9fc0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9fc4:	0005883a 	mov	r2,zero
    9fc8:	00008006 	br	a1cc <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    9fcc:	d0a7e003 	ldbu	r2,-24704(gp)
    9fd0:	10803fcc 	andi	r2,r2,255
    9fd4:	10000526 	beq	r2,zero,9fec <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    9fd8:	e0bfff17 	ldw	r2,-4(fp)
    9fdc:	00c00084 	movi	r3,2
    9fe0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9fe4:	0005883a 	mov	r2,zero
    9fe8:	00007806 	br	a1cc <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    9fec:	d0a7d203 	ldbu	r2,-24760(gp)
    9ff0:	10803fcc 	andi	r2,r2,255
    9ff4:	10000526 	beq	r2,zero,a00c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    9ff8:	e0bfff17 	ldw	r2,-4(fp)
    9ffc:	00c00344 	movi	r3,13
    a000:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a004:	0005883a 	mov	r2,zero
    a008:	00007006 	br	a1cc <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a00c:	0005303a 	rdctl	r2,status
    a010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a014:	e0fffc17 	ldw	r3,-16(fp)
    a018:	00bfff84 	movi	r2,-2
    a01c:	1884703a 	and	r2,r3,r2
    a020:	1001703a 	wrctl	status,r2
  
  return context;
    a024:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a028:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    a02c:	e0bffd17 	ldw	r2,-12(fp)
    a030:	10800117 	ldw	r2,4(r2)
    a034:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    a038:	e0bff817 	ldw	r2,-32(fp)
    a03c:	1080058b 	ldhu	r2,22(r2)
    a040:	10bfffcc 	andi	r2,r2,65535
    a044:	10001e26 	beq	r2,zero,a0c0 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    a048:	e0bff817 	ldw	r2,-32(fp)
    a04c:	10800417 	ldw	r2,16(r2)
    a050:	11000104 	addi	r4,r2,4
    a054:	e0fff817 	ldw	r3,-32(fp)
    a058:	19000415 	stw	r4,16(r3)
    a05c:	10800017 	ldw	r2,0(r2)
    a060:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    a064:	e0bff817 	ldw	r2,-32(fp)
    a068:	1080058b 	ldhu	r2,22(r2)
    a06c:	10bfffc4 	addi	r2,r2,-1
    a070:	1007883a 	mov	r3,r2
    a074:	e0bff817 	ldw	r2,-32(fp)
    a078:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    a07c:	e0bff817 	ldw	r2,-32(fp)
    a080:	10c00417 	ldw	r3,16(r2)
    a084:	e0bff817 	ldw	r2,-32(fp)
    a088:	10800217 	ldw	r2,8(r2)
    a08c:	1880041e 	bne	r3,r2,a0a0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    a090:	e0bff817 	ldw	r2,-32(fp)
    a094:	10c00117 	ldw	r3,4(r2)
    a098:	e0bff817 	ldw	r2,-32(fp)
    a09c:	10c00415 	stw	r3,16(r2)
    a0a0:	e0bff617 	ldw	r2,-40(fp)
    a0a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a0a8:	e0bff717 	ldw	r2,-36(fp)
    a0ac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    a0b0:	e0bfff17 	ldw	r2,-4(fp)
    a0b4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    a0b8:	e0bff517 	ldw	r2,-44(fp)
    a0bc:	00004306 	br	a1cc <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    a0c0:	d0a7e117 	ldw	r2,-24700(gp)
    a0c4:	d0e7e117 	ldw	r3,-24700(gp)
    a0c8:	18c00c03 	ldbu	r3,48(r3)
    a0cc:	18c00114 	ori	r3,r3,4
    a0d0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    a0d4:	d0a7e117 	ldw	r2,-24700(gp)
    a0d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    a0dc:	d0a7e117 	ldw	r2,-24700(gp)
    a0e0:	e0fffe0b 	ldhu	r3,-8(fp)
    a0e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    a0e8:	e13ffd17 	ldw	r4,-12(fp)
    a0ec:	0005ed80 	call	5ed8 <OS_EventTaskWait>
    a0f0:	e0bff617 	ldw	r2,-40(fp)
    a0f4:	e0bffb15 	stw	r2,-20(fp)
    a0f8:	e0bffb17 	ldw	r2,-20(fp)
    a0fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    a100:	000678c0 	call	678c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a104:	0005303a 	rdctl	r2,status
    a108:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a10c:	e0fff917 	ldw	r3,-28(fp)
    a110:	00bfff84 	movi	r2,-2
    a114:	1884703a 	and	r2,r3,r2
    a118:	1001703a 	wrctl	status,r2
  
  return context;
    a11c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    a120:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    a124:	d0a7e117 	ldw	r2,-24700(gp)
    a128:	10800c43 	ldbu	r2,49(r2)
    a12c:	10803fcc 	andi	r2,r2,255
    a130:	10000326 	beq	r2,zero,a140 <OSQPend+0x1ec>
    a134:	108000a0 	cmpeqi	r2,r2,2
    a138:	1000071e 	bne	r2,zero,a158 <OSQPend+0x204>
    a13c:	00000b06 	br	a16c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    a140:	d0a7e117 	ldw	r2,-24700(gp)
    a144:	10800917 	ldw	r2,36(r2)
    a148:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    a14c:	e0bfff17 	ldw	r2,-4(fp)
    a150:	10000005 	stb	zero,0(r2)
             break;
    a154:	00000e06 	br	a190 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    a158:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    a15c:	e0bfff17 	ldw	r2,-4(fp)
    a160:	00c00384 	movi	r3,14
    a164:	10c00005 	stb	r3,0(r2)
             break;
    a168:	00000906 	br	a190 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    a16c:	d0a7e117 	ldw	r2,-24700(gp)
    a170:	e17ffd17 	ldw	r5,-12(fp)
    a174:	1009883a 	mov	r4,r2
    a178:	00061380 	call	6138 <OS_EventTaskRemove>
             pmsg = (void *)0;
    a17c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    a180:	e0bfff17 	ldw	r2,-4(fp)
    a184:	00c00284 	movi	r3,10
    a188:	10c00005 	stb	r3,0(r2)
             break;
    a18c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    a190:	d0a7e117 	ldw	r2,-24700(gp)
    a194:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    a198:	d0a7e117 	ldw	r2,-24700(gp)
    a19c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    a1a0:	d0a7e117 	ldw	r2,-24700(gp)
    a1a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    a1a8:	d0a7e117 	ldw	r2,-24700(gp)
    a1ac:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    a1b0:	d0a7e117 	ldw	r2,-24700(gp)
    a1b4:	10000915 	stw	zero,36(r2)
    a1b8:	e0bff617 	ldw	r2,-40(fp)
    a1bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1c0:	e0bffa17 	ldw	r2,-24(fp)
    a1c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    a1c8:	e0bff517 	ldw	r2,-44(fp)
}
    a1cc:	e037883a 	mov	sp,fp
    a1d0:	dfc00117 	ldw	ra,4(sp)
    a1d4:	df000017 	ldw	fp,0(sp)
    a1d8:	dec00204 	addi	sp,sp,8
    a1dc:	f800283a 	ret

0000a1e0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a1e0:	defff604 	addi	sp,sp,-40
    a1e4:	dfc00915 	stw	ra,36(sp)
    a1e8:	df000815 	stw	fp,32(sp)
    a1ec:	df000804 	addi	fp,sp,32
    a1f0:	e13ffd15 	stw	r4,-12(fp)
    a1f4:	2805883a 	mov	r2,r5
    a1f8:	e1bfff15 	stw	r6,-4(fp)
    a1fc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a200:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    a204:	e0bfff17 	ldw	r2,-4(fp)
    a208:	1000021e 	bne	r2,zero,a214 <OSQPendAbort+0x34>
        return (0);
    a20c:	0005883a 	mov	r2,zero
    a210:	00004906 	br	a338 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a214:	e0bffd17 	ldw	r2,-12(fp)
    a218:	1000051e 	bne	r2,zero,a230 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a21c:	e0bfff17 	ldw	r2,-4(fp)
    a220:	00c00104 	movi	r3,4
    a224:	10c00005 	stb	r3,0(r2)
        return (0);
    a228:	0005883a 	mov	r2,zero
    a22c:	00004206 	br	a338 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    a230:	e0bffd17 	ldw	r2,-12(fp)
    a234:	10800003 	ldbu	r2,0(r2)
    a238:	10803fcc 	andi	r2,r2,255
    a23c:	108000a0 	cmpeqi	r2,r2,2
    a240:	1000051e 	bne	r2,zero,a258 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a244:	e0bfff17 	ldw	r2,-4(fp)
    a248:	00c00044 	movi	r3,1
    a24c:	10c00005 	stb	r3,0(r2)
        return (0);
    a250:	0005883a 	mov	r2,zero
    a254:	00003806 	br	a338 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a258:	0005303a 	rdctl	r2,status
    a25c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a260:	e0fffc17 	ldw	r3,-16(fp)
    a264:	00bfff84 	movi	r2,-2
    a268:	1884703a 	and	r2,r3,r2
    a26c:	1001703a 	wrctl	status,r2
  
  return context;
    a270:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a274:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    a278:	e0bffd17 	ldw	r2,-12(fp)
    a27c:	10800283 	ldbu	r2,10(r2)
    a280:	10803fcc 	andi	r2,r2,255
    a284:	10002526 	beq	r2,zero,a31c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    a288:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    a28c:	e0bffe03 	ldbu	r2,-8(fp)
    a290:	10800060 	cmpeqi	r2,r2,1
    a294:	10000e26 	beq	r2,zero,a2d0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    a298:	00000806 	br	a2bc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    a29c:	01c00084 	movi	r7,2
    a2a0:	01800104 	movi	r6,4
    a2a4:	000b883a 	mov	r5,zero
    a2a8:	e13ffd17 	ldw	r4,-12(fp)
    a2ac:	0005d400 	call	5d40 <OS_EventTaskRdy>
                     nbr_tasks++;
    a2b0:	e0bff803 	ldbu	r2,-32(fp)
    a2b4:	10800044 	addi	r2,r2,1
    a2b8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    a2bc:	e0bffd17 	ldw	r2,-12(fp)
    a2c0:	10800283 	ldbu	r2,10(r2)
    a2c4:	10803fcc 	andi	r2,r2,255
    a2c8:	103ff41e 	bne	r2,zero,a29c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a29c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    a2cc:	00000906 	br	a2f4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    a2d0:	01c00084 	movi	r7,2
    a2d4:	01800104 	movi	r6,4
    a2d8:	000b883a 	mov	r5,zero
    a2dc:	e13ffd17 	ldw	r4,-12(fp)
    a2e0:	0005d400 	call	5d40 <OS_EventTaskRdy>
                 nbr_tasks++;
    a2e4:	e0bff803 	ldbu	r2,-32(fp)
    a2e8:	10800044 	addi	r2,r2,1
    a2ec:	e0bff805 	stb	r2,-32(fp)
                 break;
    a2f0:	0001883a 	nop
    a2f4:	e0bff917 	ldw	r2,-28(fp)
    a2f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2fc:	e0bffa17 	ldw	r2,-24(fp)
    a300:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    a304:	000678c0 	call	678c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    a308:	e0bfff17 	ldw	r2,-4(fp)
    a30c:	00c00384 	movi	r3,14
    a310:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    a314:	e0bff803 	ldbu	r2,-32(fp)
    a318:	00000706 	br	a338 <OSQPendAbort+0x158>
    a31c:	e0bff917 	ldw	r2,-28(fp)
    a320:	e0bffb15 	stw	r2,-20(fp)
    a324:	e0bffb17 	ldw	r2,-20(fp)
    a328:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a32c:	e0bfff17 	ldw	r2,-4(fp)
    a330:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    a334:	0005883a 	mov	r2,zero
}
    a338:	e037883a 	mov	sp,fp
    a33c:	dfc00117 	ldw	ra,4(sp)
    a340:	df000017 	ldw	fp,0(sp)
    a344:	dec00204 	addi	sp,sp,8
    a348:	f800283a 	ret

0000a34c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    a34c:	defff604 	addi	sp,sp,-40
    a350:	dfc00915 	stw	ra,36(sp)
    a354:	df000815 	stw	fp,32(sp)
    a358:	df000804 	addi	fp,sp,32
    a35c:	e13ffe15 	stw	r4,-8(fp)
    a360:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    a364:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    a368:	e0bffe17 	ldw	r2,-8(fp)
    a36c:	1000021e 	bne	r2,zero,a378 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    a370:	00800104 	movi	r2,4
    a374:	00004a06 	br	a4a0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    a378:	e0bffe17 	ldw	r2,-8(fp)
    a37c:	10800003 	ldbu	r2,0(r2)
    a380:	10803fcc 	andi	r2,r2,255
    a384:	108000a0 	cmpeqi	r2,r2,2
    a388:	1000021e 	bne	r2,zero,a394 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    a38c:	00800044 	movi	r2,1
    a390:	00004306 	br	a4a0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a394:	0005303a 	rdctl	r2,status
    a398:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a39c:	e0fffd17 	ldw	r3,-12(fp)
    a3a0:	00bfff84 	movi	r2,-2
    a3a4:	1884703a 	and	r2,r3,r2
    a3a8:	1001703a 	wrctl	status,r2
  
  return context;
    a3ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a3b0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    a3b4:	e0bffe17 	ldw	r2,-8(fp)
    a3b8:	10800283 	ldbu	r2,10(r2)
    a3bc:	10803fcc 	andi	r2,r2,255
    a3c0:	10000c26 	beq	r2,zero,a3f4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a3c4:	000f883a 	mov	r7,zero
    a3c8:	01800104 	movi	r6,4
    a3cc:	e17fff17 	ldw	r5,-4(fp)
    a3d0:	e13ffe17 	ldw	r4,-8(fp)
    a3d4:	0005d400 	call	5d40 <OS_EventTaskRdy>
    a3d8:	e0bff817 	ldw	r2,-32(fp)
    a3dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a3e0:	e0bff917 	ldw	r2,-28(fp)
    a3e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    a3e8:	000678c0 	call	678c <OS_Sched>
        return (OS_ERR_NONE);
    a3ec:	0005883a 	mov	r2,zero
    a3f0:	00002b06 	br	a4a0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    a3f4:	e0bffe17 	ldw	r2,-8(fp)
    a3f8:	10800117 	ldw	r2,4(r2)
    a3fc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    a400:	e0bffb17 	ldw	r2,-20(fp)
    a404:	10c0058b 	ldhu	r3,22(r2)
    a408:	e0bffb17 	ldw	r2,-20(fp)
    a40c:	1080050b 	ldhu	r2,20(r2)
    a410:	18ffffcc 	andi	r3,r3,65535
    a414:	10bfffcc 	andi	r2,r2,65535
    a418:	18800636 	bltu	r3,r2,a434 <OSQPost+0xe8>
    a41c:	e0bff817 	ldw	r2,-32(fp)
    a420:	e0bffa15 	stw	r2,-24(fp)
    a424:	e0bffa17 	ldw	r2,-24(fp)
    a428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a42c:	00800784 	movi	r2,30
    a430:	00001b06 	br	a4a0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    a434:	e0bffb17 	ldw	r2,-20(fp)
    a438:	10800317 	ldw	r2,12(r2)
    a43c:	11000104 	addi	r4,r2,4
    a440:	e0fffb17 	ldw	r3,-20(fp)
    a444:	19000315 	stw	r4,12(r3)
    a448:	e0ffff17 	ldw	r3,-4(fp)
    a44c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    a450:	e0bffb17 	ldw	r2,-20(fp)
    a454:	1080058b 	ldhu	r2,22(r2)
    a458:	10800044 	addi	r2,r2,1
    a45c:	1007883a 	mov	r3,r2
    a460:	e0bffb17 	ldw	r2,-20(fp)
    a464:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    a468:	e0bffb17 	ldw	r2,-20(fp)
    a46c:	10c00317 	ldw	r3,12(r2)
    a470:	e0bffb17 	ldw	r2,-20(fp)
    a474:	10800217 	ldw	r2,8(r2)
    a478:	1880041e 	bne	r3,r2,a48c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    a47c:	e0bffb17 	ldw	r2,-20(fp)
    a480:	10c00117 	ldw	r3,4(r2)
    a484:	e0bffb17 	ldw	r2,-20(fp)
    a488:	10c00315 	stw	r3,12(r2)
    a48c:	e0bff817 	ldw	r2,-32(fp)
    a490:	e0bffc15 	stw	r2,-16(fp)
    a494:	e0bffc17 	ldw	r2,-16(fp)
    a498:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a49c:	0005883a 	mov	r2,zero
}
    a4a0:	e037883a 	mov	sp,fp
    a4a4:	dfc00117 	ldw	ra,4(sp)
    a4a8:	df000017 	ldw	fp,0(sp)
    a4ac:	dec00204 	addi	sp,sp,8
    a4b0:	f800283a 	ret

0000a4b4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    a4b4:	defff604 	addi	sp,sp,-40
    a4b8:	dfc00915 	stw	ra,36(sp)
    a4bc:	df000815 	stw	fp,32(sp)
    a4c0:	df000804 	addi	fp,sp,32
    a4c4:	e13ffe15 	stw	r4,-8(fp)
    a4c8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a4cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a4d0:	e0bffe17 	ldw	r2,-8(fp)
    a4d4:	1000021e 	bne	r2,zero,a4e0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    a4d8:	00800104 	movi	r2,4
    a4dc:	00004c06 	br	a610 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    a4e0:	e0bffe17 	ldw	r2,-8(fp)
    a4e4:	10800003 	ldbu	r2,0(r2)
    a4e8:	10803fcc 	andi	r2,r2,255
    a4ec:	108000a0 	cmpeqi	r2,r2,2
    a4f0:	1000021e 	bne	r2,zero,a4fc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    a4f4:	00800044 	movi	r2,1
    a4f8:	00004506 	br	a610 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a4fc:	0005303a 	rdctl	r2,status
    a500:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a504:	e0fffd17 	ldw	r3,-12(fp)
    a508:	00bfff84 	movi	r2,-2
    a50c:	1884703a 	and	r2,r3,r2
    a510:	1001703a 	wrctl	status,r2
  
  return context;
    a514:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a518:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    a51c:	e0bffe17 	ldw	r2,-8(fp)
    a520:	10800283 	ldbu	r2,10(r2)
    a524:	10803fcc 	andi	r2,r2,255
    a528:	10000c26 	beq	r2,zero,a55c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a52c:	000f883a 	mov	r7,zero
    a530:	01800104 	movi	r6,4
    a534:	e17fff17 	ldw	r5,-4(fp)
    a538:	e13ffe17 	ldw	r4,-8(fp)
    a53c:	0005d400 	call	5d40 <OS_EventTaskRdy>
    a540:	e0bff817 	ldw	r2,-32(fp)
    a544:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a548:	e0bff917 	ldw	r2,-28(fp)
    a54c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    a550:	000678c0 	call	678c <OS_Sched>
        return (OS_ERR_NONE);
    a554:	0005883a 	mov	r2,zero
    a558:	00002d06 	br	a610 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    a55c:	e0bffe17 	ldw	r2,-8(fp)
    a560:	10800117 	ldw	r2,4(r2)
    a564:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    a568:	e0bffb17 	ldw	r2,-20(fp)
    a56c:	10c0058b 	ldhu	r3,22(r2)
    a570:	e0bffb17 	ldw	r2,-20(fp)
    a574:	1080050b 	ldhu	r2,20(r2)
    a578:	18ffffcc 	andi	r3,r3,65535
    a57c:	10bfffcc 	andi	r2,r2,65535
    a580:	18800636 	bltu	r3,r2,a59c <OSQPostFront+0xe8>
    a584:	e0bff817 	ldw	r2,-32(fp)
    a588:	e0bffa15 	stw	r2,-24(fp)
    a58c:	e0bffa17 	ldw	r2,-24(fp)
    a590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a594:	00800784 	movi	r2,30
    a598:	00001d06 	br	a610 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    a59c:	e0bffb17 	ldw	r2,-20(fp)
    a5a0:	10c00417 	ldw	r3,16(r2)
    a5a4:	e0bffb17 	ldw	r2,-20(fp)
    a5a8:	10800117 	ldw	r2,4(r2)
    a5ac:	1880041e 	bne	r3,r2,a5c0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    a5b0:	e0bffb17 	ldw	r2,-20(fp)
    a5b4:	10c00217 	ldw	r3,8(r2)
    a5b8:	e0bffb17 	ldw	r2,-20(fp)
    a5bc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    a5c0:	e0bffb17 	ldw	r2,-20(fp)
    a5c4:	10800417 	ldw	r2,16(r2)
    a5c8:	10ffff04 	addi	r3,r2,-4
    a5cc:	e0bffb17 	ldw	r2,-20(fp)
    a5d0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    a5d4:	e0bffb17 	ldw	r2,-20(fp)
    a5d8:	10800417 	ldw	r2,16(r2)
    a5dc:	e0ffff17 	ldw	r3,-4(fp)
    a5e0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    a5e4:	e0bffb17 	ldw	r2,-20(fp)
    a5e8:	1080058b 	ldhu	r2,22(r2)
    a5ec:	10800044 	addi	r2,r2,1
    a5f0:	1007883a 	mov	r3,r2
    a5f4:	e0bffb17 	ldw	r2,-20(fp)
    a5f8:	10c0058d 	sth	r3,22(r2)
    a5fc:	e0bff817 	ldw	r2,-32(fp)
    a600:	e0bffc15 	stw	r2,-16(fp)
    a604:	e0bffc17 	ldw	r2,-16(fp)
    a608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a60c:	0005883a 	mov	r2,zero
}
    a610:	e037883a 	mov	sp,fp
    a614:	dfc00117 	ldw	ra,4(sp)
    a618:	df000017 	ldw	fp,0(sp)
    a61c:	dec00204 	addi	sp,sp,8
    a620:	f800283a 	ret

0000a624 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    a624:	defff504 	addi	sp,sp,-44
    a628:	dfc00a15 	stw	ra,40(sp)
    a62c:	df000915 	stw	fp,36(sp)
    a630:	df000904 	addi	fp,sp,36
    a634:	e13ffd15 	stw	r4,-12(fp)
    a638:	e17ffe15 	stw	r5,-8(fp)
    a63c:	3005883a 	mov	r2,r6
    a640:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a644:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a648:	e0bffd17 	ldw	r2,-12(fp)
    a64c:	1000021e 	bne	r2,zero,a658 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    a650:	00800104 	movi	r2,4
    a654:	00007106 	br	a81c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    a658:	e0bffd17 	ldw	r2,-12(fp)
    a65c:	10800003 	ldbu	r2,0(r2)
    a660:	10803fcc 	andi	r2,r2,255
    a664:	108000a0 	cmpeqi	r2,r2,2
    a668:	1000021e 	bne	r2,zero,a674 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    a66c:	00800044 	movi	r2,1
    a670:	00006a06 	br	a81c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a674:	0005303a 	rdctl	r2,status
    a678:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a67c:	e0fffc17 	ldw	r3,-16(fp)
    a680:	00bfff84 	movi	r2,-2
    a684:	1884703a 	and	r2,r3,r2
    a688:	1001703a 	wrctl	status,r2
  
  return context;
    a68c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a690:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    a694:	e0bffd17 	ldw	r2,-12(fp)
    a698:	10800283 	ldbu	r2,10(r2)
    a69c:	10803fcc 	andi	r2,r2,255
    a6a0:	10001d26 	beq	r2,zero,a718 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    a6a4:	e0bfff03 	ldbu	r2,-4(fp)
    a6a8:	1080004c 	andi	r2,r2,1
    a6ac:	10000b26 	beq	r2,zero,a6dc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    a6b0:	00000506 	br	a6c8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a6b4:	000f883a 	mov	r7,zero
    a6b8:	01800104 	movi	r6,4
    a6bc:	e17ffe17 	ldw	r5,-8(fp)
    a6c0:	e13ffd17 	ldw	r4,-12(fp)
    a6c4:	0005d400 	call	5d40 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    a6c8:	e0bffd17 	ldw	r2,-12(fp)
    a6cc:	10800283 	ldbu	r2,10(r2)
    a6d0:	10803fcc 	andi	r2,r2,255
    a6d4:	103ff71e 	bne	r2,zero,a6b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6b4>
    a6d8:	00000506 	br	a6f0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a6dc:	000f883a 	mov	r7,zero
    a6e0:	01800104 	movi	r6,4
    a6e4:	e17ffe17 	ldw	r5,-8(fp)
    a6e8:	e13ffd17 	ldw	r4,-12(fp)
    a6ec:	0005d400 	call	5d40 <OS_EventTaskRdy>
    a6f0:	e0bff717 	ldw	r2,-36(fp)
    a6f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6f8:	e0bff817 	ldw	r2,-32(fp)
    a6fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    a700:	e0bfff03 	ldbu	r2,-4(fp)
    a704:	1080010c 	andi	r2,r2,4
    a708:	1000011e 	bne	r2,zero,a710 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    a70c:	000678c0 	call	678c <OS_Sched>
        }
        return (OS_ERR_NONE);
    a710:	0005883a 	mov	r2,zero
    a714:	00004106 	br	a81c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    a718:	e0bffd17 	ldw	r2,-12(fp)
    a71c:	10800117 	ldw	r2,4(r2)
    a720:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    a724:	e0bffa17 	ldw	r2,-24(fp)
    a728:	10c0058b 	ldhu	r3,22(r2)
    a72c:	e0bffa17 	ldw	r2,-24(fp)
    a730:	1080050b 	ldhu	r2,20(r2)
    a734:	18ffffcc 	andi	r3,r3,65535
    a738:	10bfffcc 	andi	r2,r2,65535
    a73c:	18800636 	bltu	r3,r2,a758 <OSQPostOpt+0x134>
    a740:	e0bff717 	ldw	r2,-36(fp)
    a744:	e0bff915 	stw	r2,-28(fp)
    a748:	e0bff917 	ldw	r2,-28(fp)
    a74c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a750:	00800784 	movi	r2,30
    a754:	00003106 	br	a81c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    a758:	e0bfff03 	ldbu	r2,-4(fp)
    a75c:	1080008c 	andi	r2,r2,2
    a760:	10001326 	beq	r2,zero,a7b0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    a764:	e0bffa17 	ldw	r2,-24(fp)
    a768:	10c00417 	ldw	r3,16(r2)
    a76c:	e0bffa17 	ldw	r2,-24(fp)
    a770:	10800117 	ldw	r2,4(r2)
    a774:	1880041e 	bne	r3,r2,a788 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    a778:	e0bffa17 	ldw	r2,-24(fp)
    a77c:	10c00217 	ldw	r3,8(r2)
    a780:	e0bffa17 	ldw	r2,-24(fp)
    a784:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    a788:	e0bffa17 	ldw	r2,-24(fp)
    a78c:	10800417 	ldw	r2,16(r2)
    a790:	10ffff04 	addi	r3,r2,-4
    a794:	e0bffa17 	ldw	r2,-24(fp)
    a798:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    a79c:	e0bffa17 	ldw	r2,-24(fp)
    a7a0:	10800417 	ldw	r2,16(r2)
    a7a4:	e0fffe17 	ldw	r3,-8(fp)
    a7a8:	10c00015 	stw	r3,0(r2)
    a7ac:	00001006 	br	a7f0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    a7b0:	e0bffa17 	ldw	r2,-24(fp)
    a7b4:	10800317 	ldw	r2,12(r2)
    a7b8:	11000104 	addi	r4,r2,4
    a7bc:	e0fffa17 	ldw	r3,-24(fp)
    a7c0:	19000315 	stw	r4,12(r3)
    a7c4:	e0fffe17 	ldw	r3,-8(fp)
    a7c8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    a7cc:	e0bffa17 	ldw	r2,-24(fp)
    a7d0:	10c00317 	ldw	r3,12(r2)
    a7d4:	e0bffa17 	ldw	r2,-24(fp)
    a7d8:	10800217 	ldw	r2,8(r2)
    a7dc:	1880041e 	bne	r3,r2,a7f0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    a7e0:	e0bffa17 	ldw	r2,-24(fp)
    a7e4:	10c00117 	ldw	r3,4(r2)
    a7e8:	e0bffa17 	ldw	r2,-24(fp)
    a7ec:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    a7f0:	e0bffa17 	ldw	r2,-24(fp)
    a7f4:	1080058b 	ldhu	r2,22(r2)
    a7f8:	10800044 	addi	r2,r2,1
    a7fc:	1007883a 	mov	r3,r2
    a800:	e0bffa17 	ldw	r2,-24(fp)
    a804:	10c0058d 	sth	r3,22(r2)
    a808:	e0bff717 	ldw	r2,-36(fp)
    a80c:	e0bffb15 	stw	r2,-20(fp)
    a810:	e0bffb17 	ldw	r2,-20(fp)
    a814:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a818:	0005883a 	mov	r2,zero
}
    a81c:	e037883a 	mov	sp,fp
    a820:	dfc00117 	ldw	ra,4(sp)
    a824:	df000017 	ldw	fp,0(sp)
    a828:	dec00204 	addi	sp,sp,8
    a82c:	f800283a 	ret

0000a830 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    a830:	defff604 	addi	sp,sp,-40
    a834:	df000915 	stw	fp,36(sp)
    a838:	df000904 	addi	fp,sp,36
    a83c:	e13ffe15 	stw	r4,-8(fp)
    a840:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    a844:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    a848:	e0bffe17 	ldw	r2,-8(fp)
    a84c:	1000021e 	bne	r2,zero,a858 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    a850:	00800104 	movi	r2,4
    a854:	00004906 	br	a97c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    a858:	e0bfff17 	ldw	r2,-4(fp)
    a85c:	1000021e 	bne	r2,zero,a868 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    a860:	00800244 	movi	r2,9
    a864:	00004506 	br	a97c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    a868:	e0bffe17 	ldw	r2,-8(fp)
    a86c:	10800003 	ldbu	r2,0(r2)
    a870:	10803fcc 	andi	r2,r2,255
    a874:	108000a0 	cmpeqi	r2,r2,2
    a878:	1000021e 	bne	r2,zero,a884 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    a87c:	00800044 	movi	r2,1
    a880:	00003e06 	br	a97c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a884:	0005303a 	rdctl	r2,status
    a888:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a88c:	e0fffd17 	ldw	r3,-12(fp)
    a890:	00bfff84 	movi	r2,-2
    a894:	1884703a 	and	r2,r3,r2
    a898:	1001703a 	wrctl	status,r2
  
  return context;
    a89c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a8a0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    a8a4:	e0bffe17 	ldw	r2,-8(fp)
    a8a8:	10c00283 	ldbu	r3,10(r2)
    a8ac:	e0bfff17 	ldw	r2,-4(fp)
    a8b0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    a8b4:	e0bffe17 	ldw	r2,-8(fp)
    a8b8:	108002c4 	addi	r2,r2,11
    a8bc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    a8c0:	e0bfff17 	ldw	r2,-4(fp)
    a8c4:	10800204 	addi	r2,r2,8
    a8c8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a8cc:	e03ff705 	stb	zero,-36(fp)
    a8d0:	00000b06 	br	a900 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    a8d4:	e0bff917 	ldw	r2,-28(fp)
    a8d8:	10c00044 	addi	r3,r2,1
    a8dc:	e0fff915 	stw	r3,-28(fp)
    a8e0:	e0fff817 	ldw	r3,-32(fp)
    a8e4:	19000044 	addi	r4,r3,1
    a8e8:	e13ff815 	stw	r4,-32(fp)
    a8ec:	18c00003 	ldbu	r3,0(r3)
    a8f0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a8f4:	e0bff703 	ldbu	r2,-36(fp)
    a8f8:	10800044 	addi	r2,r2,1
    a8fc:	e0bff705 	stb	r2,-36(fp)
    a900:	e0bff703 	ldbu	r2,-36(fp)
    a904:	108000f0 	cmpltui	r2,r2,3
    a908:	103ff21e 	bne	r2,zero,a8d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8d4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    a90c:	e0bffe17 	ldw	r2,-8(fp)
    a910:	10800117 	ldw	r2,4(r2)
    a914:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    a918:	e0bffc17 	ldw	r2,-16(fp)
    a91c:	1080058b 	ldhu	r2,22(r2)
    a920:	10bfffcc 	andi	r2,r2,65535
    a924:	10000626 	beq	r2,zero,a940 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    a928:	e0bffc17 	ldw	r2,-16(fp)
    a92c:	10800417 	ldw	r2,16(r2)
    a930:	10c00017 	ldw	r3,0(r2)
    a934:	e0bfff17 	ldw	r2,-4(fp)
    a938:	10c00015 	stw	r3,0(r2)
    a93c:	00000206 	br	a948 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    a940:	e0bfff17 	ldw	r2,-4(fp)
    a944:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    a948:	e0bffc17 	ldw	r2,-16(fp)
    a94c:	10c0058b 	ldhu	r3,22(r2)
    a950:	e0bfff17 	ldw	r2,-4(fp)
    a954:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    a958:	e0bffc17 	ldw	r2,-16(fp)
    a95c:	10c0050b 	ldhu	r3,20(r2)
    a960:	e0bfff17 	ldw	r2,-4(fp)
    a964:	10c0018d 	sth	r3,6(r2)
    a968:	e0bffa17 	ldw	r2,-24(fp)
    a96c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a970:	e0bffb17 	ldw	r2,-20(fp)
    a974:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a978:	0005883a 	mov	r2,zero
}
    a97c:	e037883a 	mov	sp,fp
    a980:	df000017 	ldw	fp,0(sp)
    a984:	dec00104 	addi	sp,sp,4
    a988:	f800283a 	ret

0000a98c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    a98c:	defffb04 	addi	sp,sp,-20
    a990:	dfc00415 	stw	ra,16(sp)
    a994:	df000315 	stw	fp,12(sp)
    a998:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    a99c:	01407804 	movi	r5,480
    a9a0:	010000b4 	movhi	r4,2
    a9a4:	21323604 	addi	r4,r4,-14120
    a9a8:	00066d00 	call	66d0 <OS_MemClr>
    pq1 = &OSQTbl[0];
    a9ac:	008000b4 	movhi	r2,2
    a9b0:	10b23604 	addi	r2,r2,-14120
    a9b4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    a9b8:	008000b4 	movhi	r2,2
    a9bc:	10b23c04 	addi	r2,r2,-14096
    a9c0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    a9c4:	e03ffd0d 	sth	zero,-12(fp)
    a9c8:	00000c06 	br	a9fc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    a9cc:	e0bffe17 	ldw	r2,-8(fp)
    a9d0:	e0ffff17 	ldw	r3,-4(fp)
    a9d4:	10c00015 	stw	r3,0(r2)
        pq1++;
    a9d8:	e0bffe17 	ldw	r2,-8(fp)
    a9dc:	10800604 	addi	r2,r2,24
    a9e0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    a9e4:	e0bfff17 	ldw	r2,-4(fp)
    a9e8:	10800604 	addi	r2,r2,24
    a9ec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    a9f0:	e0bffd0b 	ldhu	r2,-12(fp)
    a9f4:	10800044 	addi	r2,r2,1
    a9f8:	e0bffd0d 	sth	r2,-12(fp)
    a9fc:	e0bffd0b 	ldhu	r2,-12(fp)
    aa00:	108004f0 	cmpltui	r2,r2,19
    aa04:	103ff11e 	bne	r2,zero,a9cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9cc>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    aa08:	e0bffe17 	ldw	r2,-8(fp)
    aa0c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    aa10:	008000b4 	movhi	r2,2
    aa14:	10b23604 	addi	r2,r2,-14120
    aa18:	d0a7dd15 	stw	r2,-24716(gp)
#endif
}
    aa1c:	0001883a 	nop
    aa20:	e037883a 	mov	sp,fp
    aa24:	dfc00117 	ldw	ra,4(sp)
    aa28:	df000017 	ldw	fp,0(sp)
    aa2c:	dec00204 	addi	sp,sp,8
    aa30:	f800283a 	ret

0000aa34 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    aa34:	defffa04 	addi	sp,sp,-24
    aa38:	df000515 	stw	fp,20(sp)
    aa3c:	df000504 	addi	fp,sp,20
    aa40:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    aa44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    aa48:	e0bfff17 	ldw	r2,-4(fp)
    aa4c:	1000021e 	bne	r2,zero,aa58 <OSSemAccept+0x24>
        return (0);
    aa50:	0005883a 	mov	r2,zero
    aa54:	00001f06 	br	aad4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    aa58:	e0bfff17 	ldw	r2,-4(fp)
    aa5c:	10800003 	ldbu	r2,0(r2)
    aa60:	10803fcc 	andi	r2,r2,255
    aa64:	108000e0 	cmpeqi	r2,r2,3
    aa68:	1000021e 	bne	r2,zero,aa74 <OSSemAccept+0x40>
        return (0);
    aa6c:	0005883a 	mov	r2,zero
    aa70:	00001806 	br	aad4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aa74:	0005303a 	rdctl	r2,status
    aa78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aa7c:	e0fffe17 	ldw	r3,-8(fp)
    aa80:	00bfff84 	movi	r2,-2
    aa84:	1884703a 	and	r2,r3,r2
    aa88:	1001703a 	wrctl	status,r2
  
  return context;
    aa8c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    aa90:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    aa94:	e0bfff17 	ldw	r2,-4(fp)
    aa98:	1080020b 	ldhu	r2,8(r2)
    aa9c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    aaa0:	e0bffd0b 	ldhu	r2,-12(fp)
    aaa4:	10000626 	beq	r2,zero,aac0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    aaa8:	e0bfff17 	ldw	r2,-4(fp)
    aaac:	1080020b 	ldhu	r2,8(r2)
    aab0:	10bfffc4 	addi	r2,r2,-1
    aab4:	1007883a 	mov	r3,r2
    aab8:	e0bfff17 	ldw	r2,-4(fp)
    aabc:	10c0020d 	sth	r3,8(r2)
    aac0:	e0bffb17 	ldw	r2,-20(fp)
    aac4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aac8:	e0bffc17 	ldw	r2,-16(fp)
    aacc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    aad0:	e0bffd0b 	ldhu	r2,-12(fp)
}
    aad4:	e037883a 	mov	sp,fp
    aad8:	df000017 	ldw	fp,0(sp)
    aadc:	dec00104 	addi	sp,sp,4
    aae0:	f800283a 	ret

0000aae4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    aae4:	defff904 	addi	sp,sp,-28
    aae8:	dfc00615 	stw	ra,24(sp)
    aaec:	df000515 	stw	fp,20(sp)
    aaf0:	df000504 	addi	fp,sp,20
    aaf4:	2005883a 	mov	r2,r4
    aaf8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    aafc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    ab00:	d0a7e003 	ldbu	r2,-24704(gp)
    ab04:	10803fcc 	andi	r2,r2,255
    ab08:	10000226 	beq	r2,zero,ab14 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    ab0c:	0005883a 	mov	r2,zero
    ab10:	00002506 	br	aba8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ab14:	0005303a 	rdctl	r2,status
    ab18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ab1c:	e0fffe17 	ldw	r3,-8(fp)
    ab20:	00bfff84 	movi	r2,-2
    ab24:	1884703a 	and	r2,r3,r2
    ab28:	1001703a 	wrctl	status,r2
  
  return context;
    ab2c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    ab30:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    ab34:	d0a7df17 	ldw	r2,-24708(gp)
    ab38:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    ab3c:	d0a7df17 	ldw	r2,-24708(gp)
    ab40:	10000326 	beq	r2,zero,ab50 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    ab44:	d0a7df17 	ldw	r2,-24708(gp)
    ab48:	10800117 	ldw	r2,4(r2)
    ab4c:	d0a7df15 	stw	r2,-24708(gp)
    ab50:	e0bffb17 	ldw	r2,-20(fp)
    ab54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ab58:	e0bffc17 	ldw	r2,-16(fp)
    ab5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    ab60:	e0bffd17 	ldw	r2,-12(fp)
    ab64:	10000f26 	beq	r2,zero,aba4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    ab68:	e0bffd17 	ldw	r2,-12(fp)
    ab6c:	00c000c4 	movi	r3,3
    ab70:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    ab74:	e0bffd17 	ldw	r2,-12(fp)
    ab78:	e0ffff0b 	ldhu	r3,-4(fp)
    ab7c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    ab80:	e0bffd17 	ldw	r2,-12(fp)
    ab84:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    ab88:	e0bffd17 	ldw	r2,-12(fp)
    ab8c:	00c00fc4 	movi	r3,63
    ab90:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    ab94:	e0bffd17 	ldw	r2,-12(fp)
    ab98:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    ab9c:	e13ffd17 	ldw	r4,-12(fp)
    aba0:	00062f00 	call	62f0 <OS_EventWaitListInit>
    }
    return (pevent);
    aba4:	e0bffd17 	ldw	r2,-12(fp)
}
    aba8:	e037883a 	mov	sp,fp
    abac:	dfc00117 	ldw	ra,4(sp)
    abb0:	df000017 	ldw	fp,0(sp)
    abb4:	dec00204 	addi	sp,sp,8
    abb8:	f800283a 	ret

0000abbc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    abbc:	defff304 	addi	sp,sp,-52
    abc0:	dfc00c15 	stw	ra,48(sp)
    abc4:	df000b15 	stw	fp,44(sp)
    abc8:	df000b04 	addi	fp,sp,44
    abcc:	e13ffd15 	stw	r4,-12(fp)
    abd0:	2805883a 	mov	r2,r5
    abd4:	e1bfff15 	stw	r6,-4(fp)
    abd8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    abdc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    abe0:	e0bfff17 	ldw	r2,-4(fp)
    abe4:	1000021e 	bne	r2,zero,abf0 <OSSemDel+0x34>
        return (pevent);
    abe8:	e0bffd17 	ldw	r2,-12(fp)
    abec:	00007e06 	br	ade8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    abf0:	e0bffd17 	ldw	r2,-12(fp)
    abf4:	1000051e 	bne	r2,zero,ac0c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    abf8:	e0bfff17 	ldw	r2,-4(fp)
    abfc:	00c00104 	movi	r3,4
    ac00:	10c00005 	stb	r3,0(r2)
        return (pevent);
    ac04:	e0bffd17 	ldw	r2,-12(fp)
    ac08:	00007706 	br	ade8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    ac0c:	e0bffd17 	ldw	r2,-12(fp)
    ac10:	10800003 	ldbu	r2,0(r2)
    ac14:	10803fcc 	andi	r2,r2,255
    ac18:	108000e0 	cmpeqi	r2,r2,3
    ac1c:	1000051e 	bne	r2,zero,ac34 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    ac20:	e0bfff17 	ldw	r2,-4(fp)
    ac24:	00c00044 	movi	r3,1
    ac28:	10c00005 	stb	r3,0(r2)
        return (pevent);
    ac2c:	e0bffd17 	ldw	r2,-12(fp)
    ac30:	00006d06 	br	ade8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    ac34:	d0a7e003 	ldbu	r2,-24704(gp)
    ac38:	10803fcc 	andi	r2,r2,255
    ac3c:	10000526 	beq	r2,zero,ac54 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    ac40:	e0bfff17 	ldw	r2,-4(fp)
    ac44:	00c003c4 	movi	r3,15
    ac48:	10c00005 	stb	r3,0(r2)
        return (pevent);
    ac4c:	e0bffd17 	ldw	r2,-12(fp)
    ac50:	00006506 	br	ade8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ac54:	0005303a 	rdctl	r2,status
    ac58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ac5c:	e0fffc17 	ldw	r3,-16(fp)
    ac60:	00bfff84 	movi	r2,-2
    ac64:	1884703a 	and	r2,r3,r2
    ac68:	1001703a 	wrctl	status,r2
  
  return context;
    ac6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    ac70:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    ac74:	e0bffd17 	ldw	r2,-12(fp)
    ac78:	10800283 	ldbu	r2,10(r2)
    ac7c:	10803fcc 	andi	r2,r2,255
    ac80:	10000326 	beq	r2,zero,ac90 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    ac84:	00800044 	movi	r2,1
    ac88:	e0bff505 	stb	r2,-44(fp)
    ac8c:	00000106 	br	ac94 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    ac90:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    ac94:	e0bffe03 	ldbu	r2,-8(fp)
    ac98:	10000326 	beq	r2,zero,aca8 <OSSemDel+0xec>
    ac9c:	10800060 	cmpeqi	r2,r2,1
    aca0:	1000281e 	bne	r2,zero,ad44 <OSSemDel+0x188>
    aca4:	00004506 	br	adbc <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    aca8:	e0bff503 	ldbu	r2,-44(fp)
    acac:	1000161e 	bne	r2,zero,ad08 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    acb0:	e0bffd17 	ldw	r2,-12(fp)
    acb4:	00c00fc4 	movi	r3,63
    acb8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    acbc:	e0bffd17 	ldw	r2,-12(fp)
    acc0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    acc4:	e0bffd17 	ldw	r2,-12(fp)
    acc8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    accc:	d0e7df17 	ldw	r3,-24708(gp)
    acd0:	e0bffd17 	ldw	r2,-12(fp)
    acd4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    acd8:	e0bffd17 	ldw	r2,-12(fp)
    acdc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    ace0:	e0bffd17 	ldw	r2,-12(fp)
    ace4:	d0a7df15 	stw	r2,-24708(gp)
    ace8:	e0bff717 	ldw	r2,-36(fp)
    acec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    acf0:	e0bff817 	ldw	r2,-32(fp)
    acf4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    acf8:	e0bfff17 	ldw	r2,-4(fp)
    acfc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    ad00:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    ad04:	00003706 	br	ade4 <OSSemDel+0x228>
    ad08:	e0bff717 	ldw	r2,-36(fp)
    ad0c:	e0bff915 	stw	r2,-28(fp)
    ad10:	e0bff917 	ldw	r2,-28(fp)
    ad14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    ad18:	e0bfff17 	ldw	r2,-4(fp)
    ad1c:	00c01244 	movi	r3,73
    ad20:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    ad24:	e0bffd17 	ldw	r2,-12(fp)
    ad28:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    ad2c:	00002d06 	br	ade4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    ad30:	000f883a 	mov	r7,zero
    ad34:	01800044 	movi	r6,1
    ad38:	000b883a 	mov	r5,zero
    ad3c:	e13ffd17 	ldw	r4,-12(fp)
    ad40:	0005d400 	call	5d40 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    ad44:	e0bffd17 	ldw	r2,-12(fp)
    ad48:	10800283 	ldbu	r2,10(r2)
    ad4c:	10803fcc 	andi	r2,r2,255
    ad50:	103ff71e 	bne	r2,zero,ad30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad30>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    ad54:	e0bffd17 	ldw	r2,-12(fp)
    ad58:	00c00fc4 	movi	r3,63
    ad5c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    ad60:	e0bffd17 	ldw	r2,-12(fp)
    ad64:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    ad68:	e0bffd17 	ldw	r2,-12(fp)
    ad6c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    ad70:	d0e7df17 	ldw	r3,-24708(gp)
    ad74:	e0bffd17 	ldw	r2,-12(fp)
    ad78:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    ad7c:	e0bffd17 	ldw	r2,-12(fp)
    ad80:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    ad84:	e0bffd17 	ldw	r2,-12(fp)
    ad88:	d0a7df15 	stw	r2,-24708(gp)
    ad8c:	e0bff717 	ldw	r2,-36(fp)
    ad90:	e0bffa15 	stw	r2,-24(fp)
    ad94:	e0bffa17 	ldw	r2,-24(fp)
    ad98:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    ad9c:	e0bff503 	ldbu	r2,-44(fp)
    ada0:	10800058 	cmpnei	r2,r2,1
    ada4:	1000011e 	bne	r2,zero,adac <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    ada8:	000678c0 	call	678c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    adac:	e0bfff17 	ldw	r2,-4(fp)
    adb0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    adb4:	e03ff615 	stw	zero,-40(fp)
             break;
    adb8:	00000a06 	br	ade4 <OSSemDel+0x228>
    adbc:	e0bff717 	ldw	r2,-36(fp)
    adc0:	e0bffb15 	stw	r2,-20(fp)
    adc4:	e0bffb17 	ldw	r2,-20(fp)
    adc8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    adcc:	e0bfff17 	ldw	r2,-4(fp)
    add0:	00c001c4 	movi	r3,7
    add4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    add8:	e0bffd17 	ldw	r2,-12(fp)
    addc:	e0bff615 	stw	r2,-40(fp)
             break;
    ade0:	0001883a 	nop
    }
    return (pevent_return);
    ade4:	e0bff617 	ldw	r2,-40(fp)
}
    ade8:	e037883a 	mov	sp,fp
    adec:	dfc00117 	ldw	ra,4(sp)
    adf0:	df000017 	ldw	fp,0(sp)
    adf4:	dec00204 	addi	sp,sp,8
    adf8:	f800283a 	ret

0000adfc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    adfc:	defff504 	addi	sp,sp,-44
    ae00:	dfc00a15 	stw	ra,40(sp)
    ae04:	df000915 	stw	fp,36(sp)
    ae08:	df000904 	addi	fp,sp,36
    ae0c:	e13ffd15 	stw	r4,-12(fp)
    ae10:	2805883a 	mov	r2,r5
    ae14:	e1bfff15 	stw	r6,-4(fp)
    ae18:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ae1c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    ae20:	e0bfff17 	ldw	r2,-4(fp)
    ae24:	10007226 	beq	r2,zero,aff0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    ae28:	e0bffd17 	ldw	r2,-12(fp)
    ae2c:	1000041e 	bne	r2,zero,ae40 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    ae30:	e0bfff17 	ldw	r2,-4(fp)
    ae34:	00c00104 	movi	r3,4
    ae38:	10c00005 	stb	r3,0(r2)
        return;
    ae3c:	00006d06 	br	aff4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    ae40:	e0bffd17 	ldw	r2,-12(fp)
    ae44:	10800003 	ldbu	r2,0(r2)
    ae48:	10803fcc 	andi	r2,r2,255
    ae4c:	108000e0 	cmpeqi	r2,r2,3
    ae50:	1000041e 	bne	r2,zero,ae64 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    ae54:	e0bfff17 	ldw	r2,-4(fp)
    ae58:	00c00044 	movi	r3,1
    ae5c:	10c00005 	stb	r3,0(r2)
        return;
    ae60:	00006406 	br	aff4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    ae64:	d0a7e003 	ldbu	r2,-24704(gp)
    ae68:	10803fcc 	andi	r2,r2,255
    ae6c:	10000426 	beq	r2,zero,ae80 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    ae70:	e0bfff17 	ldw	r2,-4(fp)
    ae74:	00c00084 	movi	r3,2
    ae78:	10c00005 	stb	r3,0(r2)
        return;
    ae7c:	00005d06 	br	aff4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    ae80:	d0a7d203 	ldbu	r2,-24760(gp)
    ae84:	10803fcc 	andi	r2,r2,255
    ae88:	10000426 	beq	r2,zero,ae9c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    ae8c:	e0bfff17 	ldw	r2,-4(fp)
    ae90:	00c00344 	movi	r3,13
    ae94:	10c00005 	stb	r3,0(r2)
        return;
    ae98:	00005606 	br	aff4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae9c:	0005303a 	rdctl	r2,status
    aea0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aea4:	e0fffc17 	ldw	r3,-16(fp)
    aea8:	00bfff84 	movi	r2,-2
    aeac:	1884703a 	and	r2,r3,r2
    aeb0:	1001703a 	wrctl	status,r2
  
  return context;
    aeb4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    aeb8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    aebc:	e0bffd17 	ldw	r2,-12(fp)
    aec0:	1080020b 	ldhu	r2,8(r2)
    aec4:	10bfffcc 	andi	r2,r2,65535
    aec8:	10000d26 	beq	r2,zero,af00 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    aecc:	e0bffd17 	ldw	r2,-12(fp)
    aed0:	1080020b 	ldhu	r2,8(r2)
    aed4:	10bfffc4 	addi	r2,r2,-1
    aed8:	1007883a 	mov	r3,r2
    aedc:	e0bffd17 	ldw	r2,-12(fp)
    aee0:	10c0020d 	sth	r3,8(r2)
    aee4:	e0bff717 	ldw	r2,-36(fp)
    aee8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aeec:	e0bff817 	ldw	r2,-32(fp)
    aef0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    aef4:	e0bfff17 	ldw	r2,-4(fp)
    aef8:	10000005 	stb	zero,0(r2)
        return;
    aefc:	00003d06 	br	aff4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    af00:	d0a7e117 	ldw	r2,-24700(gp)
    af04:	d0e7e117 	ldw	r3,-24700(gp)
    af08:	18c00c03 	ldbu	r3,48(r3)
    af0c:	18c00054 	ori	r3,r3,1
    af10:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    af14:	d0a7e117 	ldw	r2,-24700(gp)
    af18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    af1c:	d0a7e117 	ldw	r2,-24700(gp)
    af20:	e0fffe0b 	ldhu	r3,-8(fp)
    af24:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    af28:	e13ffd17 	ldw	r4,-12(fp)
    af2c:	0005ed80 	call	5ed8 <OS_EventTaskWait>
    af30:	e0bff717 	ldw	r2,-36(fp)
    af34:	e0bffb15 	stw	r2,-20(fp)
    af38:	e0bffb17 	ldw	r2,-20(fp)
    af3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    af40:	000678c0 	call	678c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af44:	0005303a 	rdctl	r2,status
    af48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af4c:	e0fff917 	ldw	r3,-28(fp)
    af50:	00bfff84 	movi	r2,-2
    af54:	1884703a 	and	r2,r3,r2
    af58:	1001703a 	wrctl	status,r2
  
  return context;
    af5c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    af60:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    af64:	d0a7e117 	ldw	r2,-24700(gp)
    af68:	10800c43 	ldbu	r2,49(r2)
    af6c:	10803fcc 	andi	r2,r2,255
    af70:	10000326 	beq	r2,zero,af80 <OSSemPend+0x184>
    af74:	108000a0 	cmpeqi	r2,r2,2
    af78:	1000041e 	bne	r2,zero,af8c <OSSemPend+0x190>
    af7c:	00000706 	br	af9c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    af80:	e0bfff17 	ldw	r2,-4(fp)
    af84:	10000005 	stb	zero,0(r2)
             break;
    af88:	00000c06 	br	afbc <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    af8c:	e0bfff17 	ldw	r2,-4(fp)
    af90:	00c00384 	movi	r3,14
    af94:	10c00005 	stb	r3,0(r2)
             break;
    af98:	00000806 	br	afbc <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    af9c:	d0a7e117 	ldw	r2,-24700(gp)
    afa0:	e17ffd17 	ldw	r5,-12(fp)
    afa4:	1009883a 	mov	r4,r2
    afa8:	00061380 	call	6138 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    afac:	e0bfff17 	ldw	r2,-4(fp)
    afb0:	00c00284 	movi	r3,10
    afb4:	10c00005 	stb	r3,0(r2)
             break;
    afb8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    afbc:	d0a7e117 	ldw	r2,-24700(gp)
    afc0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    afc4:	d0a7e117 	ldw	r2,-24700(gp)
    afc8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    afcc:	d0a7e117 	ldw	r2,-24700(gp)
    afd0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    afd4:	d0a7e117 	ldw	r2,-24700(gp)
    afd8:	10000815 	stw	zero,32(r2)
    afdc:	e0bff717 	ldw	r2,-36(fp)
    afe0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    afe4:	e0bffa17 	ldw	r2,-24(fp)
    afe8:	1001703a 	wrctl	status,r2
    afec:	00000106 	br	aff4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    aff0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    aff4:	e037883a 	mov	sp,fp
    aff8:	dfc00117 	ldw	ra,4(sp)
    affc:	df000017 	ldw	fp,0(sp)
    b000:	dec00204 	addi	sp,sp,8
    b004:	f800283a 	ret

0000b008 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    b008:	defff604 	addi	sp,sp,-40
    b00c:	dfc00915 	stw	ra,36(sp)
    b010:	df000815 	stw	fp,32(sp)
    b014:	df000804 	addi	fp,sp,32
    b018:	e13ffd15 	stw	r4,-12(fp)
    b01c:	2805883a 	mov	r2,r5
    b020:	e1bfff15 	stw	r6,-4(fp)
    b024:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b028:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    b02c:	e0bfff17 	ldw	r2,-4(fp)
    b030:	1000021e 	bne	r2,zero,b03c <OSSemPendAbort+0x34>
        return (0);
    b034:	0005883a 	mov	r2,zero
    b038:	00004906 	br	b160 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b03c:	e0bffd17 	ldw	r2,-12(fp)
    b040:	1000051e 	bne	r2,zero,b058 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    b044:	e0bfff17 	ldw	r2,-4(fp)
    b048:	00c00104 	movi	r3,4
    b04c:	10c00005 	stb	r3,0(r2)
        return (0);
    b050:	0005883a 	mov	r2,zero
    b054:	00004206 	br	b160 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    b058:	e0bffd17 	ldw	r2,-12(fp)
    b05c:	10800003 	ldbu	r2,0(r2)
    b060:	10803fcc 	andi	r2,r2,255
    b064:	108000e0 	cmpeqi	r2,r2,3
    b068:	1000051e 	bne	r2,zero,b080 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    b06c:	e0bfff17 	ldw	r2,-4(fp)
    b070:	00c00044 	movi	r3,1
    b074:	10c00005 	stb	r3,0(r2)
        return (0);
    b078:	0005883a 	mov	r2,zero
    b07c:	00003806 	br	b160 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b080:	0005303a 	rdctl	r2,status
    b084:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b088:	e0fffc17 	ldw	r3,-16(fp)
    b08c:	00bfff84 	movi	r2,-2
    b090:	1884703a 	and	r2,r3,r2
    b094:	1001703a 	wrctl	status,r2
  
  return context;
    b098:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    b09c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    b0a0:	e0bffd17 	ldw	r2,-12(fp)
    b0a4:	10800283 	ldbu	r2,10(r2)
    b0a8:	10803fcc 	andi	r2,r2,255
    b0ac:	10002526 	beq	r2,zero,b144 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    b0b0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    b0b4:	e0bffe03 	ldbu	r2,-8(fp)
    b0b8:	10800060 	cmpeqi	r2,r2,1
    b0bc:	10000e26 	beq	r2,zero,b0f8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    b0c0:	00000806 	br	b0e4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    b0c4:	01c00084 	movi	r7,2
    b0c8:	01800044 	movi	r6,1
    b0cc:	000b883a 	mov	r5,zero
    b0d0:	e13ffd17 	ldw	r4,-12(fp)
    b0d4:	0005d400 	call	5d40 <OS_EventTaskRdy>
                     nbr_tasks++;
    b0d8:	e0bff803 	ldbu	r2,-32(fp)
    b0dc:	10800044 	addi	r2,r2,1
    b0e0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    b0e4:	e0bffd17 	ldw	r2,-12(fp)
    b0e8:	10800283 	ldbu	r2,10(r2)
    b0ec:	10803fcc 	andi	r2,r2,255
    b0f0:	103ff41e 	bne	r2,zero,b0c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0c4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    b0f4:	00000906 	br	b11c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    b0f8:	01c00084 	movi	r7,2
    b0fc:	01800044 	movi	r6,1
    b100:	000b883a 	mov	r5,zero
    b104:	e13ffd17 	ldw	r4,-12(fp)
    b108:	0005d400 	call	5d40 <OS_EventTaskRdy>
                 nbr_tasks++;
    b10c:	e0bff803 	ldbu	r2,-32(fp)
    b110:	10800044 	addi	r2,r2,1
    b114:	e0bff805 	stb	r2,-32(fp)
                 break;
    b118:	0001883a 	nop
    b11c:	e0bff917 	ldw	r2,-28(fp)
    b120:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b124:	e0bffa17 	ldw	r2,-24(fp)
    b128:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    b12c:	000678c0 	call	678c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    b130:	e0bfff17 	ldw	r2,-4(fp)
    b134:	00c00384 	movi	r3,14
    b138:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    b13c:	e0bff803 	ldbu	r2,-32(fp)
    b140:	00000706 	br	b160 <OSSemPendAbort+0x158>
    b144:	e0bff917 	ldw	r2,-28(fp)
    b148:	e0bffb15 	stw	r2,-20(fp)
    b14c:	e0bffb17 	ldw	r2,-20(fp)
    b150:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b154:	e0bfff17 	ldw	r2,-4(fp)
    b158:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    b15c:	0005883a 	mov	r2,zero
}
    b160:	e037883a 	mov	sp,fp
    b164:	dfc00117 	ldw	ra,4(sp)
    b168:	df000017 	ldw	fp,0(sp)
    b16c:	dec00204 	addi	sp,sp,8
    b170:	f800283a 	ret

0000b174 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    b174:	defff804 	addi	sp,sp,-32
    b178:	dfc00715 	stw	ra,28(sp)
    b17c:	df000615 	stw	fp,24(sp)
    b180:	df000604 	addi	fp,sp,24
    b184:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b188:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b18c:	e0bfff17 	ldw	r2,-4(fp)
    b190:	1000021e 	bne	r2,zero,b19c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    b194:	00800104 	movi	r2,4
    b198:	00003506 	br	b270 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    b19c:	e0bfff17 	ldw	r2,-4(fp)
    b1a0:	10800003 	ldbu	r2,0(r2)
    b1a4:	10803fcc 	andi	r2,r2,255
    b1a8:	108000e0 	cmpeqi	r2,r2,3
    b1ac:	1000021e 	bne	r2,zero,b1b8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    b1b0:	00800044 	movi	r2,1
    b1b4:	00002e06 	br	b270 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b1b8:	0005303a 	rdctl	r2,status
    b1bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b1c0:	e0fffe17 	ldw	r3,-8(fp)
    b1c4:	00bfff84 	movi	r2,-2
    b1c8:	1884703a 	and	r2,r3,r2
    b1cc:	1001703a 	wrctl	status,r2
  
  return context;
    b1d0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    b1d4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    b1d8:	e0bfff17 	ldw	r2,-4(fp)
    b1dc:	10800283 	ldbu	r2,10(r2)
    b1e0:	10803fcc 	andi	r2,r2,255
    b1e4:	10000c26 	beq	r2,zero,b218 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    b1e8:	000f883a 	mov	r7,zero
    b1ec:	01800044 	movi	r6,1
    b1f0:	000b883a 	mov	r5,zero
    b1f4:	e13fff17 	ldw	r4,-4(fp)
    b1f8:	0005d400 	call	5d40 <OS_EventTaskRdy>
    b1fc:	e0bffa17 	ldw	r2,-24(fp)
    b200:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b204:	e0bffb17 	ldw	r2,-20(fp)
    b208:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    b20c:	000678c0 	call	678c <OS_Sched>
        return (OS_ERR_NONE);
    b210:	0005883a 	mov	r2,zero
    b214:	00001606 	br	b270 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    b218:	e0bfff17 	ldw	r2,-4(fp)
    b21c:	1080020b 	ldhu	r2,8(r2)
    b220:	10ffffcc 	andi	r3,r2,65535
    b224:	00bfffd4 	movui	r2,65535
    b228:	18800c26 	beq	r3,r2,b25c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    b22c:	e0bfff17 	ldw	r2,-4(fp)
    b230:	1080020b 	ldhu	r2,8(r2)
    b234:	10800044 	addi	r2,r2,1
    b238:	1007883a 	mov	r3,r2
    b23c:	e0bfff17 	ldw	r2,-4(fp)
    b240:	10c0020d 	sth	r3,8(r2)
    b244:	e0bffa17 	ldw	r2,-24(fp)
    b248:	e0bffc15 	stw	r2,-16(fp)
    b24c:	e0bffc17 	ldw	r2,-16(fp)
    b250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    b254:	0005883a 	mov	r2,zero
    b258:	00000506 	br	b270 <OSSemPost+0xfc>
    b25c:	e0bffa17 	ldw	r2,-24(fp)
    b260:	e0bffd15 	stw	r2,-12(fp)
    b264:	e0bffd17 	ldw	r2,-12(fp)
    b268:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    b26c:	00800c84 	movi	r2,50
}
    b270:	e037883a 	mov	sp,fp
    b274:	dfc00117 	ldw	ra,4(sp)
    b278:	df000017 	ldw	fp,0(sp)
    b27c:	dec00204 	addi	sp,sp,8
    b280:	f800283a 	ret

0000b284 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    b284:	defff704 	addi	sp,sp,-36
    b288:	df000815 	stw	fp,32(sp)
    b28c:	df000804 	addi	fp,sp,32
    b290:	e13ffe15 	stw	r4,-8(fp)
    b294:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    b298:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    b29c:	e0bffe17 	ldw	r2,-8(fp)
    b2a0:	1000021e 	bne	r2,zero,b2ac <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    b2a4:	00800104 	movi	r2,4
    b2a8:	00003606 	br	b384 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    b2ac:	e0bfff17 	ldw	r2,-4(fp)
    b2b0:	1000021e 	bne	r2,zero,b2bc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    b2b4:	00800244 	movi	r2,9
    b2b8:	00003206 	br	b384 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    b2bc:	e0bffe17 	ldw	r2,-8(fp)
    b2c0:	10800003 	ldbu	r2,0(r2)
    b2c4:	10803fcc 	andi	r2,r2,255
    b2c8:	108000e0 	cmpeqi	r2,r2,3
    b2cc:	1000021e 	bne	r2,zero,b2d8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    b2d0:	00800044 	movi	r2,1
    b2d4:	00002b06 	br	b384 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b2d8:	0005303a 	rdctl	r2,status
    b2dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2e0:	e0fffd17 	ldw	r3,-12(fp)
    b2e4:	00bfff84 	movi	r2,-2
    b2e8:	1884703a 	and	r2,r3,r2
    b2ec:	1001703a 	wrctl	status,r2
  
  return context;
    b2f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    b2f4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    b2f8:	e0bffe17 	ldw	r2,-8(fp)
    b2fc:	10c00283 	ldbu	r3,10(r2)
    b300:	e0bfff17 	ldw	r2,-4(fp)
    b304:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    b308:	e0bffe17 	ldw	r2,-8(fp)
    b30c:	108002c4 	addi	r2,r2,11
    b310:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    b314:	e0bfff17 	ldw	r2,-4(fp)
    b318:	10800084 	addi	r2,r2,2
    b31c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    b320:	e03ffa05 	stb	zero,-24(fp)
    b324:	00000b06 	br	b354 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    b328:	e0bff917 	ldw	r2,-28(fp)
    b32c:	10c00044 	addi	r3,r2,1
    b330:	e0fff915 	stw	r3,-28(fp)
    b334:	e0fff817 	ldw	r3,-32(fp)
    b338:	19000044 	addi	r4,r3,1
    b33c:	e13ff815 	stw	r4,-32(fp)
    b340:	18c00003 	ldbu	r3,0(r3)
    b344:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    b348:	e0bffa03 	ldbu	r2,-24(fp)
    b34c:	10800044 	addi	r2,r2,1
    b350:	e0bffa05 	stb	r2,-24(fp)
    b354:	e0bffa03 	ldbu	r2,-24(fp)
    b358:	108000f0 	cmpltui	r2,r2,3
    b35c:	103ff21e 	bne	r2,zero,b328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b328>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    b360:	e0bffe17 	ldw	r2,-8(fp)
    b364:	10c0020b 	ldhu	r3,8(r2)
    b368:	e0bfff17 	ldw	r2,-4(fp)
    b36c:	10c0000d 	sth	r3,0(r2)
    b370:	e0bffb17 	ldw	r2,-20(fp)
    b374:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b378:	e0bffc17 	ldw	r2,-16(fp)
    b37c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b380:	0005883a 	mov	r2,zero
}
    b384:	e037883a 	mov	sp,fp
    b388:	df000017 	ldw	fp,0(sp)
    b38c:	dec00104 	addi	sp,sp,4
    b390:	f800283a 	ret

0000b394 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    b394:	defff904 	addi	sp,sp,-28
    b398:	df000615 	stw	fp,24(sp)
    b39c:	df000604 	addi	fp,sp,24
    b3a0:	e13ffd15 	stw	r4,-12(fp)
    b3a4:	2805883a 	mov	r2,r5
    b3a8:	e1bfff15 	stw	r6,-4(fp)
    b3ac:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b3b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    b3b4:	e0bfff17 	ldw	r2,-4(fp)
    b3b8:	10003126 	beq	r2,zero,b480 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b3bc:	e0bffd17 	ldw	r2,-12(fp)
    b3c0:	1000041e 	bne	r2,zero,b3d4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    b3c4:	e0bfff17 	ldw	r2,-4(fp)
    b3c8:	00c00104 	movi	r3,4
    b3cc:	10c00005 	stb	r3,0(r2)
        return;
    b3d0:	00002c06 	br	b484 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    b3d4:	e0bffd17 	ldw	r2,-12(fp)
    b3d8:	10800003 	ldbu	r2,0(r2)
    b3dc:	10803fcc 	andi	r2,r2,255
    b3e0:	108000e0 	cmpeqi	r2,r2,3
    b3e4:	1000041e 	bne	r2,zero,b3f8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    b3e8:	e0bfff17 	ldw	r2,-4(fp)
    b3ec:	00c00044 	movi	r3,1
    b3f0:	10c00005 	stb	r3,0(r2)
        return;
    b3f4:	00002306 	br	b484 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b3f8:	0005303a 	rdctl	r2,status
    b3fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b400:	e0fffc17 	ldw	r3,-16(fp)
    b404:	00bfff84 	movi	r2,-2
    b408:	1884703a 	and	r2,r3,r2
    b40c:	1001703a 	wrctl	status,r2
  
  return context;
    b410:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    b414:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    b418:	e0bfff17 	ldw	r2,-4(fp)
    b41c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    b420:	e0bffd17 	ldw	r2,-12(fp)
    b424:	1080020b 	ldhu	r2,8(r2)
    b428:	10bfffcc 	andi	r2,r2,65535
    b42c:	10000426 	beq	r2,zero,b440 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    b430:	e0bffd17 	ldw	r2,-12(fp)
    b434:	e0fffe0b 	ldhu	r3,-8(fp)
    b438:	10c0020d 	sth	r3,8(r2)
    b43c:	00000b06 	br	b46c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    b440:	e0bffd17 	ldw	r2,-12(fp)
    b444:	10800283 	ldbu	r2,10(r2)
    b448:	10803fcc 	andi	r2,r2,255
    b44c:	1000041e 	bne	r2,zero,b460 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    b450:	e0bffd17 	ldw	r2,-12(fp)
    b454:	e0fffe0b 	ldhu	r3,-8(fp)
    b458:	10c0020d 	sth	r3,8(r2)
    b45c:	00000306 	br	b46c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    b460:	e0bfff17 	ldw	r2,-4(fp)
    b464:	00c01244 	movi	r3,73
    b468:	10c00005 	stb	r3,0(r2)
    b46c:	e0bffa17 	ldw	r2,-24(fp)
    b470:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b474:	e0bffb17 	ldw	r2,-20(fp)
    b478:	1001703a 	wrctl	status,r2
    b47c:	00000106 	br	b484 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    b480:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    b484:	e037883a 	mov	sp,fp
    b488:	df000017 	ldw	fp,0(sp)
    b48c:	dec00104 	addi	sp,sp,4
    b490:	f800283a 	ret

0000b494 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    b494:	defff104 	addi	sp,sp,-60
    b498:	dfc00e15 	stw	ra,56(sp)
    b49c:	df000d15 	stw	fp,52(sp)
    b4a0:	df000d04 	addi	fp,sp,52
    b4a4:	2007883a 	mov	r3,r4
    b4a8:	2805883a 	mov	r2,r5
    b4ac:	e0fffe05 	stb	r3,-8(fp)
    b4b0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    b4b4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    b4b8:	e0bffe03 	ldbu	r2,-8(fp)
    b4bc:	10800530 	cmpltui	r2,r2,20
    b4c0:	1000051e 	bne	r2,zero,b4d8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    b4c4:	e0bffe03 	ldbu	r2,-8(fp)
    b4c8:	10803fe0 	cmpeqi	r2,r2,255
    b4cc:	1000021e 	bne	r2,zero,b4d8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    b4d0:	00800a84 	movi	r2,42
    b4d4:	00012606 	br	b970 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    b4d8:	e0bfff03 	ldbu	r2,-4(fp)
    b4dc:	10800530 	cmpltui	r2,r2,20
    b4e0:	1000021e 	bne	r2,zero,b4ec <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    b4e4:	00800a84 	movi	r2,42
    b4e8:	00012106 	br	b970 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4ec:	0005303a 	rdctl	r2,status
    b4f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4f4:	e0fffd17 	ldw	r3,-12(fp)
    b4f8:	00bfff84 	movi	r2,-2
    b4fc:	1884703a 	and	r2,r3,r2
    b500:	1001703a 	wrctl	status,r2
  
  return context;
    b504:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b508:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    b50c:	e0ffff03 	ldbu	r3,-4(fp)
    b510:	008000b4 	movhi	r2,2
    b514:	10b8c204 	addi	r2,r2,-7416
    b518:	18c7883a 	add	r3,r3,r3
    b51c:	18c7883a 	add	r3,r3,r3
    b520:	10c5883a 	add	r2,r2,r3
    b524:	10800017 	ldw	r2,0(r2)
    b528:	10000626 	beq	r2,zero,b544 <OSTaskChangePrio+0xb0>
    b52c:	e0bff517 	ldw	r2,-44(fp)
    b530:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b534:	e0bff617 	ldw	r2,-40(fp)
    b538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    b53c:	00800a04 	movi	r2,40
    b540:	00010b06 	br	b970 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    b544:	e0bffe03 	ldbu	r2,-8(fp)
    b548:	10803fd8 	cmpnei	r2,r2,255
    b54c:	1000031e 	bne	r2,zero,b55c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    b550:	d0a7e117 	ldw	r2,-24700(gp)
    b554:	10800c83 	ldbu	r2,50(r2)
    b558:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    b55c:	e0fffe03 	ldbu	r3,-8(fp)
    b560:	008000b4 	movhi	r2,2
    b564:	10b8c204 	addi	r2,r2,-7416
    b568:	18c7883a 	add	r3,r3,r3
    b56c:	18c7883a 	add	r3,r3,r3
    b570:	10c5883a 	add	r2,r2,r3
    b574:	10800017 	ldw	r2,0(r2)
    b578:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    b57c:	e0bff817 	ldw	r2,-32(fp)
    b580:	1000061e 	bne	r2,zero,b59c <OSTaskChangePrio+0x108>
    b584:	e0bff517 	ldw	r2,-44(fp)
    b588:	e0bff715 	stw	r2,-36(fp)
    b58c:	e0bff717 	ldw	r2,-36(fp)
    b590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    b594:	00800a44 	movi	r2,41
    b598:	0000f506 	br	b970 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    b59c:	e0bff817 	ldw	r2,-32(fp)
    b5a0:	10800058 	cmpnei	r2,r2,1
    b5a4:	1000061e 	bne	r2,zero,b5c0 <OSTaskChangePrio+0x12c>
    b5a8:	e0bff517 	ldw	r2,-44(fp)
    b5ac:	e0bff915 	stw	r2,-28(fp)
    b5b0:	e0bff917 	ldw	r2,-28(fp)
    b5b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    b5b8:	008010c4 	movi	r2,67
    b5bc:	0000ec06 	br	b970 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    b5c0:	e0bfff03 	ldbu	r2,-4(fp)
    b5c4:	1004d0fa 	srli	r2,r2,3
    b5c8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    b5cc:	e0bfff03 	ldbu	r2,-4(fp)
    b5d0:	108001cc 	andi	r2,r2,7
    b5d4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    b5d8:	e0bffb03 	ldbu	r2,-20(fp)
    b5dc:	00c00044 	movi	r3,1
    b5e0:	1884983a 	sll	r2,r3,r2
    b5e4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    b5e8:	e0bffb43 	ldbu	r2,-19(fp)
    b5ec:	00c00044 	movi	r3,1
    b5f0:	1884983a 	sll	r2,r3,r2
    b5f4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    b5f8:	e0fffe03 	ldbu	r3,-8(fp)
    b5fc:	008000b4 	movhi	r2,2
    b600:	10b8c204 	addi	r2,r2,-7416
    b604:	18c7883a 	add	r3,r3,r3
    b608:	18c7883a 	add	r3,r3,r3
    b60c:	10c5883a 	add	r2,r2,r3
    b610:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    b614:	e0ffff03 	ldbu	r3,-4(fp)
    b618:	008000b4 	movhi	r2,2
    b61c:	10b8c204 	addi	r2,r2,-7416
    b620:	18c7883a 	add	r3,r3,r3
    b624:	18c7883a 	add	r3,r3,r3
    b628:	10c5883a 	add	r2,r2,r3
    b62c:	e0fff817 	ldw	r3,-32(fp)
    b630:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    b634:	e0bff817 	ldw	r2,-32(fp)
    b638:	10800d03 	ldbu	r2,52(r2)
    b63c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    b640:	e0bff817 	ldw	r2,-32(fp)
    b644:	10800d83 	ldbu	r2,54(r2)
    b648:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    b64c:	e0bff817 	ldw	r2,-32(fp)
    b650:	10800d43 	ldbu	r2,53(r2)
    b654:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    b658:	e0fffc03 	ldbu	r3,-16(fp)
    b65c:	d0a7de44 	addi	r2,gp,-24711
    b660:	1885883a 	add	r2,r3,r2
    b664:	10c00003 	ldbu	r3,0(r2)
    b668:	e0bffc83 	ldbu	r2,-14(fp)
    b66c:	1884703a 	and	r2,r3,r2
    b670:	10803fcc 	andi	r2,r2,255
    b674:	10002826 	beq	r2,zero,b718 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
    b678:	e0fffc03 	ldbu	r3,-16(fp)
    b67c:	e13ffc03 	ldbu	r4,-16(fp)
    b680:	d0a7de44 	addi	r2,gp,-24711
    b684:	2085883a 	add	r2,r4,r2
    b688:	10800003 	ldbu	r2,0(r2)
    b68c:	1009883a 	mov	r4,r2
    b690:	e0bffc83 	ldbu	r2,-14(fp)
    b694:	0084303a 	nor	r2,zero,r2
    b698:	2084703a 	and	r2,r4,r2
    b69c:	1009883a 	mov	r4,r2
    b6a0:	d0a7de44 	addi	r2,gp,-24711
    b6a4:	1885883a 	add	r2,r3,r2
    b6a8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    b6ac:	e0fffc03 	ldbu	r3,-16(fp)
    b6b0:	d0a7de44 	addi	r2,gp,-24711
    b6b4:	1885883a 	add	r2,r3,r2
    b6b8:	10800003 	ldbu	r2,0(r2)
    b6bc:	10803fcc 	andi	r2,r2,255
    b6c0:	1000061e 	bne	r2,zero,b6dc <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
    b6c4:	e0bffc43 	ldbu	r2,-15(fp)
    b6c8:	0084303a 	nor	r2,zero,r2
    b6cc:	1007883a 	mov	r3,r2
    b6d0:	d0a7de03 	ldbu	r2,-24712(gp)
    b6d4:	1884703a 	and	r2,r3,r2
    b6d8:	d0a7de05 	stb	r2,-24712(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    b6dc:	d0e7de03 	ldbu	r3,-24712(gp)
    b6e0:	e0bffb83 	ldbu	r2,-18(fp)
    b6e4:	1884b03a 	or	r2,r3,r2
    b6e8:	d0a7de05 	stb	r2,-24712(gp)
         OSRdyTbl[y_new] |= bitx_new;
    b6ec:	e0fffb03 	ldbu	r3,-20(fp)
    b6f0:	e13ffb03 	ldbu	r4,-20(fp)
    b6f4:	d0a7de44 	addi	r2,gp,-24711
    b6f8:	2085883a 	add	r2,r4,r2
    b6fc:	11000003 	ldbu	r4,0(r2)
    b700:	e0bffbc3 	ldbu	r2,-17(fp)
    b704:	2084b03a 	or	r2,r4,r2
    b708:	1009883a 	mov	r4,r2
    b70c:	d0a7de44 	addi	r2,gp,-24711
    b710:	1885883a 	add	r2,r3,r2
    b714:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    b718:	e0bff817 	ldw	r2,-32(fp)
    b71c:	10800717 	ldw	r2,28(r2)
    b720:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    b724:	e0bff317 	ldw	r2,-52(fp)
    b728:	10003326 	beq	r2,zero,b7f8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    b72c:	e0bffc03 	ldbu	r2,-16(fp)
    b730:	e0fffc03 	ldbu	r3,-16(fp)
    b734:	e13ff317 	ldw	r4,-52(fp)
    b738:	20c7883a 	add	r3,r4,r3
    b73c:	18c002c4 	addi	r3,r3,11
    b740:	18c00003 	ldbu	r3,0(r3)
    b744:	1809883a 	mov	r4,r3
    b748:	e0fffc83 	ldbu	r3,-14(fp)
    b74c:	00c6303a 	nor	r3,zero,r3
    b750:	20c6703a 	and	r3,r4,r3
    b754:	1809883a 	mov	r4,r3
    b758:	e0fff317 	ldw	r3,-52(fp)
    b75c:	1885883a 	add	r2,r3,r2
    b760:	108002c4 	addi	r2,r2,11
    b764:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    b768:	e0bffc03 	ldbu	r2,-16(fp)
    b76c:	e0fff317 	ldw	r3,-52(fp)
    b770:	1885883a 	add	r2,r3,r2
    b774:	108002c4 	addi	r2,r2,11
    b778:	10800003 	ldbu	r2,0(r2)
    b77c:	10803fcc 	andi	r2,r2,255
    b780:	1000091e 	bne	r2,zero,b7a8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
    b784:	e0bff317 	ldw	r2,-52(fp)
    b788:	10800283 	ldbu	r2,10(r2)
    b78c:	1007883a 	mov	r3,r2
    b790:	e0bffc43 	ldbu	r2,-15(fp)
    b794:	0084303a 	nor	r2,zero,r2
    b798:	1884703a 	and	r2,r3,r2
    b79c:	1007883a 	mov	r3,r2
    b7a0:	e0bff317 	ldw	r2,-52(fp)
    b7a4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    b7a8:	e0bff317 	ldw	r2,-52(fp)
    b7ac:	10c00283 	ldbu	r3,10(r2)
    b7b0:	e0bffb83 	ldbu	r2,-18(fp)
    b7b4:	1884b03a 	or	r2,r3,r2
    b7b8:	1007883a 	mov	r3,r2
    b7bc:	e0bff317 	ldw	r2,-52(fp)
    b7c0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    b7c4:	e0bffb03 	ldbu	r2,-20(fp)
    b7c8:	e0fffb03 	ldbu	r3,-20(fp)
    b7cc:	e13ff317 	ldw	r4,-52(fp)
    b7d0:	20c7883a 	add	r3,r4,r3
    b7d4:	18c002c4 	addi	r3,r3,11
    b7d8:	19000003 	ldbu	r4,0(r3)
    b7dc:	e0fffbc3 	ldbu	r3,-17(fp)
    b7e0:	20c6b03a 	or	r3,r4,r3
    b7e4:	1809883a 	mov	r4,r3
    b7e8:	e0fff317 	ldw	r3,-52(fp)
    b7ec:	1885883a 	add	r2,r3,r2
    b7f0:	108002c4 	addi	r2,r2,11
    b7f4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    b7f8:	e0bff817 	ldw	r2,-32(fp)
    b7fc:	10800817 	ldw	r2,32(r2)
    b800:	10004226 	beq	r2,zero,b90c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    b804:	e0bff817 	ldw	r2,-32(fp)
    b808:	10800817 	ldw	r2,32(r2)
    b80c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    b810:	e0bff417 	ldw	r2,-48(fp)
    b814:	10800017 	ldw	r2,0(r2)
    b818:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    b81c:	00003906 	br	b904 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    b820:	e0bffc03 	ldbu	r2,-16(fp)
    b824:	e0fffc03 	ldbu	r3,-16(fp)
    b828:	e13ff317 	ldw	r4,-52(fp)
    b82c:	20c7883a 	add	r3,r4,r3
    b830:	18c002c4 	addi	r3,r3,11
    b834:	18c00003 	ldbu	r3,0(r3)
    b838:	1809883a 	mov	r4,r3
    b83c:	e0fffc83 	ldbu	r3,-14(fp)
    b840:	00c6303a 	nor	r3,zero,r3
    b844:	20c6703a 	and	r3,r4,r3
    b848:	1809883a 	mov	r4,r3
    b84c:	e0fff317 	ldw	r3,-52(fp)
    b850:	1885883a 	add	r2,r3,r2
    b854:	108002c4 	addi	r2,r2,11
    b858:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    b85c:	e0bffc03 	ldbu	r2,-16(fp)
    b860:	e0fff317 	ldw	r3,-52(fp)
    b864:	1885883a 	add	r2,r3,r2
    b868:	108002c4 	addi	r2,r2,11
    b86c:	10800003 	ldbu	r2,0(r2)
    b870:	10803fcc 	andi	r2,r2,255
    b874:	1000091e 	bne	r2,zero,b89c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
    b878:	e0bff317 	ldw	r2,-52(fp)
    b87c:	10800283 	ldbu	r2,10(r2)
    b880:	1007883a 	mov	r3,r2
    b884:	e0bffc43 	ldbu	r2,-15(fp)
    b888:	0084303a 	nor	r2,zero,r2
    b88c:	1884703a 	and	r2,r3,r2
    b890:	1007883a 	mov	r3,r2
    b894:	e0bff317 	ldw	r2,-52(fp)
    b898:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    b89c:	e0bff317 	ldw	r2,-52(fp)
    b8a0:	10c00283 	ldbu	r3,10(r2)
    b8a4:	e0bffb83 	ldbu	r2,-18(fp)
    b8a8:	1884b03a 	or	r2,r3,r2
    b8ac:	1007883a 	mov	r3,r2
    b8b0:	e0bff317 	ldw	r2,-52(fp)
    b8b4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    b8b8:	e0bffb03 	ldbu	r2,-20(fp)
    b8bc:	e0fffb03 	ldbu	r3,-20(fp)
    b8c0:	e13ff317 	ldw	r4,-52(fp)
    b8c4:	20c7883a 	add	r3,r4,r3
    b8c8:	18c002c4 	addi	r3,r3,11
    b8cc:	19000003 	ldbu	r4,0(r3)
    b8d0:	e0fffbc3 	ldbu	r3,-17(fp)
    b8d4:	20c6b03a 	or	r3,r4,r3
    b8d8:	1809883a 	mov	r4,r3
    b8dc:	e0fff317 	ldw	r3,-52(fp)
    b8e0:	1885883a 	add	r2,r3,r2
    b8e4:	108002c4 	addi	r2,r2,11
    b8e8:	11000005 	stb	r4,0(r2)
            pevents++;
    b8ec:	e0bff417 	ldw	r2,-48(fp)
    b8f0:	10800104 	addi	r2,r2,4
    b8f4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    b8f8:	e0bff417 	ldw	r2,-48(fp)
    b8fc:	10800017 	ldw	r2,0(r2)
    b900:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    b904:	e0bff317 	ldw	r2,-52(fp)
    b908:	103fc51e 	bne	r2,zero,b820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b820>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    b90c:	e0bff817 	ldw	r2,-32(fp)
    b910:	e0ffff03 	ldbu	r3,-4(fp)
    b914:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    b918:	e0bff817 	ldw	r2,-32(fp)
    b91c:	e0fffb03 	ldbu	r3,-20(fp)
    b920:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    b924:	e0bff817 	ldw	r2,-32(fp)
    b928:	e0fffb43 	ldbu	r3,-19(fp)
    b92c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    b930:	e0bff817 	ldw	r2,-32(fp)
    b934:	e0fffb83 	ldbu	r3,-18(fp)
    b938:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    b93c:	e0bff817 	ldw	r2,-32(fp)
    b940:	e0fffbc3 	ldbu	r3,-17(fp)
    b944:	10c00d45 	stb	r3,53(r2)
    b948:	e0bff517 	ldw	r2,-44(fp)
    b94c:	e0bffa15 	stw	r2,-24(fp)
    b950:	e0bffa17 	ldw	r2,-24(fp)
    b954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    b958:	d0a7d243 	ldbu	r2,-24759(gp)
    b95c:	10803fcc 	andi	r2,r2,255
    b960:	10800058 	cmpnei	r2,r2,1
    b964:	1000011e 	bne	r2,zero,b96c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
    b968:	000678c0 	call	678c <OS_Sched>
    }
    return (OS_ERR_NONE);
    b96c:	0005883a 	mov	r2,zero
}
    b970:	e037883a 	mov	sp,fp
    b974:	dfc00117 	ldw	ra,4(sp)
    b978:	df000017 	ldw	fp,0(sp)
    b97c:	dec00204 	addi	sp,sp,8
    b980:	f800283a 	ret

0000b984 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    b984:	deffee04 	addi	sp,sp,-72
    b988:	dfc01115 	stw	ra,68(sp)
    b98c:	df001015 	stw	fp,64(sp)
    b990:	df001004 	addi	fp,sp,64
    b994:	e13ffc15 	stw	r4,-16(fp)
    b998:	e17ffd15 	stw	r5,-12(fp)
    b99c:	e1bffe15 	stw	r6,-8(fp)
    b9a0:	3805883a 	mov	r2,r7
    b9a4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    b9a8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    b9ac:	e0bfff03 	ldbu	r2,-4(fp)
    b9b0:	10800570 	cmpltui	r2,r2,21
    b9b4:	1000021e 	bne	r2,zero,b9c0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    b9b8:	00800a84 	movi	r2,42
    b9bc:	00005706 	br	bb1c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9c0:	0005303a 	rdctl	r2,status
    b9c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9c8:	e0fffb17 	ldw	r3,-20(fp)
    b9cc:	00bfff84 	movi	r2,-2
    b9d0:	1884703a 	and	r2,r3,r2
    b9d4:	1001703a 	wrctl	status,r2
  
  return context;
    b9d8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b9dc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    b9e0:	d0a7e003 	ldbu	r2,-24704(gp)
    b9e4:	10803fcc 	andi	r2,r2,255
    b9e8:	10000626 	beq	r2,zero,ba04 <OSTaskCreate+0x80>
    b9ec:	e0bff317 	ldw	r2,-52(fp)
    b9f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9f4:	e0bff417 	ldw	r2,-48(fp)
    b9f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    b9fc:	00800f04 	movi	r2,60
    ba00:	00004606 	br	bb1c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    ba04:	e0ffff03 	ldbu	r3,-4(fp)
    ba08:	008000b4 	movhi	r2,2
    ba0c:	10b8c204 	addi	r2,r2,-7416
    ba10:	18c7883a 	add	r3,r3,r3
    ba14:	18c7883a 	add	r3,r3,r3
    ba18:	10c5883a 	add	r2,r2,r3
    ba1c:	10800017 	ldw	r2,0(r2)
    ba20:	1000391e 	bne	r2,zero,bb08 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    ba24:	e0ffff03 	ldbu	r3,-4(fp)
    ba28:	008000b4 	movhi	r2,2
    ba2c:	10b8c204 	addi	r2,r2,-7416
    ba30:	18c7883a 	add	r3,r3,r3
    ba34:	18c7883a 	add	r3,r3,r3
    ba38:	10c5883a 	add	r2,r2,r3
    ba3c:	00c00044 	movi	r3,1
    ba40:	10c00015 	stw	r3,0(r2)
    ba44:	e0bff317 	ldw	r2,-52(fp)
    ba48:	e0bff515 	stw	r2,-44(fp)
    ba4c:	e0bff517 	ldw	r2,-44(fp)
    ba50:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    ba54:	000f883a 	mov	r7,zero
    ba58:	e1bffe17 	ldw	r6,-8(fp)
    ba5c:	e17ffd17 	ldw	r5,-12(fp)
    ba60:	e13ffc17 	ldw	r4,-16(fp)
    ba64:	00106fc0 	call	106fc <OSTaskStkInit>
    ba68:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    ba6c:	e0bfff03 	ldbu	r2,-4(fp)
    ba70:	d8000215 	stw	zero,8(sp)
    ba74:	d8000115 	stw	zero,4(sp)
    ba78:	d8000015 	stw	zero,0(sp)
    ba7c:	000f883a 	mov	r7,zero
    ba80:	000d883a 	mov	r6,zero
    ba84:	e17ff717 	ldw	r5,-36(fp)
    ba88:	1009883a 	mov	r4,r2
    ba8c:	0006b9c0 	call	6b9c <OS_TCBInit>
    ba90:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    ba94:	e0bff803 	ldbu	r2,-32(fp)
    ba98:	1000061e 	bne	r2,zero,bab4 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    ba9c:	d0a7d243 	ldbu	r2,-24759(gp)
    baa0:	10803fcc 	andi	r2,r2,255
    baa4:	10800058 	cmpnei	r2,r2,1
    baa8:	1000151e 	bne	r2,zero,bb00 <OSTaskCreate+0x17c>
                OS_Sched();
    baac:	000678c0 	call	678c <OS_Sched>
    bab0:	00001306 	br	bb00 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bab4:	0005303a 	rdctl	r2,status
    bab8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    babc:	e0fffa17 	ldw	r3,-24(fp)
    bac0:	00bfff84 	movi	r2,-2
    bac4:	1884703a 	and	r2,r3,r2
    bac8:	1001703a 	wrctl	status,r2
  
  return context;
    bacc:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    bad0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    bad4:	e0ffff03 	ldbu	r3,-4(fp)
    bad8:	008000b4 	movhi	r2,2
    badc:	10b8c204 	addi	r2,r2,-7416
    bae0:	18c7883a 	add	r3,r3,r3
    bae4:	18c7883a 	add	r3,r3,r3
    bae8:	10c5883a 	add	r2,r2,r3
    baec:	10000015 	stw	zero,0(r2)
    baf0:	e0bff317 	ldw	r2,-52(fp)
    baf4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    baf8:	e0bff617 	ldw	r2,-40(fp)
    bafc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    bb00:	e0bff803 	ldbu	r2,-32(fp)
    bb04:	00000506 	br	bb1c <OSTaskCreate+0x198>
    bb08:	e0bff317 	ldw	r2,-52(fp)
    bb0c:	e0bff915 	stw	r2,-28(fp)
    bb10:	e0bff917 	ldw	r2,-28(fp)
    bb14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    bb18:	00800a04 	movi	r2,40
}
    bb1c:	e037883a 	mov	sp,fp
    bb20:	dfc00117 	ldw	ra,4(sp)
    bb24:	df000017 	ldw	fp,0(sp)
    bb28:	dec00204 	addi	sp,sp,8
    bb2c:	f800283a 	ret

0000bb30 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    bb30:	deffec04 	addi	sp,sp,-80
    bb34:	dfc01315 	stw	ra,76(sp)
    bb38:	df001215 	stw	fp,72(sp)
    bb3c:	df001204 	addi	fp,sp,72
    bb40:	e13ffa15 	stw	r4,-24(fp)
    bb44:	e17ffb15 	stw	r5,-20(fp)
    bb48:	e1bffc15 	stw	r6,-16(fp)
    bb4c:	3809883a 	mov	r4,r7
    bb50:	e0c00217 	ldw	r3,8(fp)
    bb54:	e0800617 	ldw	r2,24(fp)
    bb58:	e13ffd05 	stb	r4,-12(fp)
    bb5c:	e0fffe0d 	sth	r3,-8(fp)
    bb60:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    bb64:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    bb68:	e0bffd03 	ldbu	r2,-12(fp)
    bb6c:	10800570 	cmpltui	r2,r2,21
    bb70:	1000021e 	bne	r2,zero,bb7c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    bb74:	00800a84 	movi	r2,42
    bb78:	00006106 	br	bd00 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb7c:	0005303a 	rdctl	r2,status
    bb80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb84:	e0fff917 	ldw	r3,-28(fp)
    bb88:	00bfff84 	movi	r2,-2
    bb8c:	1884703a 	and	r2,r3,r2
    bb90:	1001703a 	wrctl	status,r2
  
  return context;
    bb94:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    bb98:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    bb9c:	d0a7e003 	ldbu	r2,-24704(gp)
    bba0:	10803fcc 	andi	r2,r2,255
    bba4:	10000626 	beq	r2,zero,bbc0 <OSTaskCreateExt+0x90>
    bba8:	e0bff117 	ldw	r2,-60(fp)
    bbac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbb0:	e0bff217 	ldw	r2,-56(fp)
    bbb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    bbb8:	00800f04 	movi	r2,60
    bbbc:	00005006 	br	bd00 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    bbc0:	e0fffd03 	ldbu	r3,-12(fp)
    bbc4:	008000b4 	movhi	r2,2
    bbc8:	10b8c204 	addi	r2,r2,-7416
    bbcc:	18c7883a 	add	r3,r3,r3
    bbd0:	18c7883a 	add	r3,r3,r3
    bbd4:	10c5883a 	add	r2,r2,r3
    bbd8:	10800017 	ldw	r2,0(r2)
    bbdc:	1000431e 	bne	r2,zero,bcec <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    bbe0:	e0fffd03 	ldbu	r3,-12(fp)
    bbe4:	008000b4 	movhi	r2,2
    bbe8:	10b8c204 	addi	r2,r2,-7416
    bbec:	18c7883a 	add	r3,r3,r3
    bbf0:	18c7883a 	add	r3,r3,r3
    bbf4:	10c5883a 	add	r2,r2,r3
    bbf8:	00c00044 	movi	r3,1
    bbfc:	10c00015 	stw	r3,0(r2)
    bc00:	e0bff117 	ldw	r2,-60(fp)
    bc04:	e0bff315 	stw	r2,-52(fp)
    bc08:	e0bff317 	ldw	r2,-52(fp)
    bc0c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    bc10:	e0bfff0b 	ldhu	r2,-4(fp)
    bc14:	100d883a 	mov	r6,r2
    bc18:	e1400417 	ldw	r5,16(fp)
    bc1c:	e1000317 	ldw	r4,12(fp)
    bc20:	000cb900 	call	cb90 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    bc24:	e0bfff0b 	ldhu	r2,-4(fp)
    bc28:	100f883a 	mov	r7,r2
    bc2c:	e1bffc17 	ldw	r6,-16(fp)
    bc30:	e17ffb17 	ldw	r5,-20(fp)
    bc34:	e13ffa17 	ldw	r4,-24(fp)
    bc38:	00106fc0 	call	106fc <OSTaskStkInit>
    bc3c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    bc40:	e0fffd03 	ldbu	r3,-12(fp)
    bc44:	e13ffe0b 	ldhu	r4,-8(fp)
    bc48:	e0bfff0b 	ldhu	r2,-4(fp)
    bc4c:	d8800215 	stw	r2,8(sp)
    bc50:	e0800517 	ldw	r2,20(fp)
    bc54:	d8800115 	stw	r2,4(sp)
    bc58:	e0800417 	ldw	r2,16(fp)
    bc5c:	d8800015 	stw	r2,0(sp)
    bc60:	200f883a 	mov	r7,r4
    bc64:	e1800317 	ldw	r6,12(fp)
    bc68:	e17ff517 	ldw	r5,-44(fp)
    bc6c:	1809883a 	mov	r4,r3
    bc70:	0006b9c0 	call	6b9c <OS_TCBInit>
    bc74:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    bc78:	e0bff603 	ldbu	r2,-40(fp)
    bc7c:	1000061e 	bne	r2,zero,bc98 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    bc80:	d0a7d243 	ldbu	r2,-24759(gp)
    bc84:	10803fcc 	andi	r2,r2,255
    bc88:	10800058 	cmpnei	r2,r2,1
    bc8c:	1000151e 	bne	r2,zero,bce4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
    bc90:	000678c0 	call	678c <OS_Sched>
    bc94:	00001306 	br	bce4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc98:	0005303a 	rdctl	r2,status
    bc9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bca0:	e0fff817 	ldw	r3,-32(fp)
    bca4:	00bfff84 	movi	r2,-2
    bca8:	1884703a 	and	r2,r3,r2
    bcac:	1001703a 	wrctl	status,r2
  
  return context;
    bcb0:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    bcb4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    bcb8:	e0fffd03 	ldbu	r3,-12(fp)
    bcbc:	008000b4 	movhi	r2,2
    bcc0:	10b8c204 	addi	r2,r2,-7416
    bcc4:	18c7883a 	add	r3,r3,r3
    bcc8:	18c7883a 	add	r3,r3,r3
    bccc:	10c5883a 	add	r2,r2,r3
    bcd0:	10000015 	stw	zero,0(r2)
    bcd4:	e0bff117 	ldw	r2,-60(fp)
    bcd8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bcdc:	e0bff417 	ldw	r2,-48(fp)
    bce0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    bce4:	e0bff603 	ldbu	r2,-40(fp)
    bce8:	00000506 	br	bd00 <OSTaskCreateExt+0x1d0>
    bcec:	e0bff117 	ldw	r2,-60(fp)
    bcf0:	e0bff715 	stw	r2,-36(fp)
    bcf4:	e0bff717 	ldw	r2,-36(fp)
    bcf8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    bcfc:	00800a04 	movi	r2,40
}
    bd00:	e037883a 	mov	sp,fp
    bd04:	dfc00117 	ldw	ra,4(sp)
    bd08:	df000017 	ldw	fp,0(sp)
    bd0c:	dec00204 	addi	sp,sp,8
    bd10:	f800283a 	ret

0000bd14 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    bd14:	defff404 	addi	sp,sp,-48
    bd18:	dfc00b15 	stw	ra,44(sp)
    bd1c:	df000a15 	stw	fp,40(sp)
    bd20:	df000a04 	addi	fp,sp,40
    bd24:	2005883a 	mov	r2,r4
    bd28:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    bd2c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    bd30:	d0a7e003 	ldbu	r2,-24704(gp)
    bd34:	10803fcc 	andi	r2,r2,255
    bd38:	10000226 	beq	r2,zero,bd44 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    bd3c:	00801004 	movi	r2,64
    bd40:	0000c006 	br	c044 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    bd44:	e0bfff03 	ldbu	r2,-4(fp)
    bd48:	10800518 	cmpnei	r2,r2,20
    bd4c:	1000021e 	bne	r2,zero,bd58 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    bd50:	00800f84 	movi	r2,62
    bd54:	0000bb06 	br	c044 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    bd58:	e0bfff03 	ldbu	r2,-4(fp)
    bd5c:	10800530 	cmpltui	r2,r2,20
    bd60:	1000051e 	bne	r2,zero,bd78 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    bd64:	e0bfff03 	ldbu	r2,-4(fp)
    bd68:	10803fe0 	cmpeqi	r2,r2,255
    bd6c:	1000021e 	bne	r2,zero,bd78 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    bd70:	00800a84 	movi	r2,42
    bd74:	0000b306 	br	c044 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd78:	0005303a 	rdctl	r2,status
    bd7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd80:	e0fffe17 	ldw	r3,-8(fp)
    bd84:	00bfff84 	movi	r2,-2
    bd88:	1884703a 	and	r2,r3,r2
    bd8c:	1001703a 	wrctl	status,r2
  
  return context;
    bd90:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    bd94:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    bd98:	e0bfff03 	ldbu	r2,-4(fp)
    bd9c:	10803fd8 	cmpnei	r2,r2,255
    bda0:	1000031e 	bne	r2,zero,bdb0 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    bda4:	d0a7e117 	ldw	r2,-24700(gp)
    bda8:	10800c83 	ldbu	r2,50(r2)
    bdac:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bdb0:	e0ffff03 	ldbu	r3,-4(fp)
    bdb4:	008000b4 	movhi	r2,2
    bdb8:	10b8c204 	addi	r2,r2,-7416
    bdbc:	18c7883a 	add	r3,r3,r3
    bdc0:	18c7883a 	add	r3,r3,r3
    bdc4:	10c5883a 	add	r2,r2,r3
    bdc8:	10800017 	ldw	r2,0(r2)
    bdcc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    bdd0:	e0bff817 	ldw	r2,-32(fp)
    bdd4:	1000061e 	bne	r2,zero,bdf0 <OSTaskDel+0xdc>
    bdd8:	e0bff617 	ldw	r2,-40(fp)
    bddc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bde0:	e0bff717 	ldw	r2,-36(fp)
    bde4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bde8:	008010c4 	movi	r2,67
    bdec:	00009506 	br	c044 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    bdf0:	e0bff817 	ldw	r2,-32(fp)
    bdf4:	10800058 	cmpnei	r2,r2,1
    bdf8:	1000061e 	bne	r2,zero,be14 <OSTaskDel+0x100>
    bdfc:	e0bff617 	ldw	r2,-40(fp)
    be00:	e0bff915 	stw	r2,-28(fp)
    be04:	e0bff917 	ldw	r2,-28(fp)
    be08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    be0c:	00800f44 	movi	r2,61
    be10:	00008c06 	br	c044 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    be14:	e0bff817 	ldw	r2,-32(fp)
    be18:	10800d03 	ldbu	r2,52(r2)
    be1c:	10c03fcc 	andi	r3,r2,255
    be20:	e0bff817 	ldw	r2,-32(fp)
    be24:	10800d03 	ldbu	r2,52(r2)
    be28:	11003fcc 	andi	r4,r2,255
    be2c:	d0a7de44 	addi	r2,gp,-24711
    be30:	2085883a 	add	r2,r4,r2
    be34:	10800003 	ldbu	r2,0(r2)
    be38:	1009883a 	mov	r4,r2
    be3c:	e0bff817 	ldw	r2,-32(fp)
    be40:	10800d43 	ldbu	r2,53(r2)
    be44:	0084303a 	nor	r2,zero,r2
    be48:	2084703a 	and	r2,r4,r2
    be4c:	1009883a 	mov	r4,r2
    be50:	d0a7de44 	addi	r2,gp,-24711
    be54:	1885883a 	add	r2,r3,r2
    be58:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    be5c:	e0bff817 	ldw	r2,-32(fp)
    be60:	10800d03 	ldbu	r2,52(r2)
    be64:	10c03fcc 	andi	r3,r2,255
    be68:	d0a7de44 	addi	r2,gp,-24711
    be6c:	1885883a 	add	r2,r3,r2
    be70:	10800003 	ldbu	r2,0(r2)
    be74:	10803fcc 	andi	r2,r2,255
    be78:	1000071e 	bne	r2,zero,be98 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    be7c:	e0bff817 	ldw	r2,-32(fp)
    be80:	10800d83 	ldbu	r2,54(r2)
    be84:	0084303a 	nor	r2,zero,r2
    be88:	1007883a 	mov	r3,r2
    be8c:	d0a7de03 	ldbu	r2,-24712(gp)
    be90:	1884703a 	and	r2,r3,r2
    be94:	d0a7de05 	stb	r2,-24712(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    be98:	e0bff817 	ldw	r2,-32(fp)
    be9c:	10800717 	ldw	r2,28(r2)
    bea0:	10000526 	beq	r2,zero,beb8 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    bea4:	e0bff817 	ldw	r2,-32(fp)
    bea8:	10800717 	ldw	r2,28(r2)
    beac:	100b883a 	mov	r5,r2
    beb0:	e13ff817 	ldw	r4,-32(fp)
    beb4:	00061380 	call	6138 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    beb8:	e0bff817 	ldw	r2,-32(fp)
    bebc:	10800817 	ldw	r2,32(r2)
    bec0:	10000526 	beq	r2,zero,bed8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    bec4:	e0bff817 	ldw	r2,-32(fp)
    bec8:	10800817 	ldw	r2,32(r2)
    becc:	100b883a 	mov	r5,r2
    bed0:	e13ff817 	ldw	r4,-32(fp)
    bed4:	00061f00 	call	61f0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    bed8:	e0bff817 	ldw	r2,-32(fp)
    bedc:	10800a17 	ldw	r2,40(r2)
    bee0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    bee4:	e0bffb17 	ldw	r2,-20(fp)
    bee8:	10000226 	beq	r2,zero,bef4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    beec:	e13ffb17 	ldw	r4,-20(fp)
    bef0:	00086700 	call	8670 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    bef4:	e0bff817 	ldw	r2,-32(fp)
    bef8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    befc:	e0bff817 	ldw	r2,-32(fp)
    bf00:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    bf04:	e0bff817 	ldw	r2,-32(fp)
    bf08:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    bf0c:	d0a7d203 	ldbu	r2,-24760(gp)
    bf10:	10803fcc 	andi	r2,r2,255
    bf14:	10803fe0 	cmpeqi	r2,r2,255
    bf18:	1000031e 	bne	r2,zero,bf28 <OSTaskDel+0x214>
        OSLockNesting++;
    bf1c:	d0a7d203 	ldbu	r2,-24760(gp)
    bf20:	10800044 	addi	r2,r2,1
    bf24:	d0a7d205 	stb	r2,-24760(gp)
    bf28:	e0bff617 	ldw	r2,-40(fp)
    bf2c:	e0bffd15 	stw	r2,-12(fp)
    bf30:	e0bffd17 	ldw	r2,-12(fp)
    bf34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    bf38:	0005d200 	call	5d20 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf3c:	0005303a 	rdctl	r2,status
    bf40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf44:	e0fffa17 	ldw	r3,-24(fp)
    bf48:	00bfff84 	movi	r2,-2
    bf4c:	1884703a 	and	r2,r3,r2
    bf50:	1001703a 	wrctl	status,r2
  
  return context;
    bf54:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    bf58:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    bf5c:	d0a7d203 	ldbu	r2,-24760(gp)
    bf60:	10803fcc 	andi	r2,r2,255
    bf64:	10000326 	beq	r2,zero,bf74 <OSTaskDel+0x260>
        OSLockNesting--;
    bf68:	d0a7d203 	ldbu	r2,-24760(gp)
    bf6c:	10bfffc4 	addi	r2,r2,-1
    bf70:	d0a7d205 	stb	r2,-24760(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    bf74:	e13ff817 	ldw	r4,-32(fp)
    bf78:	001087c0 	call	1087c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    bf7c:	d0a7da43 	ldbu	r2,-24727(gp)
    bf80:	10bfffc4 	addi	r2,r2,-1
    bf84:	d0a7da45 	stb	r2,-24727(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    bf88:	e0ffff03 	ldbu	r3,-4(fp)
    bf8c:	008000b4 	movhi	r2,2
    bf90:	10b8c204 	addi	r2,r2,-7416
    bf94:	18c7883a 	add	r3,r3,r3
    bf98:	18c7883a 	add	r3,r3,r3
    bf9c:	10c5883a 	add	r2,r2,r3
    bfa0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    bfa4:	e0bff817 	ldw	r2,-32(fp)
    bfa8:	10800617 	ldw	r2,24(r2)
    bfac:	1000071e 	bne	r2,zero,bfcc <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    bfb0:	e0bff817 	ldw	r2,-32(fp)
    bfb4:	10800517 	ldw	r2,20(r2)
    bfb8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    bfbc:	e0bff817 	ldw	r2,-32(fp)
    bfc0:	10800517 	ldw	r2,20(r2)
    bfc4:	d0a7d515 	stw	r2,-24748(gp)
    bfc8:	00000a06 	br	bff4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    bfcc:	e0bff817 	ldw	r2,-32(fp)
    bfd0:	10800617 	ldw	r2,24(r2)
    bfd4:	e0fff817 	ldw	r3,-32(fp)
    bfd8:	18c00517 	ldw	r3,20(r3)
    bfdc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    bfe0:	e0bff817 	ldw	r2,-32(fp)
    bfe4:	10800517 	ldw	r2,20(r2)
    bfe8:	e0fff817 	ldw	r3,-32(fp)
    bfec:	18c00617 	ldw	r3,24(r3)
    bff0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    bff4:	d0e7d917 	ldw	r3,-24732(gp)
    bff8:	e0bff817 	ldw	r2,-32(fp)
    bffc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    c000:	e0bff817 	ldw	r2,-32(fp)
    c004:	d0a7d915 	stw	r2,-24732(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    c008:	e0bff817 	ldw	r2,-32(fp)
    c00c:	00c00fc4 	movi	r3,63
    c010:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    c014:	e0bff817 	ldw	r2,-32(fp)
    c018:	10001345 	stb	zero,77(r2)
    c01c:	e0bff617 	ldw	r2,-40(fp)
    c020:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c024:	e0bffc17 	ldw	r2,-16(fp)
    c028:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    c02c:	d0a7d243 	ldbu	r2,-24759(gp)
    c030:	10803fcc 	andi	r2,r2,255
    c034:	10800058 	cmpnei	r2,r2,1
    c038:	1000011e 	bne	r2,zero,c040 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    c03c:	000678c0 	call	678c <OS_Sched>
    }
    return (OS_ERR_NONE);
    c040:	0005883a 	mov	r2,zero
}
    c044:	e037883a 	mov	sp,fp
    c048:	dfc00117 	ldw	ra,4(sp)
    c04c:	df000017 	ldw	fp,0(sp)
    c050:	dec00204 	addi	sp,sp,8
    c054:	f800283a 	ret

0000c058 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    c058:	defff504 	addi	sp,sp,-44
    c05c:	df000a15 	stw	fp,40(sp)
    c060:	df000a04 	addi	fp,sp,40
    c064:	2005883a 	mov	r2,r4
    c068:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c06c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    c070:	e0bfff03 	ldbu	r2,-4(fp)
    c074:	10800518 	cmpnei	r2,r2,20
    c078:	1000021e 	bne	r2,zero,c084 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    c07c:	00800f84 	movi	r2,62
    c080:	00004506 	br	c198 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    c084:	e0bfff03 	ldbu	r2,-4(fp)
    c088:	10800530 	cmpltui	r2,r2,20
    c08c:	1000051e 	bne	r2,zero,c0a4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    c090:	e0bfff03 	ldbu	r2,-4(fp)
    c094:	10803fe0 	cmpeqi	r2,r2,255
    c098:	1000021e 	bne	r2,zero,c0a4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    c09c:	00800a84 	movi	r2,42
    c0a0:	00003d06 	br	c198 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    c0a4:	e0bfff03 	ldbu	r2,-4(fp)
    c0a8:	10803fd8 	cmpnei	r2,r2,255
    c0ac:	1000111e 	bne	r2,zero,c0f4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0b0:	0005303a 	rdctl	r2,status
    c0b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0b8:	e0fff917 	ldw	r3,-28(fp)
    c0bc:	00bfff84 	movi	r2,-2
    c0c0:	1884703a 	and	r2,r3,r2
    c0c4:	1001703a 	wrctl	status,r2
  
  return context;
    c0c8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    c0cc:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    c0d0:	d0a7e117 	ldw	r2,-24700(gp)
    c0d4:	10800dc3 	ldbu	r2,55(r2)
    c0d8:	e0bff805 	stb	r2,-32(fp)
    c0dc:	e0bff617 	ldw	r2,-40(fp)
    c0e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c0e4:	e0bffe17 	ldw	r2,-8(fp)
    c0e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    c0ec:	e0bff803 	ldbu	r2,-32(fp)
    c0f0:	00002906 	br	c198 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0f4:	0005303a 	rdctl	r2,status
    c0f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0fc:	e0fff717 	ldw	r3,-36(fp)
    c100:	00bfff84 	movi	r2,-2
    c104:	1884703a 	and	r2,r3,r2
    c108:	1001703a 	wrctl	status,r2
  
  return context;
    c10c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    c110:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    c114:	e0ffff03 	ldbu	r3,-4(fp)
    c118:	008000b4 	movhi	r2,2
    c11c:	10b8c204 	addi	r2,r2,-7416
    c120:	18c7883a 	add	r3,r3,r3
    c124:	18c7883a 	add	r3,r3,r3
    c128:	10c5883a 	add	r2,r2,r3
    c12c:	10800017 	ldw	r2,0(r2)
    c130:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    c134:	e0bffb17 	ldw	r2,-20(fp)
    c138:	1000061e 	bne	r2,zero,c154 <OSTaskDelReq+0xfc>
    c13c:	e0bff617 	ldw	r2,-40(fp)
    c140:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c144:	e0bffa17 	ldw	r2,-24(fp)
    c148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    c14c:	008010c4 	movi	r2,67
    c150:	00001106 	br	c198 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    c154:	e0bffb17 	ldw	r2,-20(fp)
    c158:	10800058 	cmpnei	r2,r2,1
    c15c:	1000061e 	bne	r2,zero,c178 <OSTaskDelReq+0x120>
    c160:	e0bff617 	ldw	r2,-40(fp)
    c164:	e0bffc15 	stw	r2,-16(fp)
    c168:	e0bffc17 	ldw	r2,-16(fp)
    c16c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    c170:	00800f44 	movi	r2,61
    c174:	00000806 	br	c198 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    c178:	e0bffb17 	ldw	r2,-20(fp)
    c17c:	00c00fc4 	movi	r3,63
    c180:	10c00dc5 	stb	r3,55(r2)
    c184:	e0bff617 	ldw	r2,-40(fp)
    c188:	e0bffd15 	stw	r2,-12(fp)
    c18c:	e0bffd17 	ldw	r2,-12(fp)
    c190:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    c194:	0005883a 	mov	r2,zero
}
    c198:	e037883a 	mov	sp,fp
    c19c:	df000017 	ldw	fp,0(sp)
    c1a0:	dec00104 	addi	sp,sp,4
    c1a4:	f800283a 	ret

0000c1a8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    c1a8:	defff404 	addi	sp,sp,-48
    c1ac:	dfc00b15 	stw	ra,44(sp)
    c1b0:	df000a15 	stw	fp,40(sp)
    c1b4:	df000a04 	addi	fp,sp,40
    c1b8:	2005883a 	mov	r2,r4
    c1bc:	e17ffe15 	stw	r5,-8(fp)
    c1c0:	e1bfff15 	stw	r6,-4(fp)
    c1c4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    c1c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    c1cc:	e0bfff17 	ldw	r2,-4(fp)
    c1d0:	1000021e 	bne	r2,zero,c1dc <OSTaskNameGet+0x34>
        return (0);
    c1d4:	0005883a 	mov	r2,zero
    c1d8:	00005406 	br	c32c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    c1dc:	e0bffd03 	ldbu	r2,-12(fp)
    c1e0:	10800570 	cmpltui	r2,r2,21
    c1e4:	1000081e 	bne	r2,zero,c208 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    c1e8:	e0bffd03 	ldbu	r2,-12(fp)
    c1ec:	10803fe0 	cmpeqi	r2,r2,255
    c1f0:	1000051e 	bne	r2,zero,c208 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    c1f4:	e0bfff17 	ldw	r2,-4(fp)
    c1f8:	00c00a84 	movi	r3,42
    c1fc:	10c00005 	stb	r3,0(r2)
            return (0);
    c200:	0005883a 	mov	r2,zero
    c204:	00004906 	br	c32c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    c208:	e0bffe17 	ldw	r2,-8(fp)
    c20c:	1000051e 	bne	r2,zero,c224 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    c210:	e0bfff17 	ldw	r2,-4(fp)
    c214:	00c00304 	movi	r3,12
    c218:	10c00005 	stb	r3,0(r2)
        return (0);
    c21c:	0005883a 	mov	r2,zero
    c220:	00004206 	br	c32c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    c224:	d0a7e003 	ldbu	r2,-24704(gp)
    c228:	10803fcc 	andi	r2,r2,255
    c22c:	10000526 	beq	r2,zero,c244 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    c230:	e0bfff17 	ldw	r2,-4(fp)
    c234:	00c00444 	movi	r3,17
    c238:	10c00005 	stb	r3,0(r2)
        return (0);
    c23c:	0005883a 	mov	r2,zero
    c240:	00003a06 	br	c32c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c244:	0005303a 	rdctl	r2,status
    c248:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c24c:	e0fffc17 	ldw	r3,-16(fp)
    c250:	00bfff84 	movi	r2,-2
    c254:	1884703a 	and	r2,r3,r2
    c258:	1001703a 	wrctl	status,r2
  
  return context;
    c25c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    c260:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    c264:	e0bffd03 	ldbu	r2,-12(fp)
    c268:	10803fd8 	cmpnei	r2,r2,255
    c26c:	1000031e 	bne	r2,zero,c27c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    c270:	d0a7e117 	ldw	r2,-24700(gp)
    c274:	10800c83 	ldbu	r2,50(r2)
    c278:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c27c:	e0fffd03 	ldbu	r3,-12(fp)
    c280:	008000b4 	movhi	r2,2
    c284:	10b8c204 	addi	r2,r2,-7416
    c288:	18c7883a 	add	r3,r3,r3
    c28c:	18c7883a 	add	r3,r3,r3
    c290:	10c5883a 	add	r2,r2,r3
    c294:	10800017 	ldw	r2,0(r2)
    c298:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    c29c:	e0bff817 	ldw	r2,-32(fp)
    c2a0:	1000091e 	bne	r2,zero,c2c8 <OSTaskNameGet+0x120>
    c2a4:	e0bff617 	ldw	r2,-40(fp)
    c2a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2ac:	e0bff717 	ldw	r2,-36(fp)
    c2b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c2b4:	e0bfff17 	ldw	r2,-4(fp)
    c2b8:	00c010c4 	movi	r3,67
    c2bc:	10c00005 	stb	r3,0(r2)
        return (0);
    c2c0:	0005883a 	mov	r2,zero
    c2c4:	00001906 	br	c32c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    c2c8:	e0bff817 	ldw	r2,-32(fp)
    c2cc:	10800058 	cmpnei	r2,r2,1
    c2d0:	1000091e 	bne	r2,zero,c2f8 <OSTaskNameGet+0x150>
    c2d4:	e0bff617 	ldw	r2,-40(fp)
    c2d8:	e0bff915 	stw	r2,-28(fp)
    c2dc:	e0bff917 	ldw	r2,-28(fp)
    c2e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c2e4:	e0bfff17 	ldw	r2,-4(fp)
    c2e8:	00c010c4 	movi	r3,67
    c2ec:	10c00005 	stb	r3,0(r2)
        return (0);
    c2f0:	0005883a 	mov	r2,zero
    c2f4:	00000d06 	br	c32c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    c2f8:	e0bff817 	ldw	r2,-32(fp)
    c2fc:	10801304 	addi	r2,r2,76
    c300:	100b883a 	mov	r5,r2
    c304:	e13ffe17 	ldw	r4,-8(fp)
    c308:	00068d00 	call	68d0 <OS_StrCopy>
    c30c:	e0bffb05 	stb	r2,-20(fp)
    c310:	e0bff617 	ldw	r2,-40(fp)
    c314:	e0bffa15 	stw	r2,-24(fp)
    c318:	e0bffa17 	ldw	r2,-24(fp)
    c31c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    c320:	e0bfff17 	ldw	r2,-4(fp)
    c324:	10000005 	stb	zero,0(r2)
    return (len);
    c328:	e0bffb03 	ldbu	r2,-20(fp)
}
    c32c:	e037883a 	mov	sp,fp
    c330:	dfc00117 	ldw	ra,4(sp)
    c334:	df000017 	ldw	fp,0(sp)
    c338:	dec00204 	addi	sp,sp,8
    c33c:	f800283a 	ret

0000c340 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    c340:	defff304 	addi	sp,sp,-52
    c344:	dfc00c15 	stw	ra,48(sp)
    c348:	df000b15 	stw	fp,44(sp)
    c34c:	df000b04 	addi	fp,sp,44
    c350:	2005883a 	mov	r2,r4
    c354:	e17ffe15 	stw	r5,-8(fp)
    c358:	e1bfff15 	stw	r6,-4(fp)
    c35c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    c360:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    c364:	e0bfff17 	ldw	r2,-4(fp)
    c368:	10005c26 	beq	r2,zero,c4dc <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    c36c:	e0bffd03 	ldbu	r2,-12(fp)
    c370:	10800570 	cmpltui	r2,r2,21
    c374:	1000071e 	bne	r2,zero,c394 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    c378:	e0bffd03 	ldbu	r2,-12(fp)
    c37c:	10803fe0 	cmpeqi	r2,r2,255
    c380:	1000041e 	bne	r2,zero,c394 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    c384:	e0bfff17 	ldw	r2,-4(fp)
    c388:	00c00a84 	movi	r3,42
    c38c:	10c00005 	stb	r3,0(r2)
            return;
    c390:	00005306 	br	c4e0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    c394:	e0bffe17 	ldw	r2,-8(fp)
    c398:	1000041e 	bne	r2,zero,c3ac <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    c39c:	e0bfff17 	ldw	r2,-4(fp)
    c3a0:	00c00304 	movi	r3,12
    c3a4:	10c00005 	stb	r3,0(r2)
        return;
    c3a8:	00004d06 	br	c4e0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    c3ac:	d0a7e003 	ldbu	r2,-24704(gp)
    c3b0:	10803fcc 	andi	r2,r2,255
    c3b4:	10000426 	beq	r2,zero,c3c8 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    c3b8:	e0bfff17 	ldw	r2,-4(fp)
    c3bc:	00c00484 	movi	r3,18
    c3c0:	10c00005 	stb	r3,0(r2)
        return;
    c3c4:	00004606 	br	c4e0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c3c8:	0005303a 	rdctl	r2,status
    c3cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c3d0:	e0fffc17 	ldw	r3,-16(fp)
    c3d4:	00bfff84 	movi	r2,-2
    c3d8:	1884703a 	and	r2,r3,r2
    c3dc:	1001703a 	wrctl	status,r2
  
  return context;
    c3e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    c3e4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    c3e8:	e0bffd03 	ldbu	r2,-12(fp)
    c3ec:	10803fd8 	cmpnei	r2,r2,255
    c3f0:	1000031e 	bne	r2,zero,c400 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    c3f4:	d0a7e117 	ldw	r2,-24700(gp)
    c3f8:	10800c83 	ldbu	r2,50(r2)
    c3fc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c400:	e0fffd03 	ldbu	r3,-12(fp)
    c404:	008000b4 	movhi	r2,2
    c408:	10b8c204 	addi	r2,r2,-7416
    c40c:	18c7883a 	add	r3,r3,r3
    c410:	18c7883a 	add	r3,r3,r3
    c414:	10c5883a 	add	r2,r2,r3
    c418:	10800017 	ldw	r2,0(r2)
    c41c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    c420:	e0bff717 	ldw	r2,-36(fp)
    c424:	1000081e 	bne	r2,zero,c448 <OSTaskNameSet+0x108>
    c428:	e0bff517 	ldw	r2,-44(fp)
    c42c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c430:	e0bff617 	ldw	r2,-40(fp)
    c434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c438:	e0bfff17 	ldw	r2,-4(fp)
    c43c:	00c010c4 	movi	r3,67
    c440:	10c00005 	stb	r3,0(r2)
        return;
    c444:	00002606 	br	c4e0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    c448:	e0bff717 	ldw	r2,-36(fp)
    c44c:	10800058 	cmpnei	r2,r2,1
    c450:	1000081e 	bne	r2,zero,c474 <OSTaskNameSet+0x134>
    c454:	e0bff517 	ldw	r2,-44(fp)
    c458:	e0bff815 	stw	r2,-32(fp)
    c45c:	e0bff817 	ldw	r2,-32(fp)
    c460:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c464:	e0bfff17 	ldw	r2,-4(fp)
    c468:	00c010c4 	movi	r3,67
    c46c:	10c00005 	stb	r3,0(r2)
        return;
    c470:	00001b06 	br	c4e0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    c474:	e13ffe17 	ldw	r4,-8(fp)
    c478:	00069440 	call	6944 <OS_StrLen>
    c47c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    c480:	e0bffa03 	ldbu	r2,-24(fp)
    c484:	10800830 	cmpltui	r2,r2,32
    c488:	1000081e 	bne	r2,zero,c4ac <OSTaskNameSet+0x16c>
    c48c:	e0bff517 	ldw	r2,-44(fp)
    c490:	e0bff915 	stw	r2,-28(fp)
    c494:	e0bff917 	ldw	r2,-28(fp)
    c498:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    c49c:	e0bfff17 	ldw	r2,-4(fp)
    c4a0:	00c01044 	movi	r3,65
    c4a4:	10c00005 	stb	r3,0(r2)
        return;
    c4a8:	00000d06 	br	c4e0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    c4ac:	e0bff717 	ldw	r2,-36(fp)
    c4b0:	10801304 	addi	r2,r2,76
    c4b4:	e17ffe17 	ldw	r5,-8(fp)
    c4b8:	1009883a 	mov	r4,r2
    c4bc:	00068d00 	call	68d0 <OS_StrCopy>
    c4c0:	e0bff517 	ldw	r2,-44(fp)
    c4c4:	e0bffb15 	stw	r2,-20(fp)
    c4c8:	e0bffb17 	ldw	r2,-20(fp)
    c4cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    c4d0:	e0bfff17 	ldw	r2,-4(fp)
    c4d4:	10000005 	stb	zero,0(r2)
    c4d8:	00000106 	br	c4e0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    c4dc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    c4e0:	e037883a 	mov	sp,fp
    c4e4:	dfc00117 	ldw	ra,4(sp)
    c4e8:	df000017 	ldw	fp,0(sp)
    c4ec:	dec00204 	addi	sp,sp,8
    c4f0:	f800283a 	ret

0000c4f4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    c4f4:	defff404 	addi	sp,sp,-48
    c4f8:	dfc00b15 	stw	ra,44(sp)
    c4fc:	df000a15 	stw	fp,40(sp)
    c500:	df000a04 	addi	fp,sp,40
    c504:	2005883a 	mov	r2,r4
    c508:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    c50c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    c510:	e0bfff03 	ldbu	r2,-4(fp)
    c514:	10800530 	cmpltui	r2,r2,20
    c518:	1000021e 	bne	r2,zero,c524 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    c51c:	00800a84 	movi	r2,42
    c520:	00006406 	br	c6b4 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c524:	0005303a 	rdctl	r2,status
    c528:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c52c:	e0fffe17 	ldw	r3,-8(fp)
    c530:	00bfff84 	movi	r2,-2
    c534:	1884703a 	and	r2,r3,r2
    c538:	1001703a 	wrctl	status,r2
  
  return context;
    c53c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    c540:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    c544:	e0ffff03 	ldbu	r3,-4(fp)
    c548:	008000b4 	movhi	r2,2
    c54c:	10b8c204 	addi	r2,r2,-7416
    c550:	18c7883a 	add	r3,r3,r3
    c554:	18c7883a 	add	r3,r3,r3
    c558:	10c5883a 	add	r2,r2,r3
    c55c:	10800017 	ldw	r2,0(r2)
    c560:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    c564:	e0bff817 	ldw	r2,-32(fp)
    c568:	1000061e 	bne	r2,zero,c584 <OSTaskResume+0x90>
    c56c:	e0bff617 	ldw	r2,-40(fp)
    c570:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c574:	e0bff717 	ldw	r2,-36(fp)
    c578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    c57c:	00801184 	movi	r2,70
    c580:	00004c06 	br	c6b4 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    c584:	e0bff817 	ldw	r2,-32(fp)
    c588:	10800058 	cmpnei	r2,r2,1
    c58c:	1000061e 	bne	r2,zero,c5a8 <OSTaskResume+0xb4>
    c590:	e0bff617 	ldw	r2,-40(fp)
    c594:	e0bff915 	stw	r2,-28(fp)
    c598:	e0bff917 	ldw	r2,-28(fp)
    c59c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c5a0:	008010c4 	movi	r2,67
    c5a4:	00004306 	br	c6b4 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    c5a8:	e0bff817 	ldw	r2,-32(fp)
    c5ac:	10800c03 	ldbu	r2,48(r2)
    c5b0:	10803fcc 	andi	r2,r2,255
    c5b4:	1080020c 	andi	r2,r2,8
    c5b8:	10003926 	beq	r2,zero,c6a0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    c5bc:	e0bff817 	ldw	r2,-32(fp)
    c5c0:	10c00c03 	ldbu	r3,48(r2)
    c5c4:	00bffdc4 	movi	r2,-9
    c5c8:	1884703a 	and	r2,r3,r2
    c5cc:	1007883a 	mov	r3,r2
    c5d0:	e0bff817 	ldw	r2,-32(fp)
    c5d4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    c5d8:	e0bff817 	ldw	r2,-32(fp)
    c5dc:	10800c03 	ldbu	r2,48(r2)
    c5e0:	10803fcc 	andi	r2,r2,255
    c5e4:	1000281e 	bne	r2,zero,c688 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
    c5e8:	e0bff817 	ldw	r2,-32(fp)
    c5ec:	10800b8b 	ldhu	r2,46(r2)
    c5f0:	10bfffcc 	andi	r2,r2,65535
    c5f4:	10001f1e 	bne	r2,zero,c674 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    c5f8:	e0bff817 	ldw	r2,-32(fp)
    c5fc:	10c00d83 	ldbu	r3,54(r2)
    c600:	d0a7de03 	ldbu	r2,-24712(gp)
    c604:	1884b03a 	or	r2,r3,r2
    c608:	d0a7de05 	stb	r2,-24712(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    c60c:	e0bff817 	ldw	r2,-32(fp)
    c610:	10800d03 	ldbu	r2,52(r2)
    c614:	10c03fcc 	andi	r3,r2,255
    c618:	e0bff817 	ldw	r2,-32(fp)
    c61c:	10800d03 	ldbu	r2,52(r2)
    c620:	11003fcc 	andi	r4,r2,255
    c624:	d0a7de44 	addi	r2,gp,-24711
    c628:	2085883a 	add	r2,r4,r2
    c62c:	11000003 	ldbu	r4,0(r2)
    c630:	e0bff817 	ldw	r2,-32(fp)
    c634:	10800d43 	ldbu	r2,53(r2)
    c638:	2084b03a 	or	r2,r4,r2
    c63c:	1009883a 	mov	r4,r2
    c640:	d0a7de44 	addi	r2,gp,-24711
    c644:	1885883a 	add	r2,r3,r2
    c648:	11000005 	stb	r4,0(r2)
    c64c:	e0bff617 	ldw	r2,-40(fp)
    c650:	e0bffa15 	stw	r2,-24(fp)
    c654:	e0bffa17 	ldw	r2,-24(fp)
    c658:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    c65c:	d0a7d243 	ldbu	r2,-24759(gp)
    c660:	10803fcc 	andi	r2,r2,255
    c664:	10800058 	cmpnei	r2,r2,1
    c668:	10000b1e 	bne	r2,zero,c698 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
    c66c:	000678c0 	call	678c <OS_Sched>
    c670:	00000906 	br	c698 <OSTaskResume+0x1a4>
    c674:	e0bff617 	ldw	r2,-40(fp)
    c678:	e0bffb15 	stw	r2,-20(fp)
    c67c:	e0bffb17 	ldw	r2,-20(fp)
    c680:	1001703a 	wrctl	status,r2
    c684:	00000406 	br	c698 <OSTaskResume+0x1a4>
    c688:	e0bff617 	ldw	r2,-40(fp)
    c68c:	e0bffc15 	stw	r2,-16(fp)
    c690:	e0bffc17 	ldw	r2,-16(fp)
    c694:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    c698:	0005883a 	mov	r2,zero
    c69c:	00000506 	br	c6b4 <OSTaskResume+0x1c0>
    c6a0:	e0bff617 	ldw	r2,-40(fp)
    c6a4:	e0bffd15 	stw	r2,-12(fp)
    c6a8:	e0bffd17 	ldw	r2,-12(fp)
    c6ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    c6b0:	00801104 	movi	r2,68
}
    c6b4:	e037883a 	mov	sp,fp
    c6b8:	dfc00117 	ldw	ra,4(sp)
    c6bc:	df000017 	ldw	fp,0(sp)
    c6c0:	dec00204 	addi	sp,sp,8
    c6c4:	f800283a 	ret

0000c6c8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    c6c8:	defff304 	addi	sp,sp,-52
    c6cc:	df000c15 	stw	fp,48(sp)
    c6d0:	df000c04 	addi	fp,sp,48
    c6d4:	2005883a 	mov	r2,r4
    c6d8:	e17fff15 	stw	r5,-4(fp)
    c6dc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    c6e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    c6e4:	e0bffe03 	ldbu	r2,-8(fp)
    c6e8:	10800570 	cmpltui	r2,r2,21
    c6ec:	1000051e 	bne	r2,zero,c704 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    c6f0:	e0bffe03 	ldbu	r2,-8(fp)
    c6f4:	10803fe0 	cmpeqi	r2,r2,255
    c6f8:	1000021e 	bne	r2,zero,c704 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    c6fc:	00800a84 	movi	r2,42
    c700:	00005d06 	br	c878 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    c704:	e0bfff17 	ldw	r2,-4(fp)
    c708:	1000021e 	bne	r2,zero,c714 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    c70c:	00800244 	movi	r2,9
    c710:	00005906 	br	c878 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    c714:	e0bfff17 	ldw	r2,-4(fp)
    c718:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    c71c:	e0bfff17 	ldw	r2,-4(fp)
    c720:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c724:	0005303a 	rdctl	r2,status
    c728:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c72c:	e0fffd17 	ldw	r3,-12(fp)
    c730:	00bfff84 	movi	r2,-2
    c734:	1884703a 	and	r2,r3,r2
    c738:	1001703a 	wrctl	status,r2
  
  return context;
    c73c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    c740:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    c744:	e0bffe03 	ldbu	r2,-8(fp)
    c748:	10803fd8 	cmpnei	r2,r2,255
    c74c:	1000031e 	bne	r2,zero,c75c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    c750:	d0a7e117 	ldw	r2,-24700(gp)
    c754:	10800c83 	ldbu	r2,50(r2)
    c758:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c75c:	e0fffe03 	ldbu	r3,-8(fp)
    c760:	008000b4 	movhi	r2,2
    c764:	10b8c204 	addi	r2,r2,-7416
    c768:	18c7883a 	add	r3,r3,r3
    c76c:	18c7883a 	add	r3,r3,r3
    c770:	10c5883a 	add	r2,r2,r3
    c774:	10800017 	ldw	r2,0(r2)
    c778:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    c77c:	e0bff817 	ldw	r2,-32(fp)
    c780:	1000061e 	bne	r2,zero,c79c <OSTaskStkChk+0xd4>
    c784:	e0bff617 	ldw	r2,-40(fp)
    c788:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c78c:	e0bff717 	ldw	r2,-36(fp)
    c790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c794:	008010c4 	movi	r2,67
    c798:	00003706 	br	c878 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    c79c:	e0bff817 	ldw	r2,-32(fp)
    c7a0:	10800058 	cmpnei	r2,r2,1
    c7a4:	1000061e 	bne	r2,zero,c7c0 <OSTaskStkChk+0xf8>
    c7a8:	e0bff617 	ldw	r2,-40(fp)
    c7ac:	e0bff915 	stw	r2,-28(fp)
    c7b0:	e0bff917 	ldw	r2,-28(fp)
    c7b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c7b8:	008010c4 	movi	r2,67
    c7bc:	00002e06 	br	c878 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    c7c0:	e0bff817 	ldw	r2,-32(fp)
    c7c4:	1080040b 	ldhu	r2,16(r2)
    c7c8:	10bfffcc 	andi	r2,r2,65535
    c7cc:	1080004c 	andi	r2,r2,1
    c7d0:	1000061e 	bne	r2,zero,c7ec <OSTaskStkChk+0x124>
    c7d4:	e0bff617 	ldw	r2,-40(fp)
    c7d8:	e0bffa15 	stw	r2,-24(fp)
    c7dc:	e0bffa17 	ldw	r2,-24(fp)
    c7e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    c7e4:	00801144 	movi	r2,69
    c7e8:	00002306 	br	c878 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
    c7ec:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    c7f0:	e0bff817 	ldw	r2,-32(fp)
    c7f4:	10800317 	ldw	r2,12(r2)
    c7f8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    c7fc:	e0bff817 	ldw	r2,-32(fp)
    c800:	10800217 	ldw	r2,8(r2)
    c804:	e0bff415 	stw	r2,-48(fp)
    c808:	e0bff617 	ldw	r2,-40(fp)
    c80c:	e0bffb15 	stw	r2,-20(fp)
    c810:	e0bffb17 	ldw	r2,-20(fp)
    c814:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    c818:	00000306 	br	c828 <OSTaskStkChk+0x160>
        nfree++;
    c81c:	e0bff517 	ldw	r2,-44(fp)
    c820:	10800044 	addi	r2,r2,1
    c824:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    c828:	e0bff417 	ldw	r2,-48(fp)
    c82c:	10c00104 	addi	r3,r2,4
    c830:	e0fff415 	stw	r3,-48(fp)
    c834:	10800017 	ldw	r2,0(r2)
    c838:	103ff826 	beq	r2,zero,c81c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c81c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    c83c:	e0bff517 	ldw	r2,-44(fp)
    c840:	1085883a 	add	r2,r2,r2
    c844:	1085883a 	add	r2,r2,r2
    c848:	1007883a 	mov	r3,r2
    c84c:	e0bfff17 	ldw	r2,-4(fp)
    c850:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    c854:	e0fffc17 	ldw	r3,-16(fp)
    c858:	e0bff517 	ldw	r2,-44(fp)
    c85c:	1885c83a 	sub	r2,r3,r2
    c860:	1085883a 	add	r2,r2,r2
    c864:	1085883a 	add	r2,r2,r2
    c868:	1007883a 	mov	r3,r2
    c86c:	e0bfff17 	ldw	r2,-4(fp)
    c870:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    c874:	0005883a 	mov	r2,zero
}
    c878:	e037883a 	mov	sp,fp
    c87c:	df000017 	ldw	fp,0(sp)
    c880:	dec00104 	addi	sp,sp,4
    c884:	f800283a 	ret

0000c888 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    c888:	defff504 	addi	sp,sp,-44
    c88c:	dfc00a15 	stw	ra,40(sp)
    c890:	df000915 	stw	fp,36(sp)
    c894:	df000904 	addi	fp,sp,36
    c898:	2005883a 	mov	r2,r4
    c89c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c8a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    c8a4:	e0bfff03 	ldbu	r2,-4(fp)
    c8a8:	10800518 	cmpnei	r2,r2,20
    c8ac:	1000021e 	bne	r2,zero,c8b8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    c8b0:	008011c4 	movi	r2,71
    c8b4:	00006806 	br	ca58 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    c8b8:	e0bfff03 	ldbu	r2,-4(fp)
    c8bc:	10800530 	cmpltui	r2,r2,20
    c8c0:	1000051e 	bne	r2,zero,c8d8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    c8c4:	e0bfff03 	ldbu	r2,-4(fp)
    c8c8:	10803fe0 	cmpeqi	r2,r2,255
    c8cc:	1000021e 	bne	r2,zero,c8d8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    c8d0:	00800a84 	movi	r2,42
    c8d4:	00006006 	br	ca58 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c8d8:	0005303a 	rdctl	r2,status
    c8dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c8e0:	e0fffe17 	ldw	r3,-8(fp)
    c8e4:	00bfff84 	movi	r2,-2
    c8e8:	1884703a 	and	r2,r3,r2
    c8ec:	1001703a 	wrctl	status,r2
  
  return context;
    c8f0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    c8f4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    c8f8:	e0bfff03 	ldbu	r2,-4(fp)
    c8fc:	10803fd8 	cmpnei	r2,r2,255
    c900:	1000061e 	bne	r2,zero,c91c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    c904:	d0a7e117 	ldw	r2,-24700(gp)
    c908:	10800c83 	ldbu	r2,50(r2)
    c90c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    c910:	00800044 	movi	r2,1
    c914:	e0bff705 	stb	r2,-36(fp)
    c918:	00000906 	br	c940 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    c91c:	d0a7e117 	ldw	r2,-24700(gp)
    c920:	10800c83 	ldbu	r2,50(r2)
    c924:	10c03fcc 	andi	r3,r2,255
    c928:	e0bfff03 	ldbu	r2,-4(fp)
    c92c:	1880031e 	bne	r3,r2,c93c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    c930:	00800044 	movi	r2,1
    c934:	e0bff705 	stb	r2,-36(fp)
    c938:	00000106 	br	c940 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    c93c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c940:	e0ffff03 	ldbu	r3,-4(fp)
    c944:	008000b4 	movhi	r2,2
    c948:	10b8c204 	addi	r2,r2,-7416
    c94c:	18c7883a 	add	r3,r3,r3
    c950:	18c7883a 	add	r3,r3,r3
    c954:	10c5883a 	add	r2,r2,r3
    c958:	10800017 	ldw	r2,0(r2)
    c95c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    c960:	e0bffa17 	ldw	r2,-24(fp)
    c964:	1000061e 	bne	r2,zero,c980 <OSTaskSuspend+0xf8>
    c968:	e0bff817 	ldw	r2,-32(fp)
    c96c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c970:	e0bff917 	ldw	r2,-28(fp)
    c974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    c978:	00801204 	movi	r2,72
    c97c:	00003606 	br	ca58 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    c980:	e0bffa17 	ldw	r2,-24(fp)
    c984:	10800058 	cmpnei	r2,r2,1
    c988:	1000061e 	bne	r2,zero,c9a4 <OSTaskSuspend+0x11c>
    c98c:	e0bff817 	ldw	r2,-32(fp)
    c990:	e0bffb15 	stw	r2,-20(fp)
    c994:	e0bffb17 	ldw	r2,-20(fp)
    c998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c99c:	008010c4 	movi	r2,67
    c9a0:	00002d06 	br	ca58 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
    c9a4:	e0bffa17 	ldw	r2,-24(fp)
    c9a8:	10800d03 	ldbu	r2,52(r2)
    c9ac:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    c9b0:	e0fffd03 	ldbu	r3,-12(fp)
    c9b4:	e13ffd03 	ldbu	r4,-12(fp)
    c9b8:	d0a7de44 	addi	r2,gp,-24711
    c9bc:	2085883a 	add	r2,r4,r2
    c9c0:	10800003 	ldbu	r2,0(r2)
    c9c4:	1009883a 	mov	r4,r2
    c9c8:	e0bffa17 	ldw	r2,-24(fp)
    c9cc:	10800d43 	ldbu	r2,53(r2)
    c9d0:	0084303a 	nor	r2,zero,r2
    c9d4:	2084703a 	and	r2,r4,r2
    c9d8:	1009883a 	mov	r4,r2
    c9dc:	d0a7de44 	addi	r2,gp,-24711
    c9e0:	1885883a 	add	r2,r3,r2
    c9e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    c9e8:	e0fffd03 	ldbu	r3,-12(fp)
    c9ec:	d0a7de44 	addi	r2,gp,-24711
    c9f0:	1885883a 	add	r2,r3,r2
    c9f4:	10800003 	ldbu	r2,0(r2)
    c9f8:	10803fcc 	andi	r2,r2,255
    c9fc:	1000071e 	bne	r2,zero,ca1c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    ca00:	e0bffa17 	ldw	r2,-24(fp)
    ca04:	10800d83 	ldbu	r2,54(r2)
    ca08:	0084303a 	nor	r2,zero,r2
    ca0c:	1007883a 	mov	r3,r2
    ca10:	d0a7de03 	ldbu	r2,-24712(gp)
    ca14:	1884703a 	and	r2,r3,r2
    ca18:	d0a7de05 	stb	r2,-24712(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    ca1c:	e0bffa17 	ldw	r2,-24(fp)
    ca20:	10800c03 	ldbu	r2,48(r2)
    ca24:	10800214 	ori	r2,r2,8
    ca28:	1007883a 	mov	r3,r2
    ca2c:	e0bffa17 	ldw	r2,-24(fp)
    ca30:	10c00c05 	stb	r3,48(r2)
    ca34:	e0bff817 	ldw	r2,-32(fp)
    ca38:	e0bffc15 	stw	r2,-16(fp)
    ca3c:	e0bffc17 	ldw	r2,-16(fp)
    ca40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    ca44:	e0bff703 	ldbu	r2,-36(fp)
    ca48:	10800058 	cmpnei	r2,r2,1
    ca4c:	1000011e 	bne	r2,zero,ca54 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
    ca50:	000678c0 	call	678c <OS_Sched>
    }
    return (OS_ERR_NONE);
    ca54:	0005883a 	mov	r2,zero
}
    ca58:	e037883a 	mov	sp,fp
    ca5c:	dfc00117 	ldw	ra,4(sp)
    ca60:	df000017 	ldw	fp,0(sp)
    ca64:	dec00204 	addi	sp,sp,8
    ca68:	f800283a 	ret

0000ca6c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    ca6c:	defff604 	addi	sp,sp,-40
    ca70:	dfc00915 	stw	ra,36(sp)
    ca74:	df000815 	stw	fp,32(sp)
    ca78:	df000804 	addi	fp,sp,32
    ca7c:	2005883a 	mov	r2,r4
    ca80:	e17fff15 	stw	r5,-4(fp)
    ca84:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ca88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    ca8c:	e0bffe03 	ldbu	r2,-8(fp)
    ca90:	10800570 	cmpltui	r2,r2,21
    ca94:	1000051e 	bne	r2,zero,caac <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    ca98:	e0bffe03 	ldbu	r2,-8(fp)
    ca9c:	10803fe0 	cmpeqi	r2,r2,255
    caa0:	1000021e 	bne	r2,zero,caac <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    caa4:	00800a84 	movi	r2,42
    caa8:	00003406 	br	cb7c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    caac:	e0bfff17 	ldw	r2,-4(fp)
    cab0:	1000021e 	bne	r2,zero,cabc <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    cab4:	00800244 	movi	r2,9
    cab8:	00003006 	br	cb7c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cabc:	0005303a 	rdctl	r2,status
    cac0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cac4:	e0fffd17 	ldw	r3,-12(fp)
    cac8:	00bfff84 	movi	r2,-2
    cacc:	1884703a 	and	r2,r3,r2
    cad0:	1001703a 	wrctl	status,r2
  
  return context;
    cad4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    cad8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    cadc:	e0bffe03 	ldbu	r2,-8(fp)
    cae0:	10803fd8 	cmpnei	r2,r2,255
    cae4:	1000031e 	bne	r2,zero,caf4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    cae8:	d0a7e117 	ldw	r2,-24700(gp)
    caec:	10800c83 	ldbu	r2,50(r2)
    caf0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    caf4:	e0fffe03 	ldbu	r3,-8(fp)
    caf8:	008000b4 	movhi	r2,2
    cafc:	10b8c204 	addi	r2,r2,-7416
    cb00:	18c7883a 	add	r3,r3,r3
    cb04:	18c7883a 	add	r3,r3,r3
    cb08:	10c5883a 	add	r2,r2,r3
    cb0c:	10800017 	ldw	r2,0(r2)
    cb10:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    cb14:	e0bffa17 	ldw	r2,-24(fp)
    cb18:	1000061e 	bne	r2,zero,cb34 <OSTaskQuery+0xc8>
    cb1c:	e0bff817 	ldw	r2,-32(fp)
    cb20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb24:	e0bff917 	ldw	r2,-28(fp)
    cb28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    cb2c:	00800a44 	movi	r2,41
    cb30:	00001206 	br	cb7c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    cb34:	e0bffa17 	ldw	r2,-24(fp)
    cb38:	10800058 	cmpnei	r2,r2,1
    cb3c:	1000061e 	bne	r2,zero,cb58 <OSTaskQuery+0xec>
    cb40:	e0bff817 	ldw	r2,-32(fp)
    cb44:	e0bffb15 	stw	r2,-20(fp)
    cb48:	e0bffb17 	ldw	r2,-20(fp)
    cb4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    cb50:	008010c4 	movi	r2,67
    cb54:	00000906 	br	cb7c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    cb58:	01801b04 	movi	r6,108
    cb5c:	e17ffa17 	ldw	r5,-24(fp)
    cb60:	e13fff17 	ldw	r4,-4(fp)
    cb64:	00067240 	call	6724 <OS_MemCopy>
    cb68:	e0bff817 	ldw	r2,-32(fp)
    cb6c:	e0bffc15 	stw	r2,-16(fp)
    cb70:	e0bffc17 	ldw	r2,-16(fp)
    cb74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    cb78:	0005883a 	mov	r2,zero
}
    cb7c:	e037883a 	mov	sp,fp
    cb80:	dfc00117 	ldw	ra,4(sp)
    cb84:	df000017 	ldw	fp,0(sp)
    cb88:	dec00204 	addi	sp,sp,8
    cb8c:	f800283a 	ret

0000cb90 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    cb90:	defffc04 	addi	sp,sp,-16
    cb94:	df000315 	stw	fp,12(sp)
    cb98:	df000304 	addi	fp,sp,12
    cb9c:	e13ffd15 	stw	r4,-12(fp)
    cba0:	e17ffe15 	stw	r5,-8(fp)
    cba4:	3005883a 	mov	r2,r6
    cba8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    cbac:	e0bfff0b 	ldhu	r2,-4(fp)
    cbb0:	1080004c 	andi	r2,r2,1
    cbb4:	10000d26 	beq	r2,zero,cbec <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    cbb8:	e0bfff0b 	ldhu	r2,-4(fp)
    cbbc:	1080008c 	andi	r2,r2,2
    cbc0:	10000a26 	beq	r2,zero,cbec <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    cbc4:	00000706 	br	cbe4 <OS_TaskStkClr+0x54>
                size--;
    cbc8:	e0bffe17 	ldw	r2,-8(fp)
    cbcc:	10bfffc4 	addi	r2,r2,-1
    cbd0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    cbd4:	e0bffd17 	ldw	r2,-12(fp)
    cbd8:	10c00104 	addi	r3,r2,4
    cbdc:	e0fffd15 	stw	r3,-12(fp)
    cbe0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    cbe4:	e0bffe17 	ldw	r2,-8(fp)
    cbe8:	103ff71e 	bne	r2,zero,cbc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbc8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    cbec:	0001883a 	nop
    cbf0:	e037883a 	mov	sp,fp
    cbf4:	df000017 	ldw	fp,0(sp)
    cbf8:	dec00104 	addi	sp,sp,4
    cbfc:	f800283a 	ret

0000cc00 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    cc00:	defff904 	addi	sp,sp,-28
    cc04:	dfc00615 	stw	ra,24(sp)
    cc08:	df000515 	stw	fp,20(sp)
    cc0c:	df000504 	addi	fp,sp,20
    cc10:	2005883a 	mov	r2,r4
    cc14:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cc18:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    cc1c:	d0a7e003 	ldbu	r2,-24704(gp)
    cc20:	10803fcc 	andi	r2,r2,255
    cc24:	1000311e 	bne	r2,zero,ccec <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    cc28:	e0bfff0b 	ldhu	r2,-4(fp)
    cc2c:	10003026 	beq	r2,zero,ccf0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc30:	0005303a 	rdctl	r2,status
    cc34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc38:	e0fffe17 	ldw	r3,-8(fp)
    cc3c:	00bfff84 	movi	r2,-2
    cc40:	1884703a 	and	r2,r3,r2
    cc44:	1001703a 	wrctl	status,r2
  
  return context;
    cc48:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    cc4c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    cc50:	d0a7e117 	ldw	r2,-24700(gp)
    cc54:	10800d03 	ldbu	r2,52(r2)
    cc58:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    cc5c:	e0fffd03 	ldbu	r3,-12(fp)
    cc60:	e13ffd03 	ldbu	r4,-12(fp)
    cc64:	d0a7de44 	addi	r2,gp,-24711
    cc68:	2085883a 	add	r2,r4,r2
    cc6c:	10800003 	ldbu	r2,0(r2)
    cc70:	1009883a 	mov	r4,r2
    cc74:	d0a7e117 	ldw	r2,-24700(gp)
    cc78:	10800d43 	ldbu	r2,53(r2)
    cc7c:	0084303a 	nor	r2,zero,r2
    cc80:	2084703a 	and	r2,r4,r2
    cc84:	1009883a 	mov	r4,r2
    cc88:	d0a7de44 	addi	r2,gp,-24711
    cc8c:	1885883a 	add	r2,r3,r2
    cc90:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    cc94:	e0fffd03 	ldbu	r3,-12(fp)
    cc98:	d0a7de44 	addi	r2,gp,-24711
    cc9c:	1885883a 	add	r2,r3,r2
    cca0:	10800003 	ldbu	r2,0(r2)
    cca4:	10803fcc 	andi	r2,r2,255
    cca8:	1000071e 	bne	r2,zero,ccc8 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    ccac:	d0a7e117 	ldw	r2,-24700(gp)
    ccb0:	10800d83 	ldbu	r2,54(r2)
    ccb4:	0084303a 	nor	r2,zero,r2
    ccb8:	1007883a 	mov	r3,r2
    ccbc:	d0a7de03 	ldbu	r2,-24712(gp)
    ccc0:	1884703a 	and	r2,r3,r2
    ccc4:	d0a7de05 	stb	r2,-24712(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    ccc8:	d0a7e117 	ldw	r2,-24700(gp)
    cccc:	e0ffff0b 	ldhu	r3,-4(fp)
    ccd0:	10c00b8d 	sth	r3,46(r2)
    ccd4:	e0bffb17 	ldw	r2,-20(fp)
    ccd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ccdc:	e0bffc17 	ldw	r2,-16(fp)
    cce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    cce4:	000678c0 	call	678c <OS_Sched>
    cce8:	00000106 	br	ccf0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    ccec:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    ccf0:	e037883a 	mov	sp,fp
    ccf4:	dfc00117 	ldw	ra,4(sp)
    ccf8:	df000017 	ldw	fp,0(sp)
    ccfc:	dec00204 	addi	sp,sp,8
    cd00:	f800283a 	ret

0000cd04 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    cd04:	defff804 	addi	sp,sp,-32
    cd08:	dfc00715 	stw	ra,28(sp)
    cd0c:	df000615 	stw	fp,24(sp)
    cd10:	df000604 	addi	fp,sp,24
    cd14:	2015883a 	mov	r10,r4
    cd18:	2809883a 	mov	r4,r5
    cd1c:	3007883a 	mov	r3,r6
    cd20:	3805883a 	mov	r2,r7
    cd24:	e2bffc05 	stb	r10,-16(fp)
    cd28:	e13ffd05 	stb	r4,-12(fp)
    cd2c:	e0fffe05 	stb	r3,-8(fp)
    cd30:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    cd34:	d0a7e003 	ldbu	r2,-24704(gp)
    cd38:	10803fcc 	andi	r2,r2,255
    cd3c:	10000226 	beq	r2,zero,cd48 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
    cd40:	00801544 	movi	r2,85
    cd44:	00004206 	br	ce50 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    cd48:	e0bffc03 	ldbu	r2,-16(fp)
    cd4c:	1000081e 	bne	r2,zero,cd70 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
    cd50:	e0bffd03 	ldbu	r2,-12(fp)
    cd54:	1000061e 	bne	r2,zero,cd70 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
    cd58:	e0bffe03 	ldbu	r2,-8(fp)
    cd5c:	1000041e 	bne	r2,zero,cd70 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
    cd60:	e0bfff0b 	ldhu	r2,-4(fp)
    cd64:	1000021e 	bne	r2,zero,cd70 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
    cd68:	00801504 	movi	r2,84
    cd6c:	00003806 	br	ce50 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
    cd70:	e0bffd03 	ldbu	r2,-12(fp)
    cd74:	10800f30 	cmpltui	r2,r2,60
    cd78:	1000021e 	bne	r2,zero,cd84 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    cd7c:	00801444 	movi	r2,81
    cd80:	00003306 	br	ce50 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
    cd84:	e0bffe03 	ldbu	r2,-8(fp)
    cd88:	10800f30 	cmpltui	r2,r2,60
    cd8c:	1000021e 	bne	r2,zero,cd98 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
    cd90:	00801484 	movi	r2,82
    cd94:	00002e06 	br	ce50 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
    cd98:	e0bfff0b 	ldhu	r2,-4(fp)
    cd9c:	1080fa30 	cmpltui	r2,r2,1000
    cda0:	1000021e 	bne	r2,zero,cdac <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
    cda4:	008014c4 	movi	r2,83
    cda8:	00002906 	br	ce50 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    cdac:	e0bffc03 	ldbu	r2,-16(fp)
    cdb0:	10c38424 	muli	r3,r2,3600
    cdb4:	e0bffd03 	ldbu	r2,-12(fp)
    cdb8:	10800f24 	muli	r2,r2,60
    cdbc:	1887883a 	add	r3,r3,r2
    cdc0:	e0bffe03 	ldbu	r2,-8(fp)
    cdc4:	1885883a 	add	r2,r3,r2
    cdc8:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    cdcc:	e0bfff0b 	ldhu	r2,-4(fp)
    cdd0:	10800f84 	addi	r2,r2,62
    cdd4:	100690fa 	slli	r3,r2,3
    cdd8:	008418b4 	movhi	r2,4194
    cddc:	109374c4 	addi	r2,r2,19923
    cde0:	188a383a 	mulxuu	r5,r3,r2
    cde4:	1885383a 	mul	r2,r3,r2
    cde8:	1011883a 	mov	r8,r2
    cdec:	2813883a 	mov	r9,r5
    cdf0:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    cdf4:	2085883a 	add	r2,r4,r2
    cdf8:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    cdfc:	e0bffb17 	ldw	r2,-20(fp)
    ce00:	1004d43a 	srli	r2,r2,16
    ce04:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    ce08:	e0bffb17 	ldw	r2,-20(fp)
    ce0c:	10bfffcc 	andi	r2,r2,65535
    ce10:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    ce14:	e0bffb17 	ldw	r2,-20(fp)
    ce18:	10bfffcc 	andi	r2,r2,65535
    ce1c:	1009883a 	mov	r4,r2
    ce20:	000cc000 	call	cc00 <OSTimeDly>
    while (loops > 0) {
    ce24:	00000706 	br	ce44 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
    ce28:	01200014 	movui	r4,32768
    ce2c:	000cc000 	call	cc00 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    ce30:	01200014 	movui	r4,32768
    ce34:	000cc000 	call	cc00 <OSTimeDly>
        loops--;
    ce38:	e0bffa0b 	ldhu	r2,-24(fp)
    ce3c:	10bfffc4 	addi	r2,r2,-1
    ce40:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    ce44:	e0bffa0b 	ldhu	r2,-24(fp)
    ce48:	103ff71e 	bne	r2,zero,ce28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce28>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    ce4c:	0005883a 	mov	r2,zero
}
    ce50:	e037883a 	mov	sp,fp
    ce54:	dfc00117 	ldw	ra,4(sp)
    ce58:	df000017 	ldw	fp,0(sp)
    ce5c:	dec00204 	addi	sp,sp,8
    ce60:	f800283a 	ret

0000ce64 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    ce64:	defff504 	addi	sp,sp,-44
    ce68:	dfc00a15 	stw	ra,40(sp)
    ce6c:	df000915 	stw	fp,36(sp)
    ce70:	df000904 	addi	fp,sp,36
    ce74:	2005883a 	mov	r2,r4
    ce78:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ce7c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    ce80:	e0bfff03 	ldbu	r2,-4(fp)
    ce84:	10800530 	cmpltui	r2,r2,20
    ce88:	1000021e 	bne	r2,zero,ce94 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    ce8c:	00800a84 	movi	r2,42
    ce90:	00006406 	br	d024 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce94:	0005303a 	rdctl	r2,status
    ce98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce9c:	e0fffe17 	ldw	r3,-8(fp)
    cea0:	00bfff84 	movi	r2,-2
    cea4:	1884703a 	and	r2,r3,r2
    cea8:	1001703a 	wrctl	status,r2
  
  return context;
    ceac:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    ceb0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    ceb4:	e0ffff03 	ldbu	r3,-4(fp)
    ceb8:	008000b4 	movhi	r2,2
    cebc:	10b8c204 	addi	r2,r2,-7416
    cec0:	18c7883a 	add	r3,r3,r3
    cec4:	18c7883a 	add	r3,r3,r3
    cec8:	10c5883a 	add	r2,r2,r3
    cecc:	10800017 	ldw	r2,0(r2)
    ced0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    ced4:	e0bff917 	ldw	r2,-28(fp)
    ced8:	1000061e 	bne	r2,zero,cef4 <OSTimeDlyResume+0x90>
    cedc:	e0bff717 	ldw	r2,-36(fp)
    cee0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cee4:	e0bff817 	ldw	r2,-32(fp)
    cee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    ceec:	008010c4 	movi	r2,67
    cef0:	00004c06 	br	d024 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    cef4:	e0bff917 	ldw	r2,-28(fp)
    cef8:	10800058 	cmpnei	r2,r2,1
    cefc:	1000061e 	bne	r2,zero,cf18 <OSTimeDlyResume+0xb4>
    cf00:	e0bff717 	ldw	r2,-36(fp)
    cf04:	e0bffa15 	stw	r2,-24(fp)
    cf08:	e0bffa17 	ldw	r2,-24(fp)
    cf0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    cf10:	008010c4 	movi	r2,67
    cf14:	00004306 	br	d024 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    cf18:	e0bff917 	ldw	r2,-28(fp)
    cf1c:	10800b8b 	ldhu	r2,46(r2)
    cf20:	10bfffcc 	andi	r2,r2,65535
    cf24:	1000061e 	bne	r2,zero,cf40 <OSTimeDlyResume+0xdc>
    cf28:	e0bff717 	ldw	r2,-36(fp)
    cf2c:	e0bffb15 	stw	r2,-20(fp)
    cf30:	e0bffb17 	ldw	r2,-20(fp)
    cf34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    cf38:	00801404 	movi	r2,80
    cf3c:	00003906 	br	d024 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    cf40:	e0bff917 	ldw	r2,-28(fp)
    cf44:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    cf48:	e0bff917 	ldw	r2,-28(fp)
    cf4c:	10800c03 	ldbu	r2,48(r2)
    cf50:	10803fcc 	andi	r2,r2,255
    cf54:	10800dcc 	andi	r2,r2,55
    cf58:	10000b26 	beq	r2,zero,cf88 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    cf5c:	e0bff917 	ldw	r2,-28(fp)
    cf60:	10c00c03 	ldbu	r3,48(r2)
    cf64:	00bff204 	movi	r2,-56
    cf68:	1884703a 	and	r2,r3,r2
    cf6c:	1007883a 	mov	r3,r2
    cf70:	e0bff917 	ldw	r2,-28(fp)
    cf74:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    cf78:	e0bff917 	ldw	r2,-28(fp)
    cf7c:	00c00044 	movi	r3,1
    cf80:	10c00c45 	stb	r3,49(r2)
    cf84:	00000206 	br	cf90 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    cf88:	e0bff917 	ldw	r2,-28(fp)
    cf8c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    cf90:	e0bff917 	ldw	r2,-28(fp)
    cf94:	10800c03 	ldbu	r2,48(r2)
    cf98:	10803fcc 	andi	r2,r2,255
    cf9c:	1080020c 	andi	r2,r2,8
    cfa0:	10001b1e 	bne	r2,zero,d010 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    cfa4:	e0bff917 	ldw	r2,-28(fp)
    cfa8:	10c00d83 	ldbu	r3,54(r2)
    cfac:	d0a7de03 	ldbu	r2,-24712(gp)
    cfb0:	1884b03a 	or	r2,r3,r2
    cfb4:	d0a7de05 	stb	r2,-24712(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    cfb8:	e0bff917 	ldw	r2,-28(fp)
    cfbc:	10800d03 	ldbu	r2,52(r2)
    cfc0:	10c03fcc 	andi	r3,r2,255
    cfc4:	e0bff917 	ldw	r2,-28(fp)
    cfc8:	10800d03 	ldbu	r2,52(r2)
    cfcc:	11003fcc 	andi	r4,r2,255
    cfd0:	d0a7de44 	addi	r2,gp,-24711
    cfd4:	2085883a 	add	r2,r4,r2
    cfd8:	11000003 	ldbu	r4,0(r2)
    cfdc:	e0bff917 	ldw	r2,-28(fp)
    cfe0:	10800d43 	ldbu	r2,53(r2)
    cfe4:	2084b03a 	or	r2,r4,r2
    cfe8:	1009883a 	mov	r4,r2
    cfec:	d0a7de44 	addi	r2,gp,-24711
    cff0:	1885883a 	add	r2,r3,r2
    cff4:	11000005 	stb	r4,0(r2)
    cff8:	e0bff717 	ldw	r2,-36(fp)
    cffc:	e0bffc15 	stw	r2,-16(fp)
    d000:	e0bffc17 	ldw	r2,-16(fp)
    d004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    d008:	000678c0 	call	678c <OS_Sched>
    d00c:	00000406 	br	d020 <OSTimeDlyResume+0x1bc>
    d010:	e0bff717 	ldw	r2,-36(fp)
    d014:	e0bffd15 	stw	r2,-12(fp)
    d018:	e0bffd17 	ldw	r2,-12(fp)
    d01c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    d020:	0005883a 	mov	r2,zero
}
    d024:	e037883a 	mov	sp,fp
    d028:	dfc00117 	ldw	ra,4(sp)
    d02c:	df000017 	ldw	fp,0(sp)
    d030:	dec00204 	addi	sp,sp,8
    d034:	f800283a 	ret

0000d038 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    d038:	defffb04 	addi	sp,sp,-20
    d03c:	df000415 	stw	fp,16(sp)
    d040:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d044:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d048:	0005303a 	rdctl	r2,status
    d04c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d050:	e0fffe17 	ldw	r3,-8(fp)
    d054:	00bfff84 	movi	r2,-2
    d058:	1884703a 	and	r2,r3,r2
    d05c:	1001703a 	wrctl	status,r2
  
  return context;
    d060:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    d064:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    d068:	d0a7e217 	ldw	r2,-24696(gp)
    d06c:	e0bffd15 	stw	r2,-12(fp)
    d070:	e0bffc17 	ldw	r2,-16(fp)
    d074:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d078:	e0bfff17 	ldw	r2,-4(fp)
    d07c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    d080:	e0bffd17 	ldw	r2,-12(fp)
}
    d084:	e037883a 	mov	sp,fp
    d088:	df000017 	ldw	fp,0(sp)
    d08c:	dec00104 	addi	sp,sp,4
    d090:	f800283a 	ret

0000d094 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    d094:	defffb04 	addi	sp,sp,-20
    d098:	df000415 	stw	fp,16(sp)
    d09c:	df000404 	addi	fp,sp,16
    d0a0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d0a4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d0a8:	0005303a 	rdctl	r2,status
    d0ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d0b0:	e0fffd17 	ldw	r3,-12(fp)
    d0b4:	00bfff84 	movi	r2,-2
    d0b8:	1884703a 	and	r2,r3,r2
    d0bc:	1001703a 	wrctl	status,r2
  
  return context;
    d0c0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    d0c4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    d0c8:	e0bfff17 	ldw	r2,-4(fp)
    d0cc:	d0a7e215 	stw	r2,-24696(gp)
    d0d0:	e0bffc17 	ldw	r2,-16(fp)
    d0d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d0d8:	e0bffe17 	ldw	r2,-8(fp)
    d0dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    d0e0:	0001883a 	nop
    d0e4:	e037883a 	mov	sp,fp
    d0e8:	df000017 	ldw	fp,0(sp)
    d0ec:	dec00104 	addi	sp,sp,4
    d0f0:	f800283a 	ret

0000d0f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d0f4:	defffd04 	addi	sp,sp,-12
    d0f8:	dfc00215 	stw	ra,8(sp)
    d0fc:	df000115 	stw	fp,4(sp)
    d100:	df000104 	addi	fp,sp,4
    d104:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d108:	d1600804 	addi	r5,gp,-32736
    d10c:	e13fff17 	ldw	r4,-4(fp)
    d110:	000fd280 	call	fd28 <alt_dev_llist_insert>
}
    d114:	e037883a 	mov	sp,fp
    d118:	dfc00117 	ldw	ra,4(sp)
    d11c:	df000017 	ldw	fp,0(sp)
    d120:	dec00204 	addi	sp,sp,8
    d124:	f800283a 	ret

0000d128 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d128:	defffd04 	addi	sp,sp,-12
    d12c:	dfc00215 	stw	ra,8(sp)
    d130:	df000115 	stw	fp,4(sp)
    d134:	df000104 	addi	fp,sp,4
    d138:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    d13c:	00106080 	call	10608 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d140:	00800044 	movi	r2,1
    d144:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d148:	0001883a 	nop
    d14c:	e037883a 	mov	sp,fp
    d150:	dfc00117 	ldw	ra,4(sp)
    d154:	df000017 	ldw	fp,0(sp)
    d158:	dec00204 	addi	sp,sp,8
    d15c:	f800283a 	ret

0000d160 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d160:	defffb04 	addi	sp,sp,-20
    d164:	dfc00415 	stw	ra,16(sp)
    d168:	df000315 	stw	fp,12(sp)
    d16c:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    d170:	01c00204 	movi	r7,8
    d174:	000d883a 	mov	r6,zero
    d178:	000b883a 	mov	r5,zero
    d17c:	013fc834 	movhi	r4,65312
    d180:	21080004 	addi	r4,r4,8192
    d184:	000e86c0 	call	e86c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    d188:	01800204 	movi	r6,8
    d18c:	000b883a 	mov	r5,zero
    d190:	01000074 	movhi	r4,1
    d194:	21076d04 	addi	r4,r4,7604
    d198:	000dc300 	call	dc30 <altera_avalon_jtag_uart_init>
    d19c:	01000074 	movhi	r4,1
    d1a0:	21076304 	addi	r4,r4,7564
    d1a4:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    d1a8:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    d1ac:	01000074 	movhi	r4,1
    d1b0:	210b7e04 	addi	r4,r4,11768
    d1b4:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    d1b8:	01000074 	movhi	r4,1
    d1bc:	210b8a04 	addi	r4,r4,11816
    d1c0:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    d1c4:	01000074 	movhi	r4,1
    d1c8:	210b9604 	addi	r4,r4,11864
    d1cc:	000e9940 	call	e994 <alt_up_character_lcd_init>
    d1d0:	01000074 	movhi	r4,1
    d1d4:	210b9604 	addi	r4,r4,11864
    d1d8:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    d1dc:	01000074 	movhi	r4,1
    d1e0:	210ba104 	addi	r4,r4,11908
    d1e4:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    d1e8:	01000074 	movhi	r4,1
    d1ec:	210bac04 	addi	r4,r4,11952
    d1f0:	000f2880 	call	f288 <alt_up_ps2_init>
    d1f4:	01000074 	movhi	r4,1
    d1f8:	210bac04 	addi	r4,r4,11952
    d1fc:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    d200:	01000074 	movhi	r4,1
    d204:	210bba04 	addi	r4,r4,12008
    d208:	000f2880 	call	f288 <alt_up_ps2_init>
    d20c:	01000074 	movhi	r4,1
    d210:	210bba04 	addi	r4,r4,12008
    d214:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    d218:	01000074 	movhi	r4,1
    d21c:	210bc804 	addi	r4,r4,12064
    d220:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    d224:	01000074 	movhi	r4,1
    d228:	210bd304 	addi	r4,r4,12108
    d22c:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    d230:	00800074 	movhi	r2,1
    d234:	108be004 	addi	r2,r2,12160
    d238:	10800a17 	ldw	r2,40(r2)
    d23c:	10800017 	ldw	r2,0(r2)
    d240:	1007883a 	mov	r3,r2
    d244:	00800074 	movhi	r2,1
    d248:	108be004 	addi	r2,r2,12160
    d24c:	10c00b15 	stw	r3,44(r2)
    d250:	00800074 	movhi	r2,1
    d254:	108be004 	addi	r2,r2,12160
    d258:	10800a17 	ldw	r2,40(r2)
    d25c:	10800104 	addi	r2,r2,4
    d260:	10800017 	ldw	r2,0(r2)
    d264:	1007883a 	mov	r3,r2
    d268:	00800074 	movhi	r2,1
    d26c:	108be004 	addi	r2,r2,12160
    d270:	10c00c15 	stw	r3,48(r2)
    d274:	00800074 	movhi	r2,1
    d278:	108be004 	addi	r2,r2,12160
    d27c:	10800a17 	ldw	r2,40(r2)
    d280:	10800204 	addi	r2,r2,8
    d284:	10800017 	ldw	r2,0(r2)
    d288:	10ffffcc 	andi	r3,r2,65535
    d28c:	00800074 	movhi	r2,1
    d290:	108be004 	addi	r2,r2,12160
    d294:	10c01115 	stw	r3,68(r2)
    d298:	00800074 	movhi	r2,1
    d29c:	108be004 	addi	r2,r2,12160
    d2a0:	10800a17 	ldw	r2,40(r2)
    d2a4:	10800204 	addi	r2,r2,8
    d2a8:	10800017 	ldw	r2,0(r2)
    d2ac:	1006d43a 	srli	r3,r2,16
    d2b0:	00800074 	movhi	r2,1
    d2b4:	108be004 	addi	r2,r2,12160
    d2b8:	10c01215 	stw	r3,72(r2)
    d2bc:	00800074 	movhi	r2,1
    d2c0:	108be004 	addi	r2,r2,12160
    d2c4:	10800a17 	ldw	r2,40(r2)
    d2c8:	10800304 	addi	r2,r2,12
    d2cc:	10800017 	ldw	r2,0(r2)
    d2d0:	1005d07a 	srai	r2,r2,1
    d2d4:	10c0004c 	andi	r3,r2,1
    d2d8:	00800074 	movhi	r2,1
    d2dc:	108be004 	addi	r2,r2,12160
    d2e0:	10c00d15 	stw	r3,52(r2)
    d2e4:	00800074 	movhi	r2,1
    d2e8:	108be004 	addi	r2,r2,12160
    d2ec:	10800a17 	ldw	r2,40(r2)
    d2f0:	10800304 	addi	r2,r2,12
    d2f4:	10800017 	ldw	r2,0(r2)
    d2f8:	1005d23a 	srai	r2,r2,8
    d2fc:	108003cc 	andi	r2,r2,15
    d300:	10800044 	addi	r2,r2,1
    d304:	1007883a 	mov	r3,r2
    d308:	00800074 	movhi	r2,1
    d30c:	108be004 	addi	r2,r2,12160
    d310:	10c00e15 	stw	r3,56(r2)
    d314:	00800074 	movhi	r2,1
    d318:	108be004 	addi	r2,r2,12160
    d31c:	10800a17 	ldw	r2,40(r2)
    d320:	10800304 	addi	r2,r2,12
    d324:	10800017 	ldw	r2,0(r2)
    d328:	1005d1ba 	srai	r2,r2,6
    d32c:	108000cc 	andi	r2,r2,3
    d330:	10800044 	addi	r2,r2,1
    d334:	1007883a 	mov	r3,r2
    d338:	00800074 	movhi	r2,1
    d33c:	108be004 	addi	r2,r2,12160
    d340:	10c00f15 	stw	r3,60(r2)
    d344:	00800074 	movhi	r2,1
    d348:	108be004 	addi	r2,r2,12160
    d34c:	10800e17 	ldw	r2,56(r2)
    d350:	1007883a 	mov	r3,r2
    d354:	00800074 	movhi	r2,1
    d358:	108be004 	addi	r2,r2,12160
    d35c:	10800f17 	ldw	r2,60(r2)
    d360:	1885383a 	mul	r2,r3,r2
    d364:	e0bffd05 	stb	r2,-12(fp)
    d368:	e0bffd03 	ldbu	r2,-12(fp)
    d36c:	10800268 	cmpgeui	r2,r2,9
    d370:	1000051e 	bne	r2,zero,d388 <alt_sys_init+0x228>
    d374:	00800074 	movhi	r2,1
    d378:	108be004 	addi	r2,r2,12160
    d37c:	00c00044 	movi	r3,1
    d380:	10c01015 	stw	r3,64(r2)
    d384:	00000c06 	br	d3b8 <alt_sys_init+0x258>
    d388:	e0bffd03 	ldbu	r2,-12(fp)
    d38c:	10800468 	cmpgeui	r2,r2,17
    d390:	1000051e 	bne	r2,zero,d3a8 <alt_sys_init+0x248>
    d394:	00800074 	movhi	r2,1
    d398:	108be004 	addi	r2,r2,12160
    d39c:	00c00084 	movi	r3,2
    d3a0:	10c01015 	stw	r3,64(r2)
    d3a4:	00000406 	br	d3b8 <alt_sys_init+0x258>
    d3a8:	00800074 	movhi	r2,1
    d3ac:	108be004 	addi	r2,r2,12160
    d3b0:	00c00104 	movi	r3,4
    d3b4:	10c01015 	stw	r3,64(r2)
    d3b8:	00800074 	movhi	r2,1
    d3bc:	108be004 	addi	r2,r2,12160
    d3c0:	10800a17 	ldw	r2,40(r2)
    d3c4:	10800304 	addi	r2,r2,12
    d3c8:	10800017 	ldw	r2,0(r2)
    d3cc:	1005d43a 	srai	r2,r2,16
    d3d0:	e0bffd45 	stb	r2,-11(fp)
    d3d4:	00800074 	movhi	r2,1
    d3d8:	108be004 	addi	r2,r2,12160
    d3dc:	10800a17 	ldw	r2,40(r2)
    d3e0:	10800304 	addi	r2,r2,12
    d3e4:	10800017 	ldw	r2,0(r2)
    d3e8:	1004d63a 	srli	r2,r2,24
    d3ec:	e0bffd85 	stb	r2,-10(fp)
    d3f0:	00800074 	movhi	r2,1
    d3f4:	108be004 	addi	r2,r2,12160
    d3f8:	10801017 	ldw	r2,64(r2)
    d3fc:	10800058 	cmpnei	r2,r2,1
    d400:	1000041e 	bne	r2,zero,d414 <alt_sys_init+0x2b4>
    d404:	00800074 	movhi	r2,1
    d408:	108be004 	addi	r2,r2,12160
    d40c:	10001315 	stw	zero,76(r2)
    d410:	00000e06 	br	d44c <alt_sys_init+0x2ec>
    d414:	00800074 	movhi	r2,1
    d418:	108be004 	addi	r2,r2,12160
    d41c:	10801017 	ldw	r2,64(r2)
    d420:	10800098 	cmpnei	r2,r2,2
    d424:	1000051e 	bne	r2,zero,d43c <alt_sys_init+0x2dc>
    d428:	00800074 	movhi	r2,1
    d42c:	108be004 	addi	r2,r2,12160
    d430:	00c00044 	movi	r3,1
    d434:	10c01315 	stw	r3,76(r2)
    d438:	00000406 	br	d44c <alt_sys_init+0x2ec>
    d43c:	00800074 	movhi	r2,1
    d440:	108be004 	addi	r2,r2,12160
    d444:	00c00084 	movi	r3,2
    d448:	10c01315 	stw	r3,76(r2)
    d44c:	e0bffd43 	ldbu	r2,-11(fp)
    d450:	00c00804 	movi	r3,32
    d454:	1885c83a 	sub	r2,r3,r2
    d458:	00ffffc4 	movi	r3,-1
    d45c:	1886d83a 	srl	r3,r3,r2
    d460:	00800074 	movhi	r2,1
    d464:	108be004 	addi	r2,r2,12160
    d468:	10c01415 	stw	r3,80(r2)
    d46c:	e0fffd43 	ldbu	r3,-11(fp)
    d470:	00800074 	movhi	r2,1
    d474:	108be004 	addi	r2,r2,12160
    d478:	10801317 	ldw	r2,76(r2)
    d47c:	1887883a 	add	r3,r3,r2
    d480:	00800074 	movhi	r2,1
    d484:	108be004 	addi	r2,r2,12160
    d488:	10c01515 	stw	r3,84(r2)
    d48c:	e0bffd83 	ldbu	r2,-10(fp)
    d490:	00c00804 	movi	r3,32
    d494:	1885c83a 	sub	r2,r3,r2
    d498:	00ffffc4 	movi	r3,-1
    d49c:	1886d83a 	srl	r3,r3,r2
    d4a0:	00800074 	movhi	r2,1
    d4a4:	108be004 	addi	r2,r2,12160
    d4a8:	10c01615 	stw	r3,88(r2)
    d4ac:	01000074 	movhi	r4,1
    d4b0:	210be004 	addi	r4,r4,12160
    d4b4:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    d4b8:	00800074 	movhi	r2,1
    d4bc:	108bf704 	addi	r2,r2,12252
    d4c0:	10800a17 	ldw	r2,40(r2)
    d4c4:	10800017 	ldw	r2,0(r2)
    d4c8:	1007883a 	mov	r3,r2
    d4cc:	00800074 	movhi	r2,1
    d4d0:	108bf704 	addi	r2,r2,12252
    d4d4:	10c00b15 	stw	r3,44(r2)
    d4d8:	00800074 	movhi	r2,1
    d4dc:	108bf704 	addi	r2,r2,12252
    d4e0:	10800a17 	ldw	r2,40(r2)
    d4e4:	10800104 	addi	r2,r2,4
    d4e8:	10800017 	ldw	r2,0(r2)
    d4ec:	1007883a 	mov	r3,r2
    d4f0:	00800074 	movhi	r2,1
    d4f4:	108bf704 	addi	r2,r2,12252
    d4f8:	10c00c15 	stw	r3,48(r2)
    d4fc:	00800074 	movhi	r2,1
    d500:	108bf704 	addi	r2,r2,12252
    d504:	10800a17 	ldw	r2,40(r2)
    d508:	10800204 	addi	r2,r2,8
    d50c:	10800017 	ldw	r2,0(r2)
    d510:	10ffffcc 	andi	r3,r2,65535
    d514:	00800074 	movhi	r2,1
    d518:	108bf704 	addi	r2,r2,12252
    d51c:	10c01115 	stw	r3,68(r2)
    d520:	00800074 	movhi	r2,1
    d524:	108bf704 	addi	r2,r2,12252
    d528:	10800a17 	ldw	r2,40(r2)
    d52c:	10800204 	addi	r2,r2,8
    d530:	10800017 	ldw	r2,0(r2)
    d534:	1006d43a 	srli	r3,r2,16
    d538:	00800074 	movhi	r2,1
    d53c:	108bf704 	addi	r2,r2,12252
    d540:	10c01215 	stw	r3,72(r2)
    d544:	00800074 	movhi	r2,1
    d548:	108bf704 	addi	r2,r2,12252
    d54c:	10800a17 	ldw	r2,40(r2)
    d550:	10800304 	addi	r2,r2,12
    d554:	10800017 	ldw	r2,0(r2)
    d558:	1005d07a 	srai	r2,r2,1
    d55c:	10c0004c 	andi	r3,r2,1
    d560:	00800074 	movhi	r2,1
    d564:	108bf704 	addi	r2,r2,12252
    d568:	10c00d15 	stw	r3,52(r2)
    d56c:	00800074 	movhi	r2,1
    d570:	108bf704 	addi	r2,r2,12252
    d574:	10800a17 	ldw	r2,40(r2)
    d578:	10800304 	addi	r2,r2,12
    d57c:	10800017 	ldw	r2,0(r2)
    d580:	1005d23a 	srai	r2,r2,8
    d584:	108003cc 	andi	r2,r2,15
    d588:	10800044 	addi	r2,r2,1
    d58c:	1007883a 	mov	r3,r2
    d590:	00800074 	movhi	r2,1
    d594:	108bf704 	addi	r2,r2,12252
    d598:	10c00e15 	stw	r3,56(r2)
    d59c:	00800074 	movhi	r2,1
    d5a0:	108bf704 	addi	r2,r2,12252
    d5a4:	10800a17 	ldw	r2,40(r2)
    d5a8:	10800304 	addi	r2,r2,12
    d5ac:	10800017 	ldw	r2,0(r2)
    d5b0:	1005d1ba 	srai	r2,r2,6
    d5b4:	108000cc 	andi	r2,r2,3
    d5b8:	10800044 	addi	r2,r2,1
    d5bc:	1007883a 	mov	r3,r2
    d5c0:	00800074 	movhi	r2,1
    d5c4:	108bf704 	addi	r2,r2,12252
    d5c8:	10c00f15 	stw	r3,60(r2)
    d5cc:	00800074 	movhi	r2,1
    d5d0:	108bf704 	addi	r2,r2,12252
    d5d4:	10800e17 	ldw	r2,56(r2)
    d5d8:	1007883a 	mov	r3,r2
    d5dc:	00800074 	movhi	r2,1
    d5e0:	108bf704 	addi	r2,r2,12252
    d5e4:	10800f17 	ldw	r2,60(r2)
    d5e8:	1885383a 	mul	r2,r3,r2
    d5ec:	e0bffdc5 	stb	r2,-9(fp)
    d5f0:	e0bffdc3 	ldbu	r2,-9(fp)
    d5f4:	10800268 	cmpgeui	r2,r2,9
    d5f8:	1000051e 	bne	r2,zero,d610 <alt_sys_init+0x4b0>
    d5fc:	00800074 	movhi	r2,1
    d600:	108bf704 	addi	r2,r2,12252
    d604:	00c00044 	movi	r3,1
    d608:	10c01015 	stw	r3,64(r2)
    d60c:	00000c06 	br	d640 <alt_sys_init+0x4e0>
    d610:	e0bffdc3 	ldbu	r2,-9(fp)
    d614:	10800468 	cmpgeui	r2,r2,17
    d618:	1000051e 	bne	r2,zero,d630 <alt_sys_init+0x4d0>
    d61c:	00800074 	movhi	r2,1
    d620:	108bf704 	addi	r2,r2,12252
    d624:	00c00084 	movi	r3,2
    d628:	10c01015 	stw	r3,64(r2)
    d62c:	00000406 	br	d640 <alt_sys_init+0x4e0>
    d630:	00800074 	movhi	r2,1
    d634:	108bf704 	addi	r2,r2,12252
    d638:	00c00104 	movi	r3,4
    d63c:	10c01015 	stw	r3,64(r2)
    d640:	00800074 	movhi	r2,1
    d644:	108bf704 	addi	r2,r2,12252
    d648:	10800a17 	ldw	r2,40(r2)
    d64c:	10800304 	addi	r2,r2,12
    d650:	10800017 	ldw	r2,0(r2)
    d654:	1005d43a 	srai	r2,r2,16
    d658:	e0bffe05 	stb	r2,-8(fp)
    d65c:	00800074 	movhi	r2,1
    d660:	108bf704 	addi	r2,r2,12252
    d664:	10800a17 	ldw	r2,40(r2)
    d668:	10800304 	addi	r2,r2,12
    d66c:	10800017 	ldw	r2,0(r2)
    d670:	1004d63a 	srli	r2,r2,24
    d674:	e0bffe45 	stb	r2,-7(fp)
    d678:	00800074 	movhi	r2,1
    d67c:	108bf704 	addi	r2,r2,12252
    d680:	10801017 	ldw	r2,64(r2)
    d684:	10800058 	cmpnei	r2,r2,1
    d688:	1000041e 	bne	r2,zero,d69c <alt_sys_init+0x53c>
    d68c:	00800074 	movhi	r2,1
    d690:	108bf704 	addi	r2,r2,12252
    d694:	10001315 	stw	zero,76(r2)
    d698:	00000e06 	br	d6d4 <alt_sys_init+0x574>
    d69c:	00800074 	movhi	r2,1
    d6a0:	108bf704 	addi	r2,r2,12252
    d6a4:	10801017 	ldw	r2,64(r2)
    d6a8:	10800098 	cmpnei	r2,r2,2
    d6ac:	1000051e 	bne	r2,zero,d6c4 <alt_sys_init+0x564>
    d6b0:	00800074 	movhi	r2,1
    d6b4:	108bf704 	addi	r2,r2,12252
    d6b8:	00c00044 	movi	r3,1
    d6bc:	10c01315 	stw	r3,76(r2)
    d6c0:	00000406 	br	d6d4 <alt_sys_init+0x574>
    d6c4:	00800074 	movhi	r2,1
    d6c8:	108bf704 	addi	r2,r2,12252
    d6cc:	00c00084 	movi	r3,2
    d6d0:	10c01315 	stw	r3,76(r2)
    d6d4:	e0bffe03 	ldbu	r2,-8(fp)
    d6d8:	00c00804 	movi	r3,32
    d6dc:	1885c83a 	sub	r2,r3,r2
    d6e0:	00ffffc4 	movi	r3,-1
    d6e4:	1886d83a 	srl	r3,r3,r2
    d6e8:	00800074 	movhi	r2,1
    d6ec:	108bf704 	addi	r2,r2,12252
    d6f0:	10c01415 	stw	r3,80(r2)
    d6f4:	e0fffe03 	ldbu	r3,-8(fp)
    d6f8:	00800074 	movhi	r2,1
    d6fc:	108bf704 	addi	r2,r2,12252
    d700:	10801317 	ldw	r2,76(r2)
    d704:	1887883a 	add	r3,r3,r2
    d708:	00800074 	movhi	r2,1
    d70c:	108bf704 	addi	r2,r2,12252
    d710:	10c01515 	stw	r3,84(r2)
    d714:	e0bffe43 	ldbu	r2,-7(fp)
    d718:	00c00804 	movi	r3,32
    d71c:	1885c83a 	sub	r2,r3,r2
    d720:	00ffffc4 	movi	r3,-1
    d724:	1886d83a 	srl	r3,r3,r2
    d728:	00800074 	movhi	r2,1
    d72c:	108bf704 	addi	r2,r2,12252
    d730:	10c01615 	stw	r3,88(r2)
    d734:	01000074 	movhi	r4,1
    d738:	210bf704 	addi	r4,r4,12252
    d73c:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    d740:	00800074 	movhi	r2,1
    d744:	108c0e04 	addi	r2,r2,12344
    d748:	10800a17 	ldw	r2,40(r2)
    d74c:	10800017 	ldw	r2,0(r2)
    d750:	1007883a 	mov	r3,r2
    d754:	00800074 	movhi	r2,1
    d758:	108c0e04 	addi	r2,r2,12344
    d75c:	10c00b15 	stw	r3,44(r2)
    d760:	00800074 	movhi	r2,1
    d764:	108c0e04 	addi	r2,r2,12344
    d768:	10800a17 	ldw	r2,40(r2)
    d76c:	10800104 	addi	r2,r2,4
    d770:	10800017 	ldw	r2,0(r2)
    d774:	1007883a 	mov	r3,r2
    d778:	00800074 	movhi	r2,1
    d77c:	108c0e04 	addi	r2,r2,12344
    d780:	10c00c15 	stw	r3,48(r2)
    d784:	00800074 	movhi	r2,1
    d788:	108c0e04 	addi	r2,r2,12344
    d78c:	10800a17 	ldw	r2,40(r2)
    d790:	10800204 	addi	r2,r2,8
    d794:	10800017 	ldw	r2,0(r2)
    d798:	10ffffcc 	andi	r3,r2,65535
    d79c:	00800074 	movhi	r2,1
    d7a0:	108c0e04 	addi	r2,r2,12344
    d7a4:	10c01115 	stw	r3,68(r2)
    d7a8:	00800074 	movhi	r2,1
    d7ac:	108c0e04 	addi	r2,r2,12344
    d7b0:	10800a17 	ldw	r2,40(r2)
    d7b4:	10800204 	addi	r2,r2,8
    d7b8:	10800017 	ldw	r2,0(r2)
    d7bc:	1006d43a 	srli	r3,r2,16
    d7c0:	00800074 	movhi	r2,1
    d7c4:	108c0e04 	addi	r2,r2,12344
    d7c8:	10c01215 	stw	r3,72(r2)
    d7cc:	00800074 	movhi	r2,1
    d7d0:	108c0e04 	addi	r2,r2,12344
    d7d4:	10800a17 	ldw	r2,40(r2)
    d7d8:	10800304 	addi	r2,r2,12
    d7dc:	10800017 	ldw	r2,0(r2)
    d7e0:	1005d07a 	srai	r2,r2,1
    d7e4:	10c0004c 	andi	r3,r2,1
    d7e8:	00800074 	movhi	r2,1
    d7ec:	108c0e04 	addi	r2,r2,12344
    d7f0:	10c00d15 	stw	r3,52(r2)
    d7f4:	00800074 	movhi	r2,1
    d7f8:	108c0e04 	addi	r2,r2,12344
    d7fc:	10800a17 	ldw	r2,40(r2)
    d800:	10800304 	addi	r2,r2,12
    d804:	10800017 	ldw	r2,0(r2)
    d808:	1005d23a 	srai	r2,r2,8
    d80c:	108003cc 	andi	r2,r2,15
    d810:	10800044 	addi	r2,r2,1
    d814:	1007883a 	mov	r3,r2
    d818:	00800074 	movhi	r2,1
    d81c:	108c0e04 	addi	r2,r2,12344
    d820:	10c00e15 	stw	r3,56(r2)
    d824:	00800074 	movhi	r2,1
    d828:	108c0e04 	addi	r2,r2,12344
    d82c:	10800a17 	ldw	r2,40(r2)
    d830:	10800304 	addi	r2,r2,12
    d834:	10800017 	ldw	r2,0(r2)
    d838:	1005d1ba 	srai	r2,r2,6
    d83c:	108000cc 	andi	r2,r2,3
    d840:	10800044 	addi	r2,r2,1
    d844:	1007883a 	mov	r3,r2
    d848:	00800074 	movhi	r2,1
    d84c:	108c0e04 	addi	r2,r2,12344
    d850:	10c00f15 	stw	r3,60(r2)
    d854:	00800074 	movhi	r2,1
    d858:	108c0e04 	addi	r2,r2,12344
    d85c:	10800e17 	ldw	r2,56(r2)
    d860:	1007883a 	mov	r3,r2
    d864:	00800074 	movhi	r2,1
    d868:	108c0e04 	addi	r2,r2,12344
    d86c:	10800f17 	ldw	r2,60(r2)
    d870:	1885383a 	mul	r2,r3,r2
    d874:	e0bffe85 	stb	r2,-6(fp)
    d878:	e0bffe83 	ldbu	r2,-6(fp)
    d87c:	10800268 	cmpgeui	r2,r2,9
    d880:	1000051e 	bne	r2,zero,d898 <alt_sys_init+0x738>
    d884:	00800074 	movhi	r2,1
    d888:	108c0e04 	addi	r2,r2,12344
    d88c:	00c00044 	movi	r3,1
    d890:	10c01015 	stw	r3,64(r2)
    d894:	00000c06 	br	d8c8 <alt_sys_init+0x768>
    d898:	e0bffe83 	ldbu	r2,-6(fp)
    d89c:	10800468 	cmpgeui	r2,r2,17
    d8a0:	1000051e 	bne	r2,zero,d8b8 <alt_sys_init+0x758>
    d8a4:	00800074 	movhi	r2,1
    d8a8:	108c0e04 	addi	r2,r2,12344
    d8ac:	00c00084 	movi	r3,2
    d8b0:	10c01015 	stw	r3,64(r2)
    d8b4:	00000406 	br	d8c8 <alt_sys_init+0x768>
    d8b8:	00800074 	movhi	r2,1
    d8bc:	108c0e04 	addi	r2,r2,12344
    d8c0:	00c00104 	movi	r3,4
    d8c4:	10c01015 	stw	r3,64(r2)
    d8c8:	00800074 	movhi	r2,1
    d8cc:	108c0e04 	addi	r2,r2,12344
    d8d0:	10800a17 	ldw	r2,40(r2)
    d8d4:	10800304 	addi	r2,r2,12
    d8d8:	10800017 	ldw	r2,0(r2)
    d8dc:	1005d43a 	srai	r2,r2,16
    d8e0:	e0bffec5 	stb	r2,-5(fp)
    d8e4:	00800074 	movhi	r2,1
    d8e8:	108c0e04 	addi	r2,r2,12344
    d8ec:	10800a17 	ldw	r2,40(r2)
    d8f0:	10800304 	addi	r2,r2,12
    d8f4:	10800017 	ldw	r2,0(r2)
    d8f8:	1004d63a 	srli	r2,r2,24
    d8fc:	e0bfff05 	stb	r2,-4(fp)
    d900:	00800074 	movhi	r2,1
    d904:	108c0e04 	addi	r2,r2,12344
    d908:	10801017 	ldw	r2,64(r2)
    d90c:	10800058 	cmpnei	r2,r2,1
    d910:	1000041e 	bne	r2,zero,d924 <alt_sys_init+0x7c4>
    d914:	00800074 	movhi	r2,1
    d918:	108c0e04 	addi	r2,r2,12344
    d91c:	10001315 	stw	zero,76(r2)
    d920:	00000e06 	br	d95c <alt_sys_init+0x7fc>
    d924:	00800074 	movhi	r2,1
    d928:	108c0e04 	addi	r2,r2,12344
    d92c:	10801017 	ldw	r2,64(r2)
    d930:	10800098 	cmpnei	r2,r2,2
    d934:	1000051e 	bne	r2,zero,d94c <alt_sys_init+0x7ec>
    d938:	00800074 	movhi	r2,1
    d93c:	108c0e04 	addi	r2,r2,12344
    d940:	00c00044 	movi	r3,1
    d944:	10c01315 	stw	r3,76(r2)
    d948:	00000406 	br	d95c <alt_sys_init+0x7fc>
    d94c:	00800074 	movhi	r2,1
    d950:	108c0e04 	addi	r2,r2,12344
    d954:	00c00084 	movi	r3,2
    d958:	10c01315 	stw	r3,76(r2)
    d95c:	e0bffec3 	ldbu	r2,-5(fp)
    d960:	00c00804 	movi	r3,32
    d964:	1885c83a 	sub	r2,r3,r2
    d968:	00ffffc4 	movi	r3,-1
    d96c:	1886d83a 	srl	r3,r3,r2
    d970:	00800074 	movhi	r2,1
    d974:	108c0e04 	addi	r2,r2,12344
    d978:	10c01415 	stw	r3,80(r2)
    d97c:	e0fffec3 	ldbu	r3,-5(fp)
    d980:	00800074 	movhi	r2,1
    d984:	108c0e04 	addi	r2,r2,12344
    d988:	10801317 	ldw	r2,76(r2)
    d98c:	1887883a 	add	r3,r3,r2
    d990:	00800074 	movhi	r2,1
    d994:	108c0e04 	addi	r2,r2,12344
    d998:	10c01515 	stw	r3,84(r2)
    d99c:	e0bfff03 	ldbu	r2,-4(fp)
    d9a0:	00c00804 	movi	r3,32
    d9a4:	1885c83a 	sub	r2,r3,r2
    d9a8:	00ffffc4 	movi	r3,-1
    d9ac:	1886d83a 	srl	r3,r3,r2
    d9b0:	00800074 	movhi	r2,1
    d9b4:	108c0e04 	addi	r2,r2,12344
    d9b8:	10c01615 	stw	r3,88(r2)
    d9bc:	01000074 	movhi	r4,1
    d9c0:	210c0e04 	addi	r4,r4,12344
    d9c4:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
    d9c8:	00800074 	movhi	r2,1
    d9cc:	108c2504 	addi	r2,r2,12436
    d9d0:	10800a17 	ldw	r2,40(r2)
    d9d4:	10800017 	ldw	r2,0(r2)
    d9d8:	10c003cc 	andi	r3,r2,15
    d9dc:	00800074 	movhi	r2,1
    d9e0:	108c2504 	addi	r2,r2,12436
    d9e4:	10c00b15 	stw	r3,44(r2)
    d9e8:	00800074 	movhi	r2,1
    d9ec:	108c2504 	addi	r2,r2,12436
    d9f0:	10800a17 	ldw	r2,40(r2)
    d9f4:	10800017 	ldw	r2,0(r2)
    d9f8:	1005d13a 	srai	r2,r2,4
    d9fc:	10c0004c 	andi	r3,r2,1
    da00:	00800074 	movhi	r2,1
    da04:	108c2504 	addi	r2,r2,12436
    da08:	10c00c15 	stw	r3,48(r2)
    da0c:	00800074 	movhi	r2,1
    da10:	108c2504 	addi	r2,r2,12436
    da14:	10800a17 	ldw	r2,40(r2)
    da18:	10800017 	ldw	r2,0(r2)
    da1c:	1005d17a 	srai	r2,r2,5
    da20:	10c0004c 	andi	r3,r2,1
    da24:	00800074 	movhi	r2,1
    da28:	108c2504 	addi	r2,r2,12436
    da2c:	10c00d15 	stw	r3,52(r2)
    da30:	00800074 	movhi	r2,1
    da34:	108c2504 	addi	r2,r2,12436
    da38:	10800a17 	ldw	r2,40(r2)
    da3c:	10800017 	ldw	r2,0(r2)
    da40:	1005d43a 	srai	r2,r2,16
    da44:	10c003cc 	andi	r3,r2,15
    da48:	00800074 	movhi	r2,1
    da4c:	108c2504 	addi	r2,r2,12436
    da50:	10c00e15 	stw	r3,56(r2)
    da54:	00800074 	movhi	r2,1
    da58:	108c2504 	addi	r2,r2,12436
    da5c:	10800a17 	ldw	r2,40(r2)
    da60:	10800017 	ldw	r2,0(r2)
    da64:	1005d53a 	srai	r2,r2,20
    da68:	10c0004c 	andi	r3,r2,1
    da6c:	00800074 	movhi	r2,1
    da70:	108c2504 	addi	r2,r2,12436
    da74:	10c00f15 	stw	r3,60(r2)
    da78:	00800074 	movhi	r2,1
    da7c:	108c2504 	addi	r2,r2,12436
    da80:	10800a17 	ldw	r2,40(r2)
    da84:	10800017 	ldw	r2,0(r2)
    da88:	1005d57a 	srai	r2,r2,21
    da8c:	10c0004c 	andi	r3,r2,1
    da90:	00800074 	movhi	r2,1
    da94:	108c2504 	addi	r2,r2,12436
    da98:	10c01015 	stw	r3,64(r2)
    da9c:	01000074 	movhi	r4,1
    daa0:	210c2504 	addi	r4,r4,12436
    daa4:	000d0f40 	call	d0f4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    daa8:	01000074 	movhi	r4,1
    daac:	210c3604 	addi	r4,r4,12504
    dab0:	000d0f40 	call	d0f4 <alt_dev_reg>
}
    dab4:	0001883a 	nop
    dab8:	e037883a 	mov	sp,fp
    dabc:	dfc00117 	ldw	ra,4(sp)
    dac0:	df000017 	ldw	fp,0(sp)
    dac4:	dec00204 	addi	sp,sp,8
    dac8:	f800283a 	ret

0000dacc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    dacc:	defffa04 	addi	sp,sp,-24
    dad0:	dfc00515 	stw	ra,20(sp)
    dad4:	df000415 	stw	fp,16(sp)
    dad8:	df000404 	addi	fp,sp,16
    dadc:	e13ffd15 	stw	r4,-12(fp)
    dae0:	e17ffe15 	stw	r5,-8(fp)
    dae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dae8:	e0bffd17 	ldw	r2,-12(fp)
    daec:	10800017 	ldw	r2,0(r2)
    daf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    daf4:	e0bffc17 	ldw	r2,-16(fp)
    daf8:	10c00a04 	addi	r3,r2,40
    dafc:	e0bffd17 	ldw	r2,-12(fp)
    db00:	10800217 	ldw	r2,8(r2)
    db04:	100f883a 	mov	r7,r2
    db08:	e1bfff17 	ldw	r6,-4(fp)
    db0c:	e17ffe17 	ldw	r5,-8(fp)
    db10:	1809883a 	mov	r4,r3
    db14:	000e2700 	call	e270 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    db18:	e037883a 	mov	sp,fp
    db1c:	dfc00117 	ldw	ra,4(sp)
    db20:	df000017 	ldw	fp,0(sp)
    db24:	dec00204 	addi	sp,sp,8
    db28:	f800283a 	ret

0000db2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    db2c:	defffa04 	addi	sp,sp,-24
    db30:	dfc00515 	stw	ra,20(sp)
    db34:	df000415 	stw	fp,16(sp)
    db38:	df000404 	addi	fp,sp,16
    db3c:	e13ffd15 	stw	r4,-12(fp)
    db40:	e17ffe15 	stw	r5,-8(fp)
    db44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    db48:	e0bffd17 	ldw	r2,-12(fp)
    db4c:	10800017 	ldw	r2,0(r2)
    db50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    db54:	e0bffc17 	ldw	r2,-16(fp)
    db58:	10c00a04 	addi	r3,r2,40
    db5c:	e0bffd17 	ldw	r2,-12(fp)
    db60:	10800217 	ldw	r2,8(r2)
    db64:	100f883a 	mov	r7,r2
    db68:	e1bfff17 	ldw	r6,-4(fp)
    db6c:	e17ffe17 	ldw	r5,-8(fp)
    db70:	1809883a 	mov	r4,r3
    db74:	000e52c0 	call	e52c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    db78:	e037883a 	mov	sp,fp
    db7c:	dfc00117 	ldw	ra,4(sp)
    db80:	df000017 	ldw	fp,0(sp)
    db84:	dec00204 	addi	sp,sp,8
    db88:	f800283a 	ret

0000db8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    db8c:	defffc04 	addi	sp,sp,-16
    db90:	dfc00315 	stw	ra,12(sp)
    db94:	df000215 	stw	fp,8(sp)
    db98:	df000204 	addi	fp,sp,8
    db9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dba0:	e0bfff17 	ldw	r2,-4(fp)
    dba4:	10800017 	ldw	r2,0(r2)
    dba8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    dbac:	e0bffe17 	ldw	r2,-8(fp)
    dbb0:	10c00a04 	addi	r3,r2,40
    dbb4:	e0bfff17 	ldw	r2,-4(fp)
    dbb8:	10800217 	ldw	r2,8(r2)
    dbbc:	100b883a 	mov	r5,r2
    dbc0:	1809883a 	mov	r4,r3
    dbc4:	000e1180 	call	e118 <altera_avalon_jtag_uart_close>
}
    dbc8:	e037883a 	mov	sp,fp
    dbcc:	dfc00117 	ldw	ra,4(sp)
    dbd0:	df000017 	ldw	fp,0(sp)
    dbd4:	dec00204 	addi	sp,sp,8
    dbd8:	f800283a 	ret

0000dbdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    dbdc:	defffa04 	addi	sp,sp,-24
    dbe0:	dfc00515 	stw	ra,20(sp)
    dbe4:	df000415 	stw	fp,16(sp)
    dbe8:	df000404 	addi	fp,sp,16
    dbec:	e13ffd15 	stw	r4,-12(fp)
    dbf0:	e17ffe15 	stw	r5,-8(fp)
    dbf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    dbf8:	e0bffd17 	ldw	r2,-12(fp)
    dbfc:	10800017 	ldw	r2,0(r2)
    dc00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    dc04:	e0bffc17 	ldw	r2,-16(fp)
    dc08:	10800a04 	addi	r2,r2,40
    dc0c:	e1bfff17 	ldw	r6,-4(fp)
    dc10:	e17ffe17 	ldw	r5,-8(fp)
    dc14:	1009883a 	mov	r4,r2
    dc18:	000e1800 	call	e180 <altera_avalon_jtag_uart_ioctl>
}
    dc1c:	e037883a 	mov	sp,fp
    dc20:	dfc00117 	ldw	ra,4(sp)
    dc24:	df000017 	ldw	fp,0(sp)
    dc28:	dec00204 	addi	sp,sp,8
    dc2c:	f800283a 	ret

0000dc30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    dc30:	defff204 	addi	sp,sp,-56
    dc34:	dfc00d15 	stw	ra,52(sp)
    dc38:	df000c15 	stw	fp,48(sp)
    dc3c:	df000c04 	addi	fp,sp,48
    dc40:	e13ff915 	stw	r4,-28(fp)
    dc44:	e17ffa15 	stw	r5,-24(fp)
    dc48:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    dc4c:	e0bff917 	ldw	r2,-28(fp)
    dc50:	10800c04 	addi	r2,r2,48
    dc54:	e0bff415 	stw	r2,-48(fp)
    dc58:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    dc5c:	e0bff80b 	ldhu	r2,-32(fp)
    dc60:	e0fff884 	addi	r3,fp,-30
    dc64:	180b883a 	mov	r5,r3
    dc68:	1009883a 	mov	r4,r2
    dc6c:	00073080 	call	7308 <OSFlagCreate>
    dc70:	1007883a 	mov	r3,r2
    dc74:	e0bff417 	ldw	r2,-48(fp)
    dc78:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    dc7c:	e0bff917 	ldw	r2,-28(fp)
    dc80:	10800a04 	addi	r2,r2,40
    dc84:	e0bff515 	stw	r2,-44(fp)
    dc88:	00800044 	movi	r2,1
    dc8c:	e0bff78d 	sth	r2,-34(fp)
    dc90:	e0bff78b 	ldhu	r2,-34(fp)
    dc94:	1009883a 	mov	r4,r2
    dc98:	000aae40 	call	aae4 <OSSemCreate>
    dc9c:	1007883a 	mov	r3,r2
    dca0:	e0bff517 	ldw	r2,-44(fp)
    dca4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    dca8:	e0bff917 	ldw	r2,-28(fp)
    dcac:	10800b04 	addi	r2,r2,44
    dcb0:	e0bff615 	stw	r2,-40(fp)
    dcb4:	00800044 	movi	r2,1
    dcb8:	e0bff70d 	sth	r2,-36(fp)
    dcbc:	e0bff70b 	ldhu	r2,-36(fp)
    dcc0:	1009883a 	mov	r4,r2
    dcc4:	000aae40 	call	aae4 <OSSemCreate>
    dcc8:	1007883a 	mov	r3,r2
    dccc:	e0bff617 	ldw	r2,-40(fp)
    dcd0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dcd4:	e0bff917 	ldw	r2,-28(fp)
    dcd8:	00c00044 	movi	r3,1
    dcdc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    dce0:	e0bff917 	ldw	r2,-28(fp)
    dce4:	10800017 	ldw	r2,0(r2)
    dce8:	10800104 	addi	r2,r2,4
    dcec:	1007883a 	mov	r3,r2
    dcf0:	e0bff917 	ldw	r2,-28(fp)
    dcf4:	10800817 	ldw	r2,32(r2)
    dcf8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    dcfc:	e0bffb17 	ldw	r2,-20(fp)
    dd00:	01800074 	movhi	r6,1
    dd04:	31b75b04 	addi	r6,r6,-8852
    dd08:	e17ff917 	ldw	r5,-28(fp)
    dd0c:	1009883a 	mov	r4,r2
    dd10:	00100900 	call	10090 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    dd14:	e0bff917 	ldw	r2,-28(fp)
    dd18:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    dd1c:	e0bff917 	ldw	r2,-28(fp)
    dd20:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    dd24:	d0e7e717 	ldw	r3,-24676(gp)
    dd28:	e1fff917 	ldw	r7,-28(fp)
    dd2c:	01800074 	movhi	r6,1
    dd30:	31b80504 	addi	r6,r6,-8172
    dd34:	180b883a 	mov	r5,r3
    dd38:	1009883a 	mov	r4,r2
    dd3c:	000fba00 	call	fba0 <alt_alarm_start>
    dd40:	1000040e 	bge	r2,zero,dd54 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    dd44:	e0fff917 	ldw	r3,-28(fp)
    dd48:	00a00034 	movhi	r2,32768
    dd4c:	10bfffc4 	addi	r2,r2,-1
    dd50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    dd54:	0001883a 	nop
    dd58:	e037883a 	mov	sp,fp
    dd5c:	dfc00117 	ldw	ra,4(sp)
    dd60:	df000017 	ldw	fp,0(sp)
    dd64:	dec00204 	addi	sp,sp,8
    dd68:	f800283a 	ret

0000dd6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    dd6c:	defff104 	addi	sp,sp,-60
    dd70:	dfc00e15 	stw	ra,56(sp)
    dd74:	df000d15 	stw	fp,52(sp)
    dd78:	df000d04 	addi	fp,sp,52
    dd7c:	e13ffe15 	stw	r4,-8(fp)
    dd80:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    dd84:	e0bffe17 	ldw	r2,-8(fp)
    dd88:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    dd8c:	e0bff517 	ldw	r2,-44(fp)
    dd90:	10800017 	ldw	r2,0(r2)
    dd94:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dd98:	e0bff617 	ldw	r2,-40(fp)
    dd9c:	10800104 	addi	r2,r2,4
    dda0:	10800037 	ldwio	r2,0(r2)
    dda4:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    dda8:	e0bff717 	ldw	r2,-36(fp)
    ddac:	1080c00c 	andi	r2,r2,768
    ddb0:	10009126 	beq	r2,zero,dff8 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ddb4:	e0bff717 	ldw	r2,-36(fp)
    ddb8:	1080400c 	andi	r2,r2,256
    ddbc:	10004726 	beq	r2,zero,dedc <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ddc0:	00800074 	movhi	r2,1
    ddc4:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ddc8:	e0bff517 	ldw	r2,-44(fp)
    ddcc:	10800d17 	ldw	r2,52(r2)
    ddd0:	10800044 	addi	r2,r2,1
    ddd4:	1081ffcc 	andi	r2,r2,2047
    ddd8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    dddc:	e0bff517 	ldw	r2,-44(fp)
    dde0:	10c00e17 	ldw	r3,56(r2)
    dde4:	e0bff817 	ldw	r2,-32(fp)
    dde8:	18802726 	beq	r3,r2,de88 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ddec:	e0bff617 	ldw	r2,-40(fp)
    ddf0:	10800037 	ldwio	r2,0(r2)
    ddf4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ddf8:	e0bff317 	ldw	r2,-52(fp)
    ddfc:	10a0000c 	andi	r2,r2,32768
    de00:	10002326 	beq	r2,zero,de90 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    de04:	e0bff517 	ldw	r2,-44(fp)
    de08:	10800d17 	ldw	r2,52(r2)
    de0c:	e0fff317 	ldw	r3,-52(fp)
    de10:	1809883a 	mov	r4,r3
    de14:	e0fff517 	ldw	r3,-44(fp)
    de18:	1885883a 	add	r2,r3,r2
    de1c:	10801104 	addi	r2,r2,68
    de20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    de24:	e0bff517 	ldw	r2,-44(fp)
    de28:	10800d17 	ldw	r2,52(r2)
    de2c:	10800044 	addi	r2,r2,1
    de30:	10c1ffcc 	andi	r3,r2,2047
    de34:	e0bff517 	ldw	r2,-44(fp)
    de38:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    de3c:	e0bff517 	ldw	r2,-44(fp)
    de40:	10800c17 	ldw	r2,48(r2)
    de44:	e0bffa15 	stw	r2,-24(fp)
    de48:	00800044 	movi	r2,1
    de4c:	e0bffb0d 	sth	r2,-20(fp)
    de50:	00800044 	movi	r2,1
    de54:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    de58:	d0a7d243 	ldbu	r2,-24759(gp)
    de5c:	10803fcc 	andi	r2,r2,255
    de60:	103fd926 	beq	r2,zero,ddc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddc8>
  {
    OSFlagPost (group, flags, opt, &err);
    de64:	e0bffb0b 	ldhu	r2,-20(fp)
    de68:	e0fffb83 	ldbu	r3,-18(fp)
    de6c:	e13ffcc4 	addi	r4,fp,-13
    de70:	200f883a 	mov	r7,r4
    de74:	180d883a 	mov	r6,r3
    de78:	100b883a 	mov	r5,r2
    de7c:	e13ffa17 	ldw	r4,-24(fp)
    de80:	0007ee40 	call	7ee4 <OSFlagPost>
      }
    de84:	003fd006 	br	ddc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddc8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    de88:	0001883a 	nop
    de8c:	00000106 	br	de94 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    de90:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    de94:	e0bff317 	ldw	r2,-52(fp)
    de98:	10bfffec 	andhi	r2,r2,65535
    de9c:	10000f26 	beq	r2,zero,dedc <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dea0:	e0bff517 	ldw	r2,-44(fp)
    dea4:	10c00817 	ldw	r3,32(r2)
    dea8:	00bfff84 	movi	r2,-2
    deac:	1886703a 	and	r3,r3,r2
    deb0:	e0bff517 	ldw	r2,-44(fp)
    deb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    deb8:	e0bff617 	ldw	r2,-40(fp)
    debc:	10800104 	addi	r2,r2,4
    dec0:	1007883a 	mov	r3,r2
    dec4:	e0bff517 	ldw	r2,-44(fp)
    dec8:	10800817 	ldw	r2,32(r2)
    decc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ded0:	e0bff617 	ldw	r2,-40(fp)
    ded4:	10800104 	addi	r2,r2,4
    ded8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    dedc:	e0bff717 	ldw	r2,-36(fp)
    dee0:	1080800c 	andi	r2,r2,512
    dee4:	103fac26 	beq	r2,zero,dd98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd98>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dee8:	e0bff717 	ldw	r2,-36(fp)
    deec:	1004d43a 	srli	r2,r2,16
    def0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    def4:	00002606 	br	df90 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    def8:	e0bff617 	ldw	r2,-40(fp)
    defc:	e0fff517 	ldw	r3,-44(fp)
    df00:	18c01017 	ldw	r3,64(r3)
    df04:	e13ff517 	ldw	r4,-44(fp)
    df08:	20c7883a 	add	r3,r4,r3
    df0c:	18c21104 	addi	r3,r3,2116
    df10:	18c00003 	ldbu	r3,0(r3)
    df14:	18c03fcc 	andi	r3,r3,255
    df18:	18c0201c 	xori	r3,r3,128
    df1c:	18ffe004 	addi	r3,r3,-128
    df20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    df24:	e0bff517 	ldw	r2,-44(fp)
    df28:	10801017 	ldw	r2,64(r2)
    df2c:	10800044 	addi	r2,r2,1
    df30:	10c1ffcc 	andi	r3,r2,2047
    df34:	e0bff517 	ldw	r2,-44(fp)
    df38:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    df3c:	e0bff517 	ldw	r2,-44(fp)
    df40:	10800c17 	ldw	r2,48(r2)
    df44:	e0bff915 	stw	r2,-28(fp)
    df48:	00800084 	movi	r2,2
    df4c:	e0bffc0d 	sth	r2,-16(fp)
    df50:	00800044 	movi	r2,1
    df54:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    df58:	d0a7d243 	ldbu	r2,-24759(gp)
    df5c:	10803fcc 	andi	r2,r2,255
    df60:	10000826 	beq	r2,zero,df84 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
    df64:	e0bffc0b 	ldhu	r2,-16(fp)
    df68:	e0fffc83 	ldbu	r3,-14(fp)
    df6c:	e13ffd04 	addi	r4,fp,-12
    df70:	200f883a 	mov	r7,r4
    df74:	180d883a 	mov	r6,r3
    df78:	100b883a 	mov	r5,r2
    df7c:	e13ff917 	ldw	r4,-28(fp)
    df80:	0007ee40 	call	7ee4 <OSFlagPost>

        space--;
    df84:	e0bff417 	ldw	r2,-48(fp)
    df88:	10bfffc4 	addi	r2,r2,-1
    df8c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    df90:	e0bff417 	ldw	r2,-48(fp)
    df94:	10000526 	beq	r2,zero,dfac <altera_avalon_jtag_uart_irq+0x240>
    df98:	e0bff517 	ldw	r2,-44(fp)
    df9c:	10c01017 	ldw	r3,64(r2)
    dfa0:	e0bff517 	ldw	r2,-44(fp)
    dfa4:	10800f17 	ldw	r2,60(r2)
    dfa8:	18bfd31e 	bne	r3,r2,def8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700def8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    dfac:	e0bff417 	ldw	r2,-48(fp)
    dfb0:	103f7926 	beq	r2,zero,dd98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd98>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    dfb4:	e0bff517 	ldw	r2,-44(fp)
    dfb8:	10c00817 	ldw	r3,32(r2)
    dfbc:	00bfff44 	movi	r2,-3
    dfc0:	1886703a 	and	r3,r3,r2
    dfc4:	e0bff517 	ldw	r2,-44(fp)
    dfc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dfcc:	e0bff517 	ldw	r2,-44(fp)
    dfd0:	10800017 	ldw	r2,0(r2)
    dfd4:	10800104 	addi	r2,r2,4
    dfd8:	1007883a 	mov	r3,r2
    dfdc:	e0bff517 	ldw	r2,-44(fp)
    dfe0:	10800817 	ldw	r2,32(r2)
    dfe4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dfe8:	e0bff617 	ldw	r2,-40(fp)
    dfec:	10800104 	addi	r2,r2,4
    dff0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    dff4:	003f6806 	br	dd98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd98>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    dff8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    dffc:	0001883a 	nop
    e000:	e037883a 	mov	sp,fp
    e004:	dfc00117 	ldw	ra,4(sp)
    e008:	df000017 	ldw	fp,0(sp)
    e00c:	dec00204 	addi	sp,sp,8
    e010:	f800283a 	ret

0000e014 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e014:	defff904 	addi	sp,sp,-28
    e018:	dfc00615 	stw	ra,24(sp)
    e01c:	df000515 	stw	fp,20(sp)
    e020:	df000504 	addi	fp,sp,20
    e024:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e028:	e0bfff17 	ldw	r2,-4(fp)
    e02c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e030:	e0bffb17 	ldw	r2,-20(fp)
    e034:	10800017 	ldw	r2,0(r2)
    e038:	10800104 	addi	r2,r2,4
    e03c:	10800037 	ldwio	r2,0(r2)
    e040:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e044:	e0bffc17 	ldw	r2,-16(fp)
    e048:	1081000c 	andi	r2,r2,1024
    e04c:	10000b26 	beq	r2,zero,e07c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e050:	e0bffb17 	ldw	r2,-20(fp)
    e054:	10800017 	ldw	r2,0(r2)
    e058:	10800104 	addi	r2,r2,4
    e05c:	1007883a 	mov	r3,r2
    e060:	e0bffb17 	ldw	r2,-20(fp)
    e064:	10800817 	ldw	r2,32(r2)
    e068:	10810014 	ori	r2,r2,1024
    e06c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e070:	e0bffb17 	ldw	r2,-20(fp)
    e074:	10000915 	stw	zero,36(r2)
    e078:	00002106 	br	e100 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e07c:	e0bffb17 	ldw	r2,-20(fp)
    e080:	10c00917 	ldw	r3,36(r2)
    e084:	00a00034 	movhi	r2,32768
    e088:	10bfff04 	addi	r2,r2,-4
    e08c:	10c01c36 	bltu	r2,r3,e100 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    e090:	e0bffb17 	ldw	r2,-20(fp)
    e094:	10800917 	ldw	r2,36(r2)
    e098:	10c00044 	addi	r3,r2,1
    e09c:	e0bffb17 	ldw	r2,-20(fp)
    e0a0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    e0a4:	e0bffb17 	ldw	r2,-20(fp)
    e0a8:	10c00917 	ldw	r3,36(r2)
    e0ac:	e0bffb17 	ldw	r2,-20(fp)
    e0b0:	10800117 	ldw	r2,4(r2)
    e0b4:	18801236 	bltu	r3,r2,e100 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    e0b8:	e0bffb17 	ldw	r2,-20(fp)
    e0bc:	10800c17 	ldw	r2,48(r2)
    e0c0:	e0bffd15 	stw	r2,-12(fp)
    e0c4:	00800104 	movi	r2,4
    e0c8:	e0bffe0d 	sth	r2,-8(fp)
    e0cc:	00800044 	movi	r2,1
    e0d0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    e0d4:	d0a7d243 	ldbu	r2,-24759(gp)
    e0d8:	10803fcc 	andi	r2,r2,255
    e0dc:	10000826 	beq	r2,zero,e100 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    e0e0:	e0bffe0b 	ldhu	r2,-8(fp)
    e0e4:	e0fffe83 	ldbu	r3,-6(fp)
    e0e8:	e13ffec4 	addi	r4,fp,-5
    e0ec:	200f883a 	mov	r7,r4
    e0f0:	180d883a 	mov	r6,r3
    e0f4:	100b883a 	mov	r5,r2
    e0f8:	e13ffd17 	ldw	r4,-12(fp)
    e0fc:	0007ee40 	call	7ee4 <OSFlagPost>
    e100:	d0a7e717 	ldw	r2,-24676(gp)
    }
  }

  return alt_ticks_per_second();
}
    e104:	e037883a 	mov	sp,fp
    e108:	dfc00117 	ldw	ra,4(sp)
    e10c:	df000017 	ldw	fp,0(sp)
    e110:	dec00204 	addi	sp,sp,8
    e114:	f800283a 	ret

0000e118 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e118:	defffd04 	addi	sp,sp,-12
    e11c:	df000215 	stw	fp,8(sp)
    e120:	df000204 	addi	fp,sp,8
    e124:	e13ffe15 	stw	r4,-8(fp)
    e128:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e12c:	00000506 	br	e144 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e130:	e0bfff17 	ldw	r2,-4(fp)
    e134:	1090000c 	andi	r2,r2,16384
    e138:	10000226 	beq	r2,zero,e144 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e13c:	00bffd44 	movi	r2,-11
    e140:	00000b06 	br	e170 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e144:	e0bffe17 	ldw	r2,-8(fp)
    e148:	10c01017 	ldw	r3,64(r2)
    e14c:	e0bffe17 	ldw	r2,-8(fp)
    e150:	10800f17 	ldw	r2,60(r2)
    e154:	18800526 	beq	r3,r2,e16c <altera_avalon_jtag_uart_close+0x54>
    e158:	e0bffe17 	ldw	r2,-8(fp)
    e15c:	10c00917 	ldw	r3,36(r2)
    e160:	e0bffe17 	ldw	r2,-8(fp)
    e164:	10800117 	ldw	r2,4(r2)
    e168:	18bff136 	bltu	r3,r2,e130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e130>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e16c:	0005883a 	mov	r2,zero
}
    e170:	e037883a 	mov	sp,fp
    e174:	df000017 	ldw	fp,0(sp)
    e178:	dec00104 	addi	sp,sp,4
    e17c:	f800283a 	ret

0000e180 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e180:	defffa04 	addi	sp,sp,-24
    e184:	df000515 	stw	fp,20(sp)
    e188:	df000504 	addi	fp,sp,20
    e18c:	e13ffd15 	stw	r4,-12(fp)
    e190:	e17ffe15 	stw	r5,-8(fp)
    e194:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e198:	00bff9c4 	movi	r2,-25
    e19c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e1a0:	e0bffe17 	ldw	r2,-8(fp)
    e1a4:	10da8060 	cmpeqi	r3,r2,27137
    e1a8:	1800031e 	bne	r3,zero,e1b8 <altera_avalon_jtag_uart_ioctl+0x38>
    e1ac:	109a80a0 	cmpeqi	r2,r2,27138
    e1b0:	1000181e 	bne	r2,zero,e214 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e1b4:	00002906 	br	e25c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e1b8:	e0bffd17 	ldw	r2,-12(fp)
    e1bc:	10c00117 	ldw	r3,4(r2)
    e1c0:	00a00034 	movhi	r2,32768
    e1c4:	10bfffc4 	addi	r2,r2,-1
    e1c8:	18802126 	beq	r3,r2,e250 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e1cc:	e0bfff17 	ldw	r2,-4(fp)
    e1d0:	10800017 	ldw	r2,0(r2)
    e1d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e1d8:	e0bffc17 	ldw	r2,-16(fp)
    e1dc:	10800090 	cmplti	r2,r2,2
    e1e0:	1000061e 	bne	r2,zero,e1fc <altera_avalon_jtag_uart_ioctl+0x7c>
    e1e4:	e0fffc17 	ldw	r3,-16(fp)
    e1e8:	00a00034 	movhi	r2,32768
    e1ec:	10bfffc4 	addi	r2,r2,-1
    e1f0:	18800226 	beq	r3,r2,e1fc <altera_avalon_jtag_uart_ioctl+0x7c>
    e1f4:	e0bffc17 	ldw	r2,-16(fp)
    e1f8:	00000206 	br	e204 <altera_avalon_jtag_uart_ioctl+0x84>
    e1fc:	00a00034 	movhi	r2,32768
    e200:	10bfff84 	addi	r2,r2,-2
    e204:	e0fffd17 	ldw	r3,-12(fp)
    e208:	18800115 	stw	r2,4(r3)
      rc = 0;
    e20c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e210:	00000f06 	br	e250 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e214:	e0bffd17 	ldw	r2,-12(fp)
    e218:	10c00117 	ldw	r3,4(r2)
    e21c:	00a00034 	movhi	r2,32768
    e220:	10bfffc4 	addi	r2,r2,-1
    e224:	18800c26 	beq	r3,r2,e258 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e228:	e0bffd17 	ldw	r2,-12(fp)
    e22c:	10c00917 	ldw	r3,36(r2)
    e230:	e0bffd17 	ldw	r2,-12(fp)
    e234:	10800117 	ldw	r2,4(r2)
    e238:	1885803a 	cmpltu	r2,r3,r2
    e23c:	10c03fcc 	andi	r3,r2,255
    e240:	e0bfff17 	ldw	r2,-4(fp)
    e244:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e248:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e24c:	00000206 	br	e258 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e250:	0001883a 	nop
    e254:	00000106 	br	e25c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e258:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e25c:	e0bffb17 	ldw	r2,-20(fp)
}
    e260:	e037883a 	mov	sp,fp
    e264:	df000017 	ldw	fp,0(sp)
    e268:	dec00104 	addi	sp,sp,4
    e26c:	f800283a 	ret

0000e270 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e270:	deffed04 	addi	sp,sp,-76
    e274:	dfc01215 	stw	ra,72(sp)
    e278:	df001115 	stw	fp,68(sp)
    e27c:	df001104 	addi	fp,sp,68
    e280:	e13ffc15 	stw	r4,-16(fp)
    e284:	e17ffd15 	stw	r5,-12(fp)
    e288:	e1bffe15 	stw	r6,-8(fp)
    e28c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e290:	e0bffd17 	ldw	r2,-12(fp)
    e294:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    e298:	e0bffc17 	ldw	r2,-16(fp)
    e29c:	10800a17 	ldw	r2,40(r2)
    e2a0:	e0bff815 	stw	r2,-32(fp)
    e2a4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    e2a8:	e0bff90b 	ldhu	r2,-28(fp)
    e2ac:	e0fffb04 	addi	r3,fp,-20
    e2b0:	180d883a 	mov	r6,r3
    e2b4:	100b883a 	mov	r5,r2
    e2b8:	e13ff817 	ldw	r4,-32(fp)
    e2bc:	000adfc0 	call	adfc <OSSemPend>

  while (space > 0)
    e2c0:	00006106 	br	e448 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e2c4:	e0bffc17 	ldw	r2,-16(fp)
    e2c8:	10800d17 	ldw	r2,52(r2)
    e2cc:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    e2d0:	e0bffc17 	ldw	r2,-16(fp)
    e2d4:	10800e17 	ldw	r2,56(r2)
    e2d8:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    e2dc:	e0fff317 	ldw	r3,-52(fp)
    e2e0:	e0bff417 	ldw	r2,-48(fp)
    e2e4:	18800536 	bltu	r3,r2,e2fc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    e2e8:	e0fff317 	ldw	r3,-52(fp)
    e2ec:	e0bff417 	ldw	r2,-48(fp)
    e2f0:	1885c83a 	sub	r2,r3,r2
    e2f4:	e0bff115 	stw	r2,-60(fp)
    e2f8:	00000406 	br	e30c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e2fc:	00c20004 	movi	r3,2048
    e300:	e0bff417 	ldw	r2,-48(fp)
    e304:	1885c83a 	sub	r2,r3,r2
    e308:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    e30c:	e0bff117 	ldw	r2,-60(fp)
    e310:	10001e26 	beq	r2,zero,e38c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    e314:	e0fffe17 	ldw	r3,-8(fp)
    e318:	e0bff117 	ldw	r2,-60(fp)
    e31c:	1880022e 	bgeu	r3,r2,e328 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    e320:	e0bffe17 	ldw	r2,-8(fp)
    e324:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e328:	e0bffc17 	ldw	r2,-16(fp)
    e32c:	10c01104 	addi	r3,r2,68
    e330:	e0bff417 	ldw	r2,-48(fp)
    e334:	1885883a 	add	r2,r3,r2
    e338:	e1bff117 	ldw	r6,-60(fp)
    e33c:	100b883a 	mov	r5,r2
    e340:	e13ff017 	ldw	r4,-64(fp)
    e344:	00028780 	call	2878 <memcpy>
      ptr   += n;
    e348:	e0fff017 	ldw	r3,-64(fp)
    e34c:	e0bff117 	ldw	r2,-60(fp)
    e350:	1885883a 	add	r2,r3,r2
    e354:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    e358:	e0fffe17 	ldw	r3,-8(fp)
    e35c:	e0bff117 	ldw	r2,-60(fp)
    e360:	1885c83a 	sub	r2,r3,r2
    e364:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e368:	e0fff417 	ldw	r3,-48(fp)
    e36c:	e0bff117 	ldw	r2,-60(fp)
    e370:	1885883a 	add	r2,r3,r2
    e374:	10c1ffcc 	andi	r3,r2,2047
    e378:	e0bffc17 	ldw	r2,-16(fp)
    e37c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    e380:	e0bffe17 	ldw	r2,-8(fp)
    e384:	00bfcf16 	blt	zero,r2,e2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2c4>
    e388:	00000106 	br	e390 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e38c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e390:	e0fff017 	ldw	r3,-64(fp)
    e394:	e0bffd17 	ldw	r2,-12(fp)
    e398:	18802e1e 	bne	r3,r2,e454 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e39c:	e0bfff17 	ldw	r2,-4(fp)
    e3a0:	1090000c 	andi	r2,r2,16384
    e3a4:	10002d1e 	bne	r2,zero,e45c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    e3a8:	d0a7d243 	ldbu	r2,-24759(gp)
    e3ac:	10803fcc 	andi	r2,r2,255
    e3b0:	10800058 	cmpnei	r2,r2,1
    e3b4:	1000161e 	bne	r2,zero,e410 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    e3b8:	e0bffc17 	ldw	r2,-16(fp)
    e3bc:	10800c17 	ldw	r2,48(r2)
    e3c0:	e0bff215 	stw	r2,-56(fp)
    e3c4:	00800144 	movi	r2,5
    e3c8:	e0bff98d 	sth	r2,-26(fp)
    e3cc:	00bfe0c4 	movi	r2,-125
    e3d0:	e0bffa05 	stb	r2,-24(fp)
    e3d4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    e3d8:	d0a7d243 	ldbu	r2,-24759(gp)
    e3dc:	10803fcc 	andi	r2,r2,255
    e3e0:	10001526 	beq	r2,zero,e438 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    e3e4:	e0fff98b 	ldhu	r3,-26(fp)
    e3e8:	e13ffa03 	ldbu	r4,-24(fp)
    e3ec:	e17ffa8b 	ldhu	r5,-22(fp)
    e3f0:	e0bffb44 	addi	r2,fp,-19
    e3f4:	d8800015 	stw	r2,0(sp)
    e3f8:	280f883a 	mov	r7,r5
    e3fc:	200d883a 	mov	r6,r4
    e400:	180b883a 	mov	r5,r3
    e404:	e13ff217 	ldw	r4,-56(fp)
    e408:	00078cc0 	call	78cc <OSFlagPend>
    e40c:	00000a06 	br	e438 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e410:	0001883a 	nop
    e414:	e0bffc17 	ldw	r2,-16(fp)
    e418:	10c00d17 	ldw	r3,52(r2)
    e41c:	e0bff317 	ldw	r2,-52(fp)
    e420:	1880051e 	bne	r3,r2,e438 <altera_avalon_jtag_uart_read+0x1c8>
    e424:	e0bffc17 	ldw	r2,-16(fp)
    e428:	10c00917 	ldw	r3,36(r2)
    e42c:	e0bffc17 	ldw	r2,-16(fp)
    e430:	10800117 	ldw	r2,4(r2)
    e434:	18bff736 	bltu	r3,r2,e414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e414>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e438:	e0bffc17 	ldw	r2,-16(fp)
    e43c:	10c00d17 	ldw	r3,52(r2)
    e440:	e0bff317 	ldw	r2,-52(fp)
    e444:	18800726 	beq	r3,r2,e464 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e448:	e0bffe17 	ldw	r2,-8(fp)
    e44c:	00bf9d16 	blt	zero,r2,e2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2c4>
    e450:	00000506 	br	e468 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e454:	0001883a 	nop
    e458:	00000306 	br	e468 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e45c:	0001883a 	nop
    e460:	00000106 	br	e468 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e464:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    e468:	e0bffc17 	ldw	r2,-16(fp)
    e46c:	10800a17 	ldw	r2,40(r2)
    e470:	1009883a 	mov	r4,r2
    e474:	000b1740 	call	b174 <OSSemPost>

  if (ptr != buffer)
    e478:	e0fff017 	ldw	r3,-64(fp)
    e47c:	e0bffd17 	ldw	r2,-12(fp)
    e480:	18801826 	beq	r3,r2,e4e4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e484:	0005303a 	rdctl	r2,status
    e488:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e48c:	e0fff717 	ldw	r3,-36(fp)
    e490:	00bfff84 	movi	r2,-2
    e494:	1884703a 	and	r2,r3,r2
    e498:	1001703a 	wrctl	status,r2
  
  return context;
    e49c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e4a0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e4a4:	e0bffc17 	ldw	r2,-16(fp)
    e4a8:	10800817 	ldw	r2,32(r2)
    e4ac:	10c00054 	ori	r3,r2,1
    e4b0:	e0bffc17 	ldw	r2,-16(fp)
    e4b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e4b8:	e0bffc17 	ldw	r2,-16(fp)
    e4bc:	10800017 	ldw	r2,0(r2)
    e4c0:	10800104 	addi	r2,r2,4
    e4c4:	1007883a 	mov	r3,r2
    e4c8:	e0bffc17 	ldw	r2,-16(fp)
    e4cc:	10800817 	ldw	r2,32(r2)
    e4d0:	18800035 	stwio	r2,0(r3)
    e4d4:	e0bff617 	ldw	r2,-40(fp)
    e4d8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4dc:	e0bff517 	ldw	r2,-44(fp)
    e4e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e4e4:	e0fff017 	ldw	r3,-64(fp)
    e4e8:	e0bffd17 	ldw	r2,-12(fp)
    e4ec:	18800426 	beq	r3,r2,e500 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
    e4f0:	e0fff017 	ldw	r3,-64(fp)
    e4f4:	e0bffd17 	ldw	r2,-12(fp)
    e4f8:	1885c83a 	sub	r2,r3,r2
    e4fc:	00000606 	br	e518 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    e500:	e0bfff17 	ldw	r2,-4(fp)
    e504:	1090000c 	andi	r2,r2,16384
    e508:	10000226 	beq	r2,zero,e514 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
    e50c:	00bffd44 	movi	r2,-11
    e510:	00000106 	br	e518 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    e514:	00bffec4 	movi	r2,-5
}
    e518:	e037883a 	mov	sp,fp
    e51c:	dfc00117 	ldw	ra,4(sp)
    e520:	df000017 	ldw	fp,0(sp)
    e524:	dec00204 	addi	sp,sp,8
    e528:	f800283a 	ret

0000e52c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e52c:	deffed04 	addi	sp,sp,-76
    e530:	dfc01215 	stw	ra,72(sp)
    e534:	df001115 	stw	fp,68(sp)
    e538:	df001104 	addi	fp,sp,68
    e53c:	e13ffc15 	stw	r4,-16(fp)
    e540:	e17ffd15 	stw	r5,-12(fp)
    e544:	e1bffe15 	stw	r6,-8(fp)
    e548:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e54c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e550:	e0bffd17 	ldw	r2,-12(fp)
    e554:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    e558:	e0bffc17 	ldw	r2,-16(fp)
    e55c:	10800b17 	ldw	r2,44(r2)
    e560:	e0bff815 	stw	r2,-32(fp)
    e564:	e03ff90d 	sth	zero,-28(fp)
    e568:	e0bff90b 	ldhu	r2,-28(fp)
    e56c:	e0fffb44 	addi	r3,fp,-19
    e570:	180d883a 	mov	r6,r3
    e574:	100b883a 	mov	r5,r2
    e578:	e13ff817 	ldw	r4,-32(fp)
    e57c:	000adfc0 	call	adfc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e580:	00003706 	br	e660 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e584:	e0bffc17 	ldw	r2,-16(fp)
    e588:	10800f17 	ldw	r2,60(r2)
    e58c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    e590:	e0bffc17 	ldw	r2,-16(fp)
    e594:	10801017 	ldw	r2,64(r2)
    e598:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    e59c:	e0fff417 	ldw	r3,-48(fp)
    e5a0:	e0bff017 	ldw	r2,-64(fp)
    e5a4:	1880062e 	bgeu	r3,r2,e5c0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    e5a8:	e0fff017 	ldw	r3,-64(fp)
    e5ac:	e0bff417 	ldw	r2,-48(fp)
    e5b0:	1885c83a 	sub	r2,r3,r2
    e5b4:	10bfffc4 	addi	r2,r2,-1
    e5b8:	e0bff115 	stw	r2,-60(fp)
    e5bc:	00000b06 	br	e5ec <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    e5c0:	e0bff017 	ldw	r2,-64(fp)
    e5c4:	10000526 	beq	r2,zero,e5dc <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e5c8:	00c20004 	movi	r3,2048
    e5cc:	e0bff417 	ldw	r2,-48(fp)
    e5d0:	1885c83a 	sub	r2,r3,r2
    e5d4:	e0bff115 	stw	r2,-60(fp)
    e5d8:	00000406 	br	e5ec <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e5dc:	00c1ffc4 	movi	r3,2047
    e5e0:	e0bff417 	ldw	r2,-48(fp)
    e5e4:	1885c83a 	sub	r2,r3,r2
    e5e8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    e5ec:	e0bff117 	ldw	r2,-60(fp)
    e5f0:	10001e26 	beq	r2,zero,e66c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    e5f4:	e0fffe17 	ldw	r3,-8(fp)
    e5f8:	e0bff117 	ldw	r2,-60(fp)
    e5fc:	1880022e 	bgeu	r3,r2,e608 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    e600:	e0bffe17 	ldw	r2,-8(fp)
    e604:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e608:	e0bffc17 	ldw	r2,-16(fp)
    e60c:	10c21104 	addi	r3,r2,2116
    e610:	e0bff417 	ldw	r2,-48(fp)
    e614:	1885883a 	add	r2,r3,r2
    e618:	e1bff117 	ldw	r6,-60(fp)
    e61c:	e17ffd17 	ldw	r5,-12(fp)
    e620:	1009883a 	mov	r4,r2
    e624:	00028780 	call	2878 <memcpy>
      ptr   += n;
    e628:	e0fffd17 	ldw	r3,-12(fp)
    e62c:	e0bff117 	ldw	r2,-60(fp)
    e630:	1885883a 	add	r2,r3,r2
    e634:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e638:	e0fffe17 	ldw	r3,-8(fp)
    e63c:	e0bff117 	ldw	r2,-60(fp)
    e640:	1885c83a 	sub	r2,r3,r2
    e644:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e648:	e0fff417 	ldw	r3,-48(fp)
    e64c:	e0bff117 	ldw	r2,-60(fp)
    e650:	1885883a 	add	r2,r3,r2
    e654:	10c1ffcc 	andi	r3,r2,2047
    e658:	e0bffc17 	ldw	r2,-16(fp)
    e65c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e660:	e0bffe17 	ldw	r2,-8(fp)
    e664:	00bfc716 	blt	zero,r2,e584 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e584>
    e668:	00000106 	br	e670 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e66c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e670:	0005303a 	rdctl	r2,status
    e674:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e678:	e0fff717 	ldw	r3,-36(fp)
    e67c:	00bfff84 	movi	r2,-2
    e680:	1884703a 	and	r2,r3,r2
    e684:	1001703a 	wrctl	status,r2
  
  return context;
    e688:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e68c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e690:	e0bffc17 	ldw	r2,-16(fp)
    e694:	10800817 	ldw	r2,32(r2)
    e698:	10c00094 	ori	r3,r2,2
    e69c:	e0bffc17 	ldw	r2,-16(fp)
    e6a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e6a4:	e0bffc17 	ldw	r2,-16(fp)
    e6a8:	10800017 	ldw	r2,0(r2)
    e6ac:	10800104 	addi	r2,r2,4
    e6b0:	1007883a 	mov	r3,r2
    e6b4:	e0bffc17 	ldw	r2,-16(fp)
    e6b8:	10800817 	ldw	r2,32(r2)
    e6bc:	18800035 	stwio	r2,0(r3)
    e6c0:	e0bff617 	ldw	r2,-40(fp)
    e6c4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6c8:	e0bff317 	ldw	r2,-52(fp)
    e6cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e6d0:	e0bffe17 	ldw	r2,-8(fp)
    e6d4:	00802a0e 	bge	zero,r2,e780 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
    e6d8:	e0bfff17 	ldw	r2,-4(fp)
    e6dc:	1090000c 	andi	r2,r2,16384
    e6e0:	10002a1e 	bne	r2,zero,e78c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    e6e4:	d0a7d243 	ldbu	r2,-24759(gp)
    e6e8:	10803fcc 	andi	r2,r2,255
    e6ec:	10800058 	cmpnei	r2,r2,1
    e6f0:	1000161e 	bne	r2,zero,e74c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    e6f4:	e0bffc17 	ldw	r2,-16(fp)
    e6f8:	10800c17 	ldw	r2,48(r2)
    e6fc:	e0bff515 	stw	r2,-44(fp)
    e700:	00800184 	movi	r2,6
    e704:	e0bff98d 	sth	r2,-26(fp)
    e708:	00bfe0c4 	movi	r2,-125
    e70c:	e0bffa05 	stb	r2,-24(fp)
    e710:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    e714:	d0a7d243 	ldbu	r2,-24759(gp)
    e718:	10803fcc 	andi	r2,r2,255
    e71c:	10001526 	beq	r2,zero,e774 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    e720:	e0fff98b 	ldhu	r3,-26(fp)
    e724:	e13ffa03 	ldbu	r4,-24(fp)
    e728:	e17ffa8b 	ldhu	r5,-22(fp)
    e72c:	e0bffb04 	addi	r2,fp,-20
    e730:	d8800015 	stw	r2,0(sp)
    e734:	280f883a 	mov	r7,r5
    e738:	200d883a 	mov	r6,r4
    e73c:	180b883a 	mov	r5,r3
    e740:	e13ff517 	ldw	r4,-44(fp)
    e744:	00078cc0 	call	78cc <OSFlagPend>
    e748:	00000a06 	br	e774 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e74c:	0001883a 	nop
    e750:	e0bffc17 	ldw	r2,-16(fp)
    e754:	10c01017 	ldw	r3,64(r2)
    e758:	e0bff017 	ldw	r2,-64(fp)
    e75c:	1880051e 	bne	r3,r2,e774 <altera_avalon_jtag_uart_write+0x248>
    e760:	e0bffc17 	ldw	r2,-16(fp)
    e764:	10c00917 	ldw	r3,36(r2)
    e768:	e0bffc17 	ldw	r2,-16(fp)
    e76c:	10800117 	ldw	r2,4(r2)
    e770:	18bff736 	bltu	r3,r2,e750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e750>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e774:	e0bffc17 	ldw	r2,-16(fp)
    e778:	10800917 	ldw	r2,36(r2)
    e77c:	1000051e 	bne	r2,zero,e794 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
    e780:	e0bffe17 	ldw	r2,-8(fp)
    e784:	00bfb616 	blt	zero,r2,e660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e660>
    e788:	00000306 	br	e798 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e78c:	0001883a 	nop
    e790:	00000106 	br	e798 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e794:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    e798:	e0bffc17 	ldw	r2,-16(fp)
    e79c:	10800b17 	ldw	r2,44(r2)
    e7a0:	1009883a 	mov	r4,r2
    e7a4:	000b1740 	call	b174 <OSSemPost>

  if (ptr != start)
    e7a8:	e0fffd17 	ldw	r3,-12(fp)
    e7ac:	e0bff217 	ldw	r2,-56(fp)
    e7b0:	18800426 	beq	r3,r2,e7c4 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    e7b4:	e0fffd17 	ldw	r3,-12(fp)
    e7b8:	e0bff217 	ldw	r2,-56(fp)
    e7bc:	1885c83a 	sub	r2,r3,r2
    e7c0:	00000606 	br	e7dc <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    e7c4:	e0bfff17 	ldw	r2,-4(fp)
    e7c8:	1090000c 	andi	r2,r2,16384
    e7cc:	10000226 	beq	r2,zero,e7d8 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    e7d0:	00bffd44 	movi	r2,-11
    e7d4:	00000106 	br	e7dc <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e7d8:	00bffec4 	movi	r2,-5
}
    e7dc:	e037883a 	mov	sp,fp
    e7e0:	dfc00117 	ldw	ra,4(sp)
    e7e4:	df000017 	ldw	fp,0(sp)
    e7e8:	dec00204 	addi	sp,sp,8
    e7ec:	f800283a 	ret

0000e7f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e7f0:	defff904 	addi	sp,sp,-28
    e7f4:	dfc00615 	stw	ra,24(sp)
    e7f8:	df000515 	stw	fp,20(sp)
    e7fc:	df000504 	addi	fp,sp,20
    e800:	e13ffe15 	stw	r4,-8(fp)
    e804:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e808:	0007883a 	mov	r3,zero
    e80c:	e0bffe17 	ldw	r2,-8(fp)
    e810:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e814:	e0bffe17 	ldw	r2,-8(fp)
    e818:	10800104 	addi	r2,r2,4
    e81c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e820:	0005303a 	rdctl	r2,status
    e824:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e828:	e0fffc17 	ldw	r3,-16(fp)
    e82c:	00bfff84 	movi	r2,-2
    e830:	1884703a 	and	r2,r3,r2
    e834:	1001703a 	wrctl	status,r2
  
  return context;
    e838:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e83c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    e840:	00105000 	call	10500 <alt_tick>
    e844:	e0bffb17 	ldw	r2,-20(fp)
    e848:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e84c:	e0bffd17 	ldw	r2,-12(fp)
    e850:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e854:	0001883a 	nop
    e858:	e037883a 	mov	sp,fp
    e85c:	dfc00117 	ldw	ra,4(sp)
    e860:	df000017 	ldw	fp,0(sp)
    e864:	dec00204 	addi	sp,sp,8
    e868:	f800283a 	ret

0000e86c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e86c:	defff904 	addi	sp,sp,-28
    e870:	dfc00615 	stw	ra,24(sp)
    e874:	df000515 	stw	fp,20(sp)
    e878:	df000504 	addi	fp,sp,20
    e87c:	e13ffc15 	stw	r4,-16(fp)
    e880:	e17ffd15 	stw	r5,-12(fp)
    e884:	e1bffe15 	stw	r6,-8(fp)
    e888:	e1ffff15 	stw	r7,-4(fp)
    e88c:	e0bfff17 	ldw	r2,-4(fp)
    e890:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e894:	d0a7e717 	ldw	r2,-24676(gp)
    e898:	1000021e 	bne	r2,zero,e8a4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    e89c:	e0bffb17 	ldw	r2,-20(fp)
    e8a0:	d0a7e715 	stw	r2,-24676(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e8a4:	e0bffc17 	ldw	r2,-16(fp)
    e8a8:	10800104 	addi	r2,r2,4
    e8ac:	00c001c4 	movi	r3,7
    e8b0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e8b4:	01800074 	movhi	r6,1
    e8b8:	31b9fc04 	addi	r6,r6,-6160
    e8bc:	e17ffc17 	ldw	r5,-16(fp)
    e8c0:	e13ffe17 	ldw	r4,-8(fp)
    e8c4:	00100900 	call	10090 <alt_irq_register>
#endif  
}
    e8c8:	0001883a 	nop
    e8cc:	e037883a 	mov	sp,fp
    e8d0:	dfc00117 	ldw	ra,4(sp)
    e8d4:	df000017 	ldw	fp,0(sp)
    e8d8:	dec00204 	addi	sp,sp,8
    e8dc:	f800283a 	ret

0000e8e0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    e8e0:	defffc04 	addi	sp,sp,-16
    e8e4:	df000315 	stw	fp,12(sp)
    e8e8:	df000304 	addi	fp,sp,12
    e8ec:	e13ffe15 	stw	r4,-8(fp)
    e8f0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    e8f4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    e8f8:	e0bfff17 	ldw	r2,-4(fp)
    e8fc:	1000061e 	bne	r2,zero,e918 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    e900:	e0bffe17 	ldw	r2,-8(fp)
    e904:	1007883a 	mov	r3,r2
    e908:	e0bffd03 	ldbu	r2,-12(fp)
    e90c:	1884b03a 	or	r2,r3,r2
    e910:	e0bffd05 	stb	r2,-12(fp)
    e914:	00000806 	br	e938 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    e918:	e0bffe17 	ldw	r2,-8(fp)
    e91c:	1007883a 	mov	r3,r2
    e920:	e0bffd03 	ldbu	r2,-12(fp)
    e924:	1884b03a 	or	r2,r3,r2
    e928:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    e92c:	e0bffd03 	ldbu	r2,-12(fp)
    e930:	10801014 	ori	r2,r2,64
    e934:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    e938:	e0fffd03 	ldbu	r3,-12(fp)
    e93c:	00bfe004 	movi	r2,-128
    e940:	1884b03a 	or	r2,r3,r2
}
    e944:	e037883a 	mov	sp,fp
    e948:	df000017 	ldw	fp,0(sp)
    e94c:	dec00104 	addi	sp,sp,4
    e950:	f800283a 	ret

0000e954 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    e954:	defffd04 	addi	sp,sp,-12
    e958:	df000215 	stw	fp,8(sp)
    e95c:	df000204 	addi	fp,sp,8
    e960:	e13ffe15 	stw	r4,-8(fp)
    e964:	2805883a 	mov	r2,r5
    e968:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    e96c:	e0bffe17 	ldw	r2,-8(fp)
    e970:	10800a17 	ldw	r2,40(r2)
    e974:	1007883a 	mov	r3,r2
    e978:	e0bfff03 	ldbu	r2,-4(fp)
    e97c:	18800025 	stbio	r2,0(r3)
}
    e980:	0001883a 	nop
    e984:	e037883a 	mov	sp,fp
    e988:	df000017 	ldw	fp,0(sp)
    e98c:	dec00104 	addi	sp,sp,4
    e990:	f800283a 	ret

0000e994 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    e994:	defffe04 	addi	sp,sp,-8
    e998:	df000115 	stw	fp,4(sp)
    e99c:	df000104 	addi	fp,sp,4
    e9a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    e9a4:	e0bfff17 	ldw	r2,-4(fp)
    e9a8:	10800a17 	ldw	r2,40(r2)
    e9ac:	1007883a 	mov	r3,r2
    e9b0:	00800044 	movi	r2,1
    e9b4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    e9b8:	0001883a 	nop
    e9bc:	e037883a 	mov	sp,fp
    e9c0:	df000017 	ldw	fp,0(sp)
    e9c4:	dec00104 	addi	sp,sp,4
    e9c8:	f800283a 	ret

0000e9cc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    e9cc:	defffc04 	addi	sp,sp,-16
    e9d0:	dfc00315 	stw	ra,12(sp)
    e9d4:	df000215 	stw	fp,8(sp)
    e9d8:	df000204 	addi	fp,sp,8
    e9dc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    e9e0:	d1600804 	addi	r5,gp,-32736
    e9e4:	e13fff17 	ldw	r4,-4(fp)
    e9e8:	000fe8c0 	call	fe8c <alt_find_dev>
    e9ec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e9f0:	e0bffe17 	ldw	r2,-8(fp)
}
    e9f4:	e037883a 	mov	sp,fp
    e9f8:	dfc00117 	ldw	ra,4(sp)
    e9fc:	df000017 	ldw	fp,0(sp)
    ea00:	dec00204 	addi	sp,sp,8
    ea04:	f800283a 	ret

0000ea08 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    ea08:	defffb04 	addi	sp,sp,-20
    ea0c:	df000415 	stw	fp,16(sp)
    ea10:	df000404 	addi	fp,sp,16
    ea14:	e13ffd15 	stw	r4,-12(fp)
    ea18:	e17ffe15 	stw	r5,-8(fp)
    ea1c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    ea20:	e03ffc15 	stw	zero,-16(fp)
    ea24:	00000f06 	br	ea64 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    ea28:	e0bffd17 	ldw	r2,-12(fp)
    ea2c:	10800a17 	ldw	r2,40(r2)
    ea30:	10800044 	addi	r2,r2,1
    ea34:	1009883a 	mov	r4,r2
    ea38:	e0fffe17 	ldw	r3,-8(fp)
    ea3c:	e0bffc17 	ldw	r2,-16(fp)
    ea40:	1885883a 	add	r2,r3,r2
    ea44:	10800003 	ldbu	r2,0(r2)
    ea48:	10803fcc 	andi	r2,r2,255
    ea4c:	1080201c 	xori	r2,r2,128
    ea50:	10bfe004 	addi	r2,r2,-128
    ea54:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    ea58:	e0bffc17 	ldw	r2,-16(fp)
    ea5c:	10800044 	addi	r2,r2,1
    ea60:	e0bffc15 	stw	r2,-16(fp)
    ea64:	e0fffc17 	ldw	r3,-16(fp)
    ea68:	e0bfff17 	ldw	r2,-4(fp)
    ea6c:	18bfee36 	bltu	r3,r2,ea28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea28>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    ea70:	0001883a 	nop
    ea74:	e037883a 	mov	sp,fp
    ea78:	df000017 	ldw	fp,0(sp)
    ea7c:	dec00104 	addi	sp,sp,4
    ea80:	f800283a 	ret

0000ea84 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    ea84:	defffd04 	addi	sp,sp,-12
    ea88:	df000215 	stw	fp,8(sp)
    ea8c:	df000204 	addi	fp,sp,8
    ea90:	e13ffe15 	stw	r4,-8(fp)
    ea94:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    ea98:	00000d06 	br	ead0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    ea9c:	e0bffe17 	ldw	r2,-8(fp)
    eaa0:	10800a17 	ldw	r2,40(r2)
    eaa4:	10800044 	addi	r2,r2,1
    eaa8:	1007883a 	mov	r3,r2
    eaac:	e0bfff17 	ldw	r2,-4(fp)
    eab0:	10800003 	ldbu	r2,0(r2)
    eab4:	10803fcc 	andi	r2,r2,255
    eab8:	1080201c 	xori	r2,r2,128
    eabc:	10bfe004 	addi	r2,r2,-128
    eac0:	18800025 	stbio	r2,0(r3)
		++ptr;
    eac4:	e0bfff17 	ldw	r2,-4(fp)
    eac8:	10800044 	addi	r2,r2,1
    eacc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    ead0:	e0bfff17 	ldw	r2,-4(fp)
    ead4:	10800003 	ldbu	r2,0(r2)
    ead8:	10803fcc 	andi	r2,r2,255
    eadc:	1080201c 	xori	r2,r2,128
    eae0:	10bfe004 	addi	r2,r2,-128
    eae4:	103fed1e 	bne	r2,zero,ea9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea9c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    eae8:	0001883a 	nop
    eaec:	e037883a 	mov	sp,fp
    eaf0:	df000017 	ldw	fp,0(sp)
    eaf4:	dec00104 	addi	sp,sp,4
    eaf8:	f800283a 	ret

0000eafc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    eafc:	defffb04 	addi	sp,sp,-20
    eb00:	dfc00415 	stw	ra,16(sp)
    eb04:	df000315 	stw	fp,12(sp)
    eb08:	df000304 	addi	fp,sp,12
    eb0c:	e13ffd15 	stw	r4,-12(fp)
    eb10:	e17ffe15 	stw	r5,-8(fp)
    eb14:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    eb18:	e0bffd17 	ldw	r2,-12(fp)
    eb1c:	10800017 	ldw	r2,0(r2)
    eb20:	e0ffff17 	ldw	r3,-4(fp)
    eb24:	180d883a 	mov	r6,r3
    eb28:	e17ffe17 	ldw	r5,-8(fp)
    eb2c:	1009883a 	mov	r4,r2
    eb30:	000ea080 	call	ea08 <alt_up_character_lcd_write>
	return 0;
    eb34:	0005883a 	mov	r2,zero
}
    eb38:	e037883a 	mov	sp,fp
    eb3c:	dfc00117 	ldw	ra,4(sp)
    eb40:	df000017 	ldw	fp,0(sp)
    eb44:	dec00204 	addi	sp,sp,8
    eb48:	f800283a 	ret

0000eb4c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    eb4c:	defffa04 	addi	sp,sp,-24
    eb50:	dfc00515 	stw	ra,20(sp)
    eb54:	df000415 	stw	fp,16(sp)
    eb58:	df000404 	addi	fp,sp,16
    eb5c:	e13ffd15 	stw	r4,-12(fp)
    eb60:	e17ffe15 	stw	r5,-8(fp)
    eb64:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    eb68:	e0bffe17 	ldw	r2,-8(fp)
    eb6c:	10800a28 	cmpgeui	r2,r2,40
    eb70:	1000031e 	bne	r2,zero,eb80 <alt_up_character_lcd_set_cursor_pos+0x34>
    eb74:	e0bfff17 	ldw	r2,-4(fp)
    eb78:	108000b0 	cmpltui	r2,r2,2
    eb7c:	1000021e 	bne	r2,zero,eb88 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    eb80:	00bfffc4 	movi	r2,-1
    eb84:	00000906 	br	ebac <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    eb88:	e17fff17 	ldw	r5,-4(fp)
    eb8c:	e13ffe17 	ldw	r4,-8(fp)
    eb90:	000e8e00 	call	e8e0 <get_DDRAM_addr>
    eb94:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    eb98:	e0bffc03 	ldbu	r2,-16(fp)
    eb9c:	100b883a 	mov	r5,r2
    eba0:	e13ffd17 	ldw	r4,-12(fp)
    eba4:	000e9540 	call	e954 <alt_up_character_lcd_send_cmd>
	return 0;
    eba8:	0005883a 	mov	r2,zero
}
    ebac:	e037883a 	mov	sp,fp
    ebb0:	dfc00117 	ldw	ra,4(sp)
    ebb4:	df000017 	ldw	fp,0(sp)
    ebb8:	dec00204 	addi	sp,sp,8
    ebbc:	f800283a 	ret

0000ebc0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    ebc0:	defffb04 	addi	sp,sp,-20
    ebc4:	dfc00415 	stw	ra,16(sp)
    ebc8:	df000315 	stw	fp,12(sp)
    ebcc:	df000304 	addi	fp,sp,12
    ebd0:	e13ffe15 	stw	r4,-8(fp)
    ebd4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    ebd8:	e0bfff17 	ldw	r2,-4(fp)
    ebdc:	10001526 	beq	r2,zero,ec34 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    ebe0:	e0bfff17 	ldw	r2,-4(fp)
    ebe4:	0080020e 	bge	zero,r2,ebf0 <alt_up_character_lcd_shift_cursor+0x30>
    ebe8:	00800504 	movi	r2,20
    ebec:	00000106 	br	ebf4 <alt_up_character_lcd_shift_cursor+0x34>
    ebf0:	00800404 	movi	r2,16
    ebf4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    ebf8:	e0bfff17 	ldw	r2,-4(fp)
    ebfc:	1000010e 	bge	r2,zero,ec04 <alt_up_character_lcd_shift_cursor+0x44>
    ec00:	0085c83a 	sub	r2,zero,r2
    ec04:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ec08:	00000406 	br	ec1c <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ec0c:	e0bffd43 	ldbu	r2,-11(fp)
    ec10:	100b883a 	mov	r5,r2
    ec14:	e13ffe17 	ldw	r4,-8(fp)
    ec18:	000e9540 	call	e954 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ec1c:	e0bffd03 	ldbu	r2,-12(fp)
    ec20:	10ffffc4 	addi	r3,r2,-1
    ec24:	e0fffd05 	stb	r3,-12(fp)
    ec28:	10803fcc 	andi	r2,r2,255
    ec2c:	103ff71e 	bne	r2,zero,ec0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec0c>
    ec30:	00000106 	br	ec38 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    ec34:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    ec38:	e037883a 	mov	sp,fp
    ec3c:	dfc00117 	ldw	ra,4(sp)
    ec40:	df000017 	ldw	fp,0(sp)
    ec44:	dec00204 	addi	sp,sp,8
    ec48:	f800283a 	ret

0000ec4c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    ec4c:	defffb04 	addi	sp,sp,-20
    ec50:	dfc00415 	stw	ra,16(sp)
    ec54:	df000315 	stw	fp,12(sp)
    ec58:	df000304 	addi	fp,sp,12
    ec5c:	e13ffe15 	stw	r4,-8(fp)
    ec60:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    ec64:	e0bfff17 	ldw	r2,-4(fp)
    ec68:	10001526 	beq	r2,zero,ecc0 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    ec6c:	e0bfff17 	ldw	r2,-4(fp)
    ec70:	0080020e 	bge	zero,r2,ec7c <alt_up_character_lcd_shift_display+0x30>
    ec74:	00800704 	movi	r2,28
    ec78:	00000106 	br	ec80 <alt_up_character_lcd_shift_display+0x34>
    ec7c:	00800604 	movi	r2,24
    ec80:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    ec84:	e0bfff17 	ldw	r2,-4(fp)
    ec88:	1000010e 	bge	r2,zero,ec90 <alt_up_character_lcd_shift_display+0x44>
    ec8c:	0085c83a 	sub	r2,zero,r2
    ec90:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ec94:	00000406 	br	eca8 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ec98:	e0bffd43 	ldbu	r2,-11(fp)
    ec9c:	100b883a 	mov	r5,r2
    eca0:	e13ffe17 	ldw	r4,-8(fp)
    eca4:	000e9540 	call	e954 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    eca8:	e0bffd03 	ldbu	r2,-12(fp)
    ecac:	10ffffc4 	addi	r3,r2,-1
    ecb0:	e0fffd05 	stb	r3,-12(fp)
    ecb4:	10803fcc 	andi	r2,r2,255
    ecb8:	103ff71e 	bne	r2,zero,ec98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec98>
    ecbc:	00000106 	br	ecc4 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    ecc0:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    ecc4:	e037883a 	mov	sp,fp
    ecc8:	dfc00117 	ldw	ra,4(sp)
    eccc:	df000017 	ldw	fp,0(sp)
    ecd0:	dec00204 	addi	sp,sp,8
    ecd4:	f800283a 	ret

0000ecd8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    ecd8:	defffa04 	addi	sp,sp,-24
    ecdc:	dfc00515 	stw	ra,20(sp)
    ece0:	df000415 	stw	fp,16(sp)
    ece4:	df000404 	addi	fp,sp,16
    ece8:	e13ffd15 	stw	r4,-12(fp)
    ecec:	e17ffe15 	stw	r5,-8(fp)
    ecf0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    ecf4:	e0bffe17 	ldw	r2,-8(fp)
    ecf8:	10800a28 	cmpgeui	r2,r2,40
    ecfc:	1000031e 	bne	r2,zero,ed0c <alt_up_character_lcd_erase_pos+0x34>
    ed00:	e0bfff17 	ldw	r2,-4(fp)
    ed04:	108000b0 	cmpltui	r2,r2,2
    ed08:	1000021e 	bne	r2,zero,ed14 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    ed0c:	00bfffc4 	movi	r2,-1
    ed10:	00000f06 	br	ed50 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    ed14:	e17fff17 	ldw	r5,-4(fp)
    ed18:	e13ffe17 	ldw	r4,-8(fp)
    ed1c:	000e8e00 	call	e8e0 <get_DDRAM_addr>
    ed20:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    ed24:	e0bffc03 	ldbu	r2,-16(fp)
    ed28:	100b883a 	mov	r5,r2
    ed2c:	e13ffd17 	ldw	r4,-12(fp)
    ed30:	000e9540 	call	e954 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    ed34:	e0bffd17 	ldw	r2,-12(fp)
    ed38:	10800a17 	ldw	r2,40(r2)
    ed3c:	10800044 	addi	r2,r2,1
    ed40:	1007883a 	mov	r3,r2
    ed44:	00800084 	movi	r2,2
    ed48:	18800025 	stbio	r2,0(r3)
	return 0;
    ed4c:	0005883a 	mov	r2,zero
}
    ed50:	e037883a 	mov	sp,fp
    ed54:	dfc00117 	ldw	ra,4(sp)
    ed58:	df000017 	ldw	fp,0(sp)
    ed5c:	dec00204 	addi	sp,sp,8
    ed60:	f800283a 	ret

0000ed64 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    ed64:	defffd04 	addi	sp,sp,-12
    ed68:	dfc00215 	stw	ra,8(sp)
    ed6c:	df000115 	stw	fp,4(sp)
    ed70:	df000104 	addi	fp,sp,4
    ed74:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    ed78:	01400304 	movi	r5,12
    ed7c:	e13fff17 	ldw	r4,-4(fp)
    ed80:	000e9540 	call	e954 <alt_up_character_lcd_send_cmd>
}
    ed84:	0001883a 	nop
    ed88:	e037883a 	mov	sp,fp
    ed8c:	dfc00117 	ldw	ra,4(sp)
    ed90:	df000017 	ldw	fp,0(sp)
    ed94:	dec00204 	addi	sp,sp,8
    ed98:	f800283a 	ret

0000ed9c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    ed9c:	defffd04 	addi	sp,sp,-12
    eda0:	dfc00215 	stw	ra,8(sp)
    eda4:	df000115 	stw	fp,4(sp)
    eda8:	df000104 	addi	fp,sp,4
    edac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    edb0:	014003c4 	movi	r5,15
    edb4:	e13fff17 	ldw	r4,-4(fp)
    edb8:	000e9540 	call	e954 <alt_up_character_lcd_send_cmd>
}
    edbc:	0001883a 	nop
    edc0:	e037883a 	mov	sp,fp
    edc4:	dfc00117 	ldw	ra,4(sp)
    edc8:	df000017 	ldw	fp,0(sp)
    edcc:	dec00204 	addi	sp,sp,8
    edd0:	f800283a 	ret

0000edd4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    edd4:	defffd04 	addi	sp,sp,-12
    edd8:	df000215 	stw	fp,8(sp)
    eddc:	df000204 	addi	fp,sp,8
    ede0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    ede4:	e0bfff17 	ldw	r2,-4(fp)
    ede8:	10800a17 	ldw	r2,40(r2)
    edec:	10800104 	addi	r2,r2,4
    edf0:	10800037 	ldwio	r2,0(r2)
    edf4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    edf8:	e0bffe17 	ldw	r2,-8(fp)
    edfc:	10800054 	ori	r2,r2,1
    ee00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    ee04:	e0bfff17 	ldw	r2,-4(fp)
    ee08:	10800a17 	ldw	r2,40(r2)
    ee0c:	10800104 	addi	r2,r2,4
    ee10:	1007883a 	mov	r3,r2
    ee14:	e0bffe17 	ldw	r2,-8(fp)
    ee18:	18800035 	stwio	r2,0(r3)
}
    ee1c:	0001883a 	nop
    ee20:	e037883a 	mov	sp,fp
    ee24:	df000017 	ldw	fp,0(sp)
    ee28:	dec00104 	addi	sp,sp,4
    ee2c:	f800283a 	ret

0000ee30 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    ee30:	defffd04 	addi	sp,sp,-12
    ee34:	df000215 	stw	fp,8(sp)
    ee38:	df000204 	addi	fp,sp,8
    ee3c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    ee40:	e0bfff17 	ldw	r2,-4(fp)
    ee44:	10800a17 	ldw	r2,40(r2)
    ee48:	10800104 	addi	r2,r2,4
    ee4c:	10800037 	ldwio	r2,0(r2)
    ee50:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    ee54:	e0fffe17 	ldw	r3,-8(fp)
    ee58:	00bfff84 	movi	r2,-2
    ee5c:	1884703a 	and	r2,r3,r2
    ee60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    ee64:	e0bfff17 	ldw	r2,-4(fp)
    ee68:	10800a17 	ldw	r2,40(r2)
    ee6c:	10800104 	addi	r2,r2,4
    ee70:	1007883a 	mov	r3,r2
    ee74:	e0bffe17 	ldw	r2,-8(fp)
    ee78:	18800035 	stwio	r2,0(r3)
}
    ee7c:	0001883a 	nop
    ee80:	e037883a 	mov	sp,fp
    ee84:	df000017 	ldw	fp,0(sp)
    ee88:	dec00104 	addi	sp,sp,4
    ee8c:	f800283a 	ret

0000ee90 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    ee90:	defffd04 	addi	sp,sp,-12
    ee94:	df000215 	stw	fp,8(sp)
    ee98:	df000204 	addi	fp,sp,8
    ee9c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    eea0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    eea4:	e0bfff17 	ldw	r2,-4(fp)
    eea8:	10800a17 	ldw	r2,40(r2)
    eeac:	10800084 	addi	r2,r2,2
    eeb0:	1080002b 	ldhuio	r2,0(r2)
    eeb4:	10bfffcc 	andi	r2,r2,65535
    eeb8:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    eebc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    eec0:	e037883a 	mov	sp,fp
    eec4:	df000017 	ldw	fp,0(sp)
    eec8:	dec00104 	addi	sp,sp,4
    eecc:	f800283a 	ret

0000eed0 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    eed0:	defffd04 	addi	sp,sp,-12
    eed4:	df000215 	stw	fp,8(sp)
    eed8:	df000204 	addi	fp,sp,8
    eedc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    eee0:	e0bfff17 	ldw	r2,-4(fp)
    eee4:	10800a17 	ldw	r2,40(r2)
    eee8:	10800104 	addi	r2,r2,4
    eeec:	10800037 	ldwio	r2,0(r2)
    eef0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    eef4:	e0bffe17 	ldw	r2,-8(fp)
    eef8:	1004d43a 	srli	r2,r2,16
}
    eefc:	e037883a 	mov	sp,fp
    ef00:	df000017 	ldw	fp,0(sp)
    ef04:	dec00104 	addi	sp,sp,4
    ef08:	f800283a 	ret

0000ef0c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    ef0c:	defffd04 	addi	sp,sp,-12
    ef10:	df000215 	stw	fp,8(sp)
    ef14:	df000204 	addi	fp,sp,8
    ef18:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    ef1c:	e0bfff17 	ldw	r2,-4(fp)
    ef20:	1080800c 	andi	r2,r2,512
    ef24:	1004d27a 	srli	r2,r2,9
    ef28:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    ef2c:	e0bffe17 	ldw	r2,-8(fp)
    ef30:	10000226 	beq	r2,zero,ef3c <alt_up_irda_check_parity+0x30>
    ef34:	00bfffc4 	movi	r2,-1
    ef38:	00000106 	br	ef40 <alt_up_irda_check_parity+0x34>
    ef3c:	0005883a 	mov	r2,zero
}
    ef40:	e037883a 	mov	sp,fp
    ef44:	df000017 	ldw	fp,0(sp)
    ef48:	dec00104 	addi	sp,sp,4
    ef4c:	f800283a 	ret

0000ef50 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    ef50:	defffd04 	addi	sp,sp,-12
    ef54:	df000215 	stw	fp,8(sp)
    ef58:	df000204 	addi	fp,sp,8
    ef5c:	e13ffe15 	stw	r4,-8(fp)
    ef60:	2805883a 	mov	r2,r5
    ef64:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    ef68:	e0bffe17 	ldw	r2,-8(fp)
    ef6c:	10800a17 	ldw	r2,40(r2)
    ef70:	1007883a 	mov	r3,r2
    ef74:	e0bfff03 	ldbu	r2,-4(fp)
    ef78:	18800035 	stwio	r2,0(r3)
	return 0;
    ef7c:	0005883a 	mov	r2,zero
}
    ef80:	e037883a 	mov	sp,fp
    ef84:	df000017 	ldw	fp,0(sp)
    ef88:	dec00104 	addi	sp,sp,4
    ef8c:	f800283a 	ret

0000ef90 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    ef90:	defffa04 	addi	sp,sp,-24
    ef94:	dfc00515 	stw	ra,20(sp)
    ef98:	df000415 	stw	fp,16(sp)
    ef9c:	df000404 	addi	fp,sp,16
    efa0:	e13ffd15 	stw	r4,-12(fp)
    efa4:	e17ffe15 	stw	r5,-8(fp)
    efa8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    efac:	e0bffd17 	ldw	r2,-12(fp)
    efb0:	10800a17 	ldw	r2,40(r2)
    efb4:	10800037 	ldwio	r2,0(r2)
    efb8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    efbc:	e0bffc17 	ldw	r2,-16(fp)
    efc0:	1007883a 	mov	r3,r2
    efc4:	e0bffe17 	ldw	r2,-8(fp)
    efc8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    efcc:	e13ffc17 	ldw	r4,-16(fp)
    efd0:	000ef0c0 	call	ef0c <alt_up_irda_check_parity>
    efd4:	1007883a 	mov	r3,r2
    efd8:	e0bfff17 	ldw	r2,-4(fp)
    efdc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    efe0:	e0bffc17 	ldw	r2,-16(fp)
    efe4:	10a0000c 	andi	r2,r2,32768
    efe8:	1004d3fa 	srli	r2,r2,15
    efec:	10bfffc4 	addi	r2,r2,-1
}
    eff0:	e037883a 	mov	sp,fp
    eff4:	dfc00117 	ldw	ra,4(sp)
    eff8:	df000017 	ldw	fp,0(sp)
    effc:	dec00204 	addi	sp,sp,8
    f000:	f800283a 	ret

0000f004 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    f004:	defff804 	addi	sp,sp,-32
    f008:	dfc00715 	stw	ra,28(sp)
    f00c:	df000615 	stw	fp,24(sp)
    f010:	df000604 	addi	fp,sp,24
    f014:	e13ffd15 	stw	r4,-12(fp)
    f018:	e17ffe15 	stw	r5,-8(fp)
    f01c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    f020:	e0bffd17 	ldw	r2,-12(fp)
    f024:	10800017 	ldw	r2,0(r2)
    f028:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    f02c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    f030:	00000c06 	br	f064 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    f034:	e0bffe17 	ldw	r2,-8(fp)
    f038:	10c00044 	addi	r3,r2,1
    f03c:	e0fffe15 	stw	r3,-8(fp)
    f040:	e0fffc04 	addi	r3,fp,-16
    f044:	180d883a 	mov	r6,r3
    f048:	100b883a 	mov	r5,r2
    f04c:	e13ffb17 	ldw	r4,-20(fp)
    f050:	000ef900 	call	ef90 <alt_up_irda_read_data>
    f054:	1000081e 	bne	r2,zero,f078 <alt_up_irda_read_fd+0x74>
			count++;
    f058:	e0bffa17 	ldw	r2,-24(fp)
    f05c:	10800044 	addi	r2,r2,1
    f060:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f064:	e0bfff17 	ldw	r2,-4(fp)
    f068:	10ffffc4 	addi	r3,r2,-1
    f06c:	e0ffff15 	stw	r3,-4(fp)
    f070:	103ff01e 	bne	r2,zero,f034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f034>
    f074:	00000106 	br	f07c <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    f078:	0001883a 	nop
	}
	return count;
    f07c:	e0bffa17 	ldw	r2,-24(fp)
}
    f080:	e037883a 	mov	sp,fp
    f084:	dfc00117 	ldw	ra,4(sp)
    f088:	df000017 	ldw	fp,0(sp)
    f08c:	dec00204 	addi	sp,sp,8
    f090:	f800283a 	ret

0000f094 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f094:	defff904 	addi	sp,sp,-28
    f098:	dfc00615 	stw	ra,24(sp)
    f09c:	df000515 	stw	fp,20(sp)
    f0a0:	df000504 	addi	fp,sp,20
    f0a4:	e13ffd15 	stw	r4,-12(fp)
    f0a8:	e17ffe15 	stw	r5,-8(fp)
    f0ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    f0b0:	e0bffd17 	ldw	r2,-12(fp)
    f0b4:	10800017 	ldw	r2,0(r2)
    f0b8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f0bc:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f0c0:	00000c06 	br	f0f4 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    f0c4:	e0bffe17 	ldw	r2,-8(fp)
    f0c8:	10c00044 	addi	r3,r2,1
    f0cc:	e0fffe15 	stw	r3,-8(fp)
    f0d0:	10800003 	ldbu	r2,0(r2)
    f0d4:	10803fcc 	andi	r2,r2,255
    f0d8:	100b883a 	mov	r5,r2
    f0dc:	e13ffc17 	ldw	r4,-16(fp)
    f0e0:	000ef500 	call	ef50 <alt_up_irda_write_data>
    f0e4:	1000081e 	bne	r2,zero,f108 <alt_up_irda_write_fd+0x74>
			count++;
    f0e8:	e0bffb17 	ldw	r2,-20(fp)
    f0ec:	10800044 	addi	r2,r2,1
    f0f0:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    f0f4:	e0bfff17 	ldw	r2,-4(fp)
    f0f8:	10ffffc4 	addi	r3,r2,-1
    f0fc:	e0ffff15 	stw	r3,-4(fp)
    f100:	103ff01e 	bne	r2,zero,f0c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0c4>
    f104:	00000106 	br	f10c <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    f108:	0001883a 	nop
	}
	return count;
    f10c:	e0bffb17 	ldw	r2,-20(fp)
}
    f110:	e037883a 	mov	sp,fp
    f114:	dfc00117 	ldw	ra,4(sp)
    f118:	df000017 	ldw	fp,0(sp)
    f11c:	dec00204 	addi	sp,sp,8
    f120:	f800283a 	ret

0000f124 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    f124:	defffc04 	addi	sp,sp,-16
    f128:	dfc00315 	stw	ra,12(sp)
    f12c:	df000215 	stw	fp,8(sp)
    f130:	df000204 	addi	fp,sp,8
    f134:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    f138:	d1600804 	addi	r5,gp,-32736
    f13c:	e13fff17 	ldw	r4,-4(fp)
    f140:	000fe8c0 	call	fe8c <alt_find_dev>
    f144:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f148:	e0bffe17 	ldw	r2,-8(fp)
}
    f14c:	e037883a 	mov	sp,fp
    f150:	dfc00117 	ldw	ra,4(sp)
    f154:	df000017 	ldw	fp,0(sp)
    f158:	dec00204 	addi	sp,sp,8
    f15c:	f800283a 	ret

0000f160 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    f160:	defffd04 	addi	sp,sp,-12
    f164:	df000215 	stw	fp,8(sp)
    f168:	df000204 	addi	fp,sp,8
    f16c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    f170:	e0bfff17 	ldw	r2,-4(fp)
    f174:	1080400c 	andi	r2,r2,256
    f178:	1004d23a 	srli	r2,r2,8
    f17c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    f180:	e0bffe03 	ldbu	r2,-8(fp)
}
    f184:	e037883a 	mov	sp,fp
    f188:	df000017 	ldw	fp,0(sp)
    f18c:	dec00104 	addi	sp,sp,4
    f190:	f800283a 	ret

0000f194 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    f194:	defffd04 	addi	sp,sp,-12
    f198:	df000215 	stw	fp,8(sp)
    f19c:	df000204 	addi	fp,sp,8
    f1a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    f1a4:	e0bfff17 	ldw	r2,-4(fp)
    f1a8:	1080004c 	andi	r2,r2,1
    f1ac:	e0bffe05 	stb	r2,-8(fp)
	return re;
    f1b0:	e0bffe03 	ldbu	r2,-8(fp)
}
    f1b4:	e037883a 	mov	sp,fp
    f1b8:	df000017 	ldw	fp,0(sp)
    f1bc:	dec00104 	addi	sp,sp,4
    f1c0:	f800283a 	ret

0000f1c4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    f1c4:	defffd04 	addi	sp,sp,-12
    f1c8:	df000215 	stw	fp,8(sp)
    f1cc:	df000204 	addi	fp,sp,8
    f1d0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    f1d4:	e0bfff17 	ldw	r2,-4(fp)
    f1d8:	1081000c 	andi	r2,r2,1024
    f1dc:	1004d2ba 	srli	r2,r2,10
    f1e0:	e0bffe05 	stb	r2,-8(fp)
	return re;
    f1e4:	e0bffe03 	ldbu	r2,-8(fp)
}
    f1e8:	e037883a 	mov	sp,fp
    f1ec:	df000017 	ldw	fp,0(sp)
    f1f0:	dec00104 	addi	sp,sp,4
    f1f4:	f800283a 	ret

0000f1f8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    f1f8:	defffd04 	addi	sp,sp,-12
    f1fc:	df000215 	stw	fp,8(sp)
    f200:	df000204 	addi	fp,sp,8
    f204:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    f208:	e0bfff17 	ldw	r2,-4(fp)
    f20c:	1004d43a 	srli	r2,r2,16
    f210:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    f214:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f218:	e037883a 	mov	sp,fp
    f21c:	df000017 	ldw	fp,0(sp)
    f220:	dec00104 	addi	sp,sp,4
    f224:	f800283a 	ret

0000f228 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    f228:	defffd04 	addi	sp,sp,-12
    f22c:	df000215 	stw	fp,8(sp)
    f230:	df000204 	addi	fp,sp,8
    f234:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    f238:	e0bfff17 	ldw	r2,-4(fp)
    f23c:	10a0000c 	andi	r2,r2,32768
    f240:	1004d3fa 	srli	r2,r2,15
    f244:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    f248:	e0bffe03 	ldbu	r2,-8(fp)
}
    f24c:	e037883a 	mov	sp,fp
    f250:	df000017 	ldw	fp,0(sp)
    f254:	dec00104 	addi	sp,sp,4
    f258:	f800283a 	ret

0000f25c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    f25c:	defffd04 	addi	sp,sp,-12
    f260:	df000215 	stw	fp,8(sp)
    f264:	df000204 	addi	fp,sp,8
    f268:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    f26c:	e0bfff17 	ldw	r2,-4(fp)
    f270:	e0bffe05 	stb	r2,-8(fp)
	return data;
    f274:	e0bffe03 	ldbu	r2,-8(fp)
}
    f278:	e037883a 	mov	sp,fp
    f27c:	df000017 	ldw	fp,0(sp)
    f280:	dec00104 	addi	sp,sp,4
    f284:	f800283a 	ret

0000f288 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    f288:	defffb04 	addi	sp,sp,-20
    f28c:	dfc00415 	stw	ra,16(sp)
    f290:	df000315 	stw	fp,12(sp)
    f294:	df000304 	addi	fp,sp,12
    f298:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    f29c:	01403fc4 	movi	r5,255
    f2a0:	e13fff17 	ldw	r4,-4(fp)
    f2a4:	000f4e80 	call	f4e8 <alt_up_ps2_write_data_byte_with_ack>
    f2a8:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    f2ac:	e0bffd17 	ldw	r2,-12(fp)
    f2b0:	1000211e 	bne	r2,zero,f338 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    f2b4:	e0bffe04 	addi	r2,fp,-8
    f2b8:	100b883a 	mov	r5,r2
    f2bc:	e13fff17 	ldw	r4,-4(fp)
    f2c0:	000f54c0 	call	f54c <alt_up_ps2_read_data_byte_timeout>
    f2c4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    f2c8:	e0bffd17 	ldw	r2,-12(fp)
    f2cc:	10001a1e 	bne	r2,zero,f338 <alt_up_ps2_init+0xb0>
    f2d0:	e0bffe03 	ldbu	r2,-8(fp)
    f2d4:	10803fcc 	andi	r2,r2,255
    f2d8:	10802a98 	cmpnei	r2,r2,170
    f2dc:	1000161e 	bne	r2,zero,f338 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    f2e0:	e0bffe04 	addi	r2,fp,-8
    f2e4:	100b883a 	mov	r5,r2
    f2e8:	e13fff17 	ldw	r4,-4(fp)
    f2ec:	000f54c0 	call	f54c <alt_up_ps2_read_data_byte_timeout>
    f2f0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    f2f4:	e0bffd17 	ldw	r2,-12(fp)
    f2f8:	10bfe318 	cmpnei	r2,r2,-116
    f2fc:	1000041e 	bne	r2,zero,f310 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    f300:	e0bfff17 	ldw	r2,-4(fp)
    f304:	00c00044 	movi	r3,1
    f308:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    f30c:	00000a06 	br	f338 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    f310:	e0bffd17 	ldw	r2,-12(fp)
    f314:	1000081e 	bne	r2,zero,f338 <alt_up_ps2_init+0xb0>
    f318:	e0bffe03 	ldbu	r2,-8(fp)
    f31c:	10803fcc 	andi	r2,r2,255
    f320:	1000051e 	bne	r2,zero,f338 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    f324:	e0bfff17 	ldw	r2,-4(fp)
    f328:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    f32c:	01403d04 	movi	r5,244
    f330:	e13fff17 	ldw	r4,-4(fp)
    f334:	000f40c0 	call	f40c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    f338:	0001883a 	nop
    f33c:	e037883a 	mov	sp,fp
    f340:	dfc00117 	ldw	ra,4(sp)
    f344:	df000017 	ldw	fp,0(sp)
    f348:	dec00204 	addi	sp,sp,8
    f34c:	f800283a 	ret

0000f350 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    f350:	defffd04 	addi	sp,sp,-12
    f354:	df000215 	stw	fp,8(sp)
    f358:	df000204 	addi	fp,sp,8
    f35c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    f360:	e0bfff17 	ldw	r2,-4(fp)
    f364:	10800a17 	ldw	r2,40(r2)
    f368:	10800104 	addi	r2,r2,4
    f36c:	10800037 	ldwio	r2,0(r2)
    f370:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    f374:	e0bffe17 	ldw	r2,-8(fp)
    f378:	10800054 	ori	r2,r2,1
    f37c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    f380:	e0bfff17 	ldw	r2,-4(fp)
    f384:	10800a17 	ldw	r2,40(r2)
    f388:	10800104 	addi	r2,r2,4
    f38c:	1007883a 	mov	r3,r2
    f390:	e0bffe17 	ldw	r2,-8(fp)
    f394:	18800035 	stwio	r2,0(r3)
}
    f398:	0001883a 	nop
    f39c:	e037883a 	mov	sp,fp
    f3a0:	df000017 	ldw	fp,0(sp)
    f3a4:	dec00104 	addi	sp,sp,4
    f3a8:	f800283a 	ret

0000f3ac <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    f3ac:	defffd04 	addi	sp,sp,-12
    f3b0:	df000215 	stw	fp,8(sp)
    f3b4:	df000204 	addi	fp,sp,8
    f3b8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    f3bc:	e0bfff17 	ldw	r2,-4(fp)
    f3c0:	10800a17 	ldw	r2,40(r2)
    f3c4:	10800104 	addi	r2,r2,4
    f3c8:	10800037 	ldwio	r2,0(r2)
    f3cc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    f3d0:	e0fffe17 	ldw	r3,-8(fp)
    f3d4:	00bfff84 	movi	r2,-2
    f3d8:	1884703a 	and	r2,r3,r2
    f3dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    f3e0:	e0bfff17 	ldw	r2,-4(fp)
    f3e4:	10800a17 	ldw	r2,40(r2)
    f3e8:	10800104 	addi	r2,r2,4
    f3ec:	1007883a 	mov	r3,r2
    f3f0:	e0bffe17 	ldw	r2,-8(fp)
    f3f4:	18800035 	stwio	r2,0(r3)
}
    f3f8:	0001883a 	nop
    f3fc:	e037883a 	mov	sp,fp
    f400:	df000017 	ldw	fp,0(sp)
    f404:	dec00104 	addi	sp,sp,4
    f408:	f800283a 	ret

0000f40c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    f40c:	defffb04 	addi	sp,sp,-20
    f410:	dfc00415 	stw	ra,16(sp)
    f414:	df000315 	stw	fp,12(sp)
    f418:	df000304 	addi	fp,sp,12
    f41c:	e13ffe15 	stw	r4,-8(fp)
    f420:	2805883a 	mov	r2,r5
    f424:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    f428:	e0bffe17 	ldw	r2,-8(fp)
    f42c:	10800a17 	ldw	r2,40(r2)
    f430:	1007883a 	mov	r3,r2
    f434:	e0bfff03 	ldbu	r2,-4(fp)
    f438:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    f43c:	e0bffe17 	ldw	r2,-8(fp)
    f440:	10800a17 	ldw	r2,40(r2)
    f444:	10800104 	addi	r2,r2,4
    f448:	10800037 	ldwio	r2,0(r2)
    f44c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    f450:	e13ffd17 	ldw	r4,-12(fp)
    f454:	000f1c40 	call	f1c4 <read_CE_bit>
    f458:	10803fcc 	andi	r2,r2,255
    f45c:	10000226 	beq	r2,zero,f468 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    f460:	00bffec4 	movi	r2,-5
    f464:	00000106 	br	f46c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    f468:	0005883a 	mov	r2,zero
}
    f46c:	e037883a 	mov	sp,fp
    f470:	dfc00117 	ldw	ra,4(sp)
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00204 	addi	sp,sp,8
    f47c:	f800283a 	ret

0000f480 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    f480:	defffc04 	addi	sp,sp,-16
    f484:	dfc00315 	stw	ra,12(sp)
    f488:	df000215 	stw	fp,8(sp)
    f48c:	df000204 	addi	fp,sp,8
    f490:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    f494:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    f498:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    f49c:	e0bffe44 	addi	r2,fp,-7
    f4a0:	100b883a 	mov	r5,r2
    f4a4:	e13fff17 	ldw	r4,-4(fp)
    f4a8:	000f54c0 	call	f54c <alt_up_ps2_read_data_byte_timeout>
    f4ac:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    f4b0:	e0bffe03 	ldbu	r2,-8(fp)
    f4b4:	1000061e 	bne	r2,zero,f4d0 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    f4b8:	e0bffe43 	ldbu	r2,-7(fp)
    f4bc:	10803fcc 	andi	r2,r2,255
    f4c0:	10803e98 	cmpnei	r2,r2,250
    f4c4:	103ff51e 	bne	r2,zero,f49c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f49c>
				return 0;
    f4c8:	0005883a 	mov	r2,zero
    f4cc:	00000106 	br	f4d4 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    f4d0:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    f4d4:	e037883a 	mov	sp,fp
    f4d8:	dfc00117 	ldw	ra,4(sp)
    f4dc:	df000017 	ldw	fp,0(sp)
    f4e0:	dec00204 	addi	sp,sp,8
    f4e4:	f800283a 	ret

0000f4e8 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    f4e8:	defffa04 	addi	sp,sp,-24
    f4ec:	dfc00515 	stw	ra,20(sp)
    f4f0:	df000415 	stw	fp,16(sp)
    f4f4:	df000404 	addi	fp,sp,16
    f4f8:	e13ffe15 	stw	r4,-8(fp)
    f4fc:	2805883a 	mov	r2,r5
    f500:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    f504:	e0bfff03 	ldbu	r2,-4(fp)
    f508:	100b883a 	mov	r5,r2
    f50c:	e13ffe17 	ldw	r4,-8(fp)
    f510:	000f40c0 	call	f40c <alt_up_ps2_write_data_byte>
    f514:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    f518:	e0bffc17 	ldw	r2,-16(fp)
    f51c:	10000226 	beq	r2,zero,f528 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    f520:	e0bffc17 	ldw	r2,-16(fp)
    f524:	00000406 	br	f538 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    f528:	e13ffe17 	ldw	r4,-8(fp)
    f52c:	000f4800 	call	f480 <alt_up_ps2_wait_for_ack>
    f530:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    f534:	e0bffd17 	ldw	r2,-12(fp)
}
    f538:	e037883a 	mov	sp,fp
    f53c:	dfc00117 	ldw	ra,4(sp)
    f540:	df000017 	ldw	fp,0(sp)
    f544:	dec00204 	addi	sp,sp,8
    f548:	f800283a 	ret

0000f54c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    f54c:	defffa04 	addi	sp,sp,-24
    f550:	dfc00515 	stw	ra,20(sp)
    f554:	df000415 	stw	fp,16(sp)
    f558:	df000404 	addi	fp,sp,16
    f55c:	e13ffe15 	stw	r4,-8(fp)
    f560:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    f564:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    f568:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    f56c:	e0bffc17 	ldw	r2,-16(fp)
    f570:	10800044 	addi	r2,r2,1
    f574:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f578:	e0bffe17 	ldw	r2,-8(fp)
    f57c:	10800a17 	ldw	r2,40(r2)
    f580:	10800037 	ldwio	r2,0(r2)
    f584:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    f588:	e13ffd17 	ldw	r4,-12(fp)
    f58c:	000f2280 	call	f228 <read_data_valid>
    f590:	10803fcc 	andi	r2,r2,255
    f594:	10000726 	beq	r2,zero,f5b4 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    f598:	e13ffd17 	ldw	r4,-12(fp)
    f59c:	000f25c0 	call	f25c <read_data_byte>
    f5a0:	1007883a 	mov	r3,r2
    f5a4:	e0bfff17 	ldw	r2,-4(fp)
    f5a8:	10c00005 	stb	r3,0(r2)
			return 0;
    f5ac:	0005883a 	mov	r2,zero
    f5b0:	00000806 	br	f5d4 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    f5b4:	e0bffe17 	ldw	r2,-8(fp)
    f5b8:	10800c17 	ldw	r2,48(r2)
    f5bc:	103feb26 	beq	r2,zero,f56c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f56c>
    f5c0:	e0bffe17 	ldw	r2,-8(fp)
    f5c4:	10c00c17 	ldw	r3,48(r2)
    f5c8:	e0bffc17 	ldw	r2,-16(fp)
    f5cc:	18bfe72e 	bgeu	r3,r2,f56c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f56c>
		{
			return -ETIMEDOUT;
    f5d0:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    f5d4:	e037883a 	mov	sp,fp
    f5d8:	dfc00117 	ldw	ra,4(sp)
    f5dc:	df000017 	ldw	fp,0(sp)
    f5e0:	dec00204 	addi	sp,sp,8
    f5e4:	f800283a 	ret

0000f5e8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    f5e8:	defffb04 	addi	sp,sp,-20
    f5ec:	dfc00415 	stw	ra,16(sp)
    f5f0:	df000315 	stw	fp,12(sp)
    f5f4:	df000304 	addi	fp,sp,12
    f5f8:	e13ffe15 	stw	r4,-8(fp)
    f5fc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    f600:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f604:	e0bffe17 	ldw	r2,-8(fp)
    f608:	10800a17 	ldw	r2,40(r2)
    f60c:	10800037 	ldwio	r2,0(r2)
    f610:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    f614:	e13ffd17 	ldw	r4,-12(fp)
    f618:	000f2280 	call	f228 <read_data_valid>
    f61c:	10803fcc 	andi	r2,r2,255
    f620:	10000726 	beq	r2,zero,f640 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    f624:	e13ffd17 	ldw	r4,-12(fp)
    f628:	000f25c0 	call	f25c <read_data_byte>
    f62c:	1007883a 	mov	r3,r2
    f630:	e0bfff17 	ldw	r2,-4(fp)
    f634:	10c00005 	stb	r3,0(r2)
		return 0;
    f638:	0005883a 	mov	r2,zero
    f63c:	00000106 	br	f644 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    f640:	00bfffc4 	movi	r2,-1
}
    f644:	e037883a 	mov	sp,fp
    f648:	dfc00117 	ldw	ra,4(sp)
    f64c:	df000017 	ldw	fp,0(sp)
    f650:	dec00204 	addi	sp,sp,8
    f654:	f800283a 	ret

0000f658 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    f658:	defffb04 	addi	sp,sp,-20
    f65c:	dfc00415 	stw	ra,16(sp)
    f660:	df000315 	stw	fp,12(sp)
    f664:	df000304 	addi	fp,sp,12
    f668:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    f66c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    f670:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f674:	e0bfff17 	ldw	r2,-4(fp)
    f678:	10800a17 	ldw	r2,40(r2)
    f67c:	10800037 	ldwio	r2,0(r2)
    f680:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    f684:	e13ffe17 	ldw	r4,-8(fp)
    f688:	000f1f80 	call	f1f8 <read_num_bytes_available>
    f68c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    f690:	e0bffd0b 	ldhu	r2,-12(fp)
    f694:	103ff71e 	bne	r2,zero,f674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f674>
}
    f698:	0001883a 	nop
    f69c:	e037883a 	mov	sp,fp
    f6a0:	dfc00117 	ldw	ra,4(sp)
    f6a4:	df000017 	ldw	fp,0(sp)
    f6a8:	dec00204 	addi	sp,sp,8
    f6ac:	f800283a 	ret

0000f6b0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    f6b0:	defff804 	addi	sp,sp,-32
    f6b4:	dfc00715 	stw	ra,28(sp)
    f6b8:	df000615 	stw	fp,24(sp)
    f6bc:	df000604 	addi	fp,sp,24
    f6c0:	e13ffd15 	stw	r4,-12(fp)
    f6c4:	e17ffe15 	stw	r5,-8(fp)
    f6c8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f6cc:	e0bffd17 	ldw	r2,-12(fp)
    f6d0:	10800017 	ldw	r2,0(r2)
    f6d4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    f6d8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    f6dc:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    f6e0:	e0fffc17 	ldw	r3,-16(fp)
    f6e4:	e0bfff17 	ldw	r2,-4(fp)
    f6e8:	18bffd16 	blt	r3,r2,f6e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f6e0>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    f6ec:	e0bffe17 	ldw	r2,-8(fp)
    f6f0:	10c00044 	addi	r3,r2,1
    f6f4:	e0fffe15 	stw	r3,-8(fp)
    f6f8:	100b883a 	mov	r5,r2
    f6fc:	e13ffa17 	ldw	r4,-24(fp)
    f700:	000f54c0 	call	f54c <alt_up_ps2_read_data_byte_timeout>
    f704:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    f708:	e0bffb17 	ldw	r2,-20(fp)
    f70c:	10000226 	beq	r2,zero,f718 <alt_up_ps2_read_fd+0x68>
			return count;
    f710:	e0bffc17 	ldw	r2,-16(fp)
    f714:	00000406 	br	f728 <alt_up_ps2_read_fd+0x78>
		count++;
    f718:	e0bffc17 	ldw	r2,-16(fp)
    f71c:	10800044 	addi	r2,r2,1
    f720:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    f724:	e0bffc17 	ldw	r2,-16(fp)
}
    f728:	e037883a 	mov	sp,fp
    f72c:	dfc00117 	ldw	ra,4(sp)
    f730:	df000017 	ldw	fp,0(sp)
    f734:	dec00204 	addi	sp,sp,8
    f738:	f800283a 	ret

0000f73c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f73c:	defff804 	addi	sp,sp,-32
    f740:	dfc00715 	stw	ra,28(sp)
    f744:	df000615 	stw	fp,24(sp)
    f748:	df000604 	addi	fp,sp,24
    f74c:	e13ffd15 	stw	r4,-12(fp)
    f750:	e17ffe15 	stw	r5,-8(fp)
    f754:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f758:	e0bffd17 	ldw	r2,-12(fp)
    f75c:	10800017 	ldw	r2,0(r2)
    f760:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    f764:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    f768:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    f76c:	00001006 	br	f7b0 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    f770:	e0bffe17 	ldw	r2,-8(fp)
    f774:	10c00044 	addi	r3,r2,1
    f778:	e0fffe15 	stw	r3,-8(fp)
    f77c:	10800003 	ldbu	r2,0(r2)
    f780:	10803fcc 	andi	r2,r2,255
    f784:	100b883a 	mov	r5,r2
    f788:	e13ffb17 	ldw	r4,-20(fp)
    f78c:	000f40c0 	call	f40c <alt_up_ps2_write_data_byte>
    f790:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    f794:	e0bffc17 	ldw	r2,-16(fp)
    f798:	10000226 	beq	r2,zero,f7a4 <alt_up_ps2_write_fd+0x68>
			return count;
    f79c:	e0bffa17 	ldw	r2,-24(fp)
    f7a0:	00000706 	br	f7c0 <alt_up_ps2_write_fd+0x84>
		count++;
    f7a4:	e0bffa17 	ldw	r2,-24(fp)
    f7a8:	10800044 	addi	r2,r2,1
    f7ac:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    f7b0:	e0fffa17 	ldw	r3,-24(fp)
    f7b4:	e0bfff17 	ldw	r2,-4(fp)
    f7b8:	18bfed16 	blt	r3,r2,f770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f770>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    f7bc:	e0bffa17 	ldw	r2,-24(fp)
}
    f7c0:	e037883a 	mov	sp,fp
    f7c4:	dfc00117 	ldw	ra,4(sp)
    f7c8:	df000017 	ldw	fp,0(sp)
    f7cc:	dec00204 	addi	sp,sp,8
    f7d0:	f800283a 	ret

0000f7d4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    f7d4:	defffc04 	addi	sp,sp,-16
    f7d8:	dfc00315 	stw	ra,12(sp)
    f7dc:	df000215 	stw	fp,8(sp)
    f7e0:	df000204 	addi	fp,sp,8
    f7e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    f7e8:	d1600804 	addi	r5,gp,-32736
    f7ec:	e13fff17 	ldw	r4,-4(fp)
    f7f0:	000fe8c0 	call	fe8c <alt_find_dev>
    f7f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f7f8:	e0bffe17 	ldw	r2,-8(fp)
}
    f7fc:	e037883a 	mov	sp,fp
    f800:	dfc00117 	ldw	ra,4(sp)
    f804:	df000017 	ldw	fp,0(sp)
    f808:	dec00204 	addi	sp,sp,8
    f80c:	f800283a 	ret

0000f810 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f810:	defffd04 	addi	sp,sp,-12
    f814:	df000215 	stw	fp,8(sp)
    f818:	df000204 	addi	fp,sp,8
    f81c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f820:	e0bfff17 	ldw	r2,-4(fp)
    f824:	10800a17 	ldw	r2,40(r2)
    f828:	10800104 	addi	r2,r2,4
    f82c:	10800037 	ldwio	r2,0(r2)
    f830:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    f834:	e0bffe17 	ldw	r2,-8(fp)
    f838:	10800054 	ori	r2,r2,1
    f83c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f840:	e0bfff17 	ldw	r2,-4(fp)
    f844:	10800a17 	ldw	r2,40(r2)
    f848:	10800104 	addi	r2,r2,4
    f84c:	1007883a 	mov	r3,r2
    f850:	e0bffe17 	ldw	r2,-8(fp)
    f854:	18800035 	stwio	r2,0(r3)
}
    f858:	0001883a 	nop
    f85c:	e037883a 	mov	sp,fp
    f860:	df000017 	ldw	fp,0(sp)
    f864:	dec00104 	addi	sp,sp,4
    f868:	f800283a 	ret

0000f86c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f86c:	defffd04 	addi	sp,sp,-12
    f870:	df000215 	stw	fp,8(sp)
    f874:	df000204 	addi	fp,sp,8
    f878:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f87c:	e0bfff17 	ldw	r2,-4(fp)
    f880:	10800a17 	ldw	r2,40(r2)
    f884:	10800104 	addi	r2,r2,4
    f888:	10800037 	ldwio	r2,0(r2)
    f88c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    f890:	e0fffe17 	ldw	r3,-8(fp)
    f894:	00bfff84 	movi	r2,-2
    f898:	1884703a 	and	r2,r3,r2
    f89c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f8a0:	e0bfff17 	ldw	r2,-4(fp)
    f8a4:	10800a17 	ldw	r2,40(r2)
    f8a8:	10800104 	addi	r2,r2,4
    f8ac:	1007883a 	mov	r3,r2
    f8b0:	e0bffe17 	ldw	r2,-8(fp)
    f8b4:	18800035 	stwio	r2,0(r3)
}
    f8b8:	0001883a 	nop
    f8bc:	e037883a 	mov	sp,fp
    f8c0:	df000017 	ldw	fp,0(sp)
    f8c4:	dec00104 	addi	sp,sp,4
    f8c8:	f800283a 	ret

0000f8cc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    f8cc:	defffd04 	addi	sp,sp,-12
    f8d0:	df000215 	stw	fp,8(sp)
    f8d4:	df000204 	addi	fp,sp,8
    f8d8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    f8dc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    f8e0:	e0bfff17 	ldw	r2,-4(fp)
    f8e4:	10800a17 	ldw	r2,40(r2)
    f8e8:	10800084 	addi	r2,r2,2
    f8ec:	1080002b 	ldhuio	r2,0(r2)
    f8f0:	10bfffcc 	andi	r2,r2,65535
    f8f4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    f8f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f8fc:	e037883a 	mov	sp,fp
    f900:	df000017 	ldw	fp,0(sp)
    f904:	dec00104 	addi	sp,sp,4
    f908:	f800283a 	ret

0000f90c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    f90c:	defffd04 	addi	sp,sp,-12
    f910:	df000215 	stw	fp,8(sp)
    f914:	df000204 	addi	fp,sp,8
    f918:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f91c:	e0bfff17 	ldw	r2,-4(fp)
    f920:	10800a17 	ldw	r2,40(r2)
    f924:	10800104 	addi	r2,r2,4
    f928:	10800037 	ldwio	r2,0(r2)
    f92c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    f930:	e0bffe17 	ldw	r2,-8(fp)
    f934:	1004d43a 	srli	r2,r2,16
}
    f938:	e037883a 	mov	sp,fp
    f93c:	df000017 	ldw	fp,0(sp)
    f940:	dec00104 	addi	sp,sp,4
    f944:	f800283a 	ret

0000f948 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    f948:	defffd04 	addi	sp,sp,-12
    f94c:	df000215 	stw	fp,8(sp)
    f950:	df000204 	addi	fp,sp,8
    f954:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    f958:	e0bfff17 	ldw	r2,-4(fp)
    f95c:	1080800c 	andi	r2,r2,512
    f960:	1004d27a 	srli	r2,r2,9
    f964:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    f968:	e0bffe17 	ldw	r2,-8(fp)
    f96c:	10000226 	beq	r2,zero,f978 <alt_up_rs232_check_parity+0x30>
    f970:	00bfffc4 	movi	r2,-1
    f974:	00000106 	br	f97c <alt_up_rs232_check_parity+0x34>
    f978:	0005883a 	mov	r2,zero
}
    f97c:	e037883a 	mov	sp,fp
    f980:	df000017 	ldw	fp,0(sp)
    f984:	dec00104 	addi	sp,sp,4
    f988:	f800283a 	ret

0000f98c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    f98c:	defffd04 	addi	sp,sp,-12
    f990:	df000215 	stw	fp,8(sp)
    f994:	df000204 	addi	fp,sp,8
    f998:	e13ffe15 	stw	r4,-8(fp)
    f99c:	2805883a 	mov	r2,r5
    f9a0:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    f9a4:	e0bffe17 	ldw	r2,-8(fp)
    f9a8:	10800a17 	ldw	r2,40(r2)
    f9ac:	1007883a 	mov	r3,r2
    f9b0:	e0bfff03 	ldbu	r2,-4(fp)
    f9b4:	18800035 	stwio	r2,0(r3)
	return 0;
    f9b8:	0005883a 	mov	r2,zero
}
    f9bc:	e037883a 	mov	sp,fp
    f9c0:	df000017 	ldw	fp,0(sp)
    f9c4:	dec00104 	addi	sp,sp,4
    f9c8:	f800283a 	ret

0000f9cc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    f9cc:	defffa04 	addi	sp,sp,-24
    f9d0:	dfc00515 	stw	ra,20(sp)
    f9d4:	df000415 	stw	fp,16(sp)
    f9d8:	df000404 	addi	fp,sp,16
    f9dc:	e13ffd15 	stw	r4,-12(fp)
    f9e0:	e17ffe15 	stw	r5,-8(fp)
    f9e4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f9e8:	e0bffd17 	ldw	r2,-12(fp)
    f9ec:	10800a17 	ldw	r2,40(r2)
    f9f0:	10800037 	ldwio	r2,0(r2)
    f9f4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f9f8:	e0bffc17 	ldw	r2,-16(fp)
    f9fc:	1007883a 	mov	r3,r2
    fa00:	e0bffe17 	ldw	r2,-8(fp)
    fa04:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    fa08:	e13ffc17 	ldw	r4,-16(fp)
    fa0c:	000f9480 	call	f948 <alt_up_rs232_check_parity>
    fa10:	1007883a 	mov	r3,r2
    fa14:	e0bfff17 	ldw	r2,-4(fp)
    fa18:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    fa1c:	e0bffc17 	ldw	r2,-16(fp)
    fa20:	10a0000c 	andi	r2,r2,32768
    fa24:	1004d3fa 	srli	r2,r2,15
    fa28:	10bfffc4 	addi	r2,r2,-1
}
    fa2c:	e037883a 	mov	sp,fp
    fa30:	dfc00117 	ldw	ra,4(sp)
    fa34:	df000017 	ldw	fp,0(sp)
    fa38:	dec00204 	addi	sp,sp,8
    fa3c:	f800283a 	ret

0000fa40 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    fa40:	defff804 	addi	sp,sp,-32
    fa44:	dfc00715 	stw	ra,28(sp)
    fa48:	df000615 	stw	fp,24(sp)
    fa4c:	df000604 	addi	fp,sp,24
    fa50:	e13ffd15 	stw	r4,-12(fp)
    fa54:	e17ffe15 	stw	r5,-8(fp)
    fa58:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    fa5c:	e0bffd17 	ldw	r2,-12(fp)
    fa60:	10800017 	ldw	r2,0(r2)
    fa64:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    fa68:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    fa6c:	00000c06 	br	faa0 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    fa70:	e0bffe17 	ldw	r2,-8(fp)
    fa74:	10c00044 	addi	r3,r2,1
    fa78:	e0fffe15 	stw	r3,-8(fp)
    fa7c:	e0fffc04 	addi	r3,fp,-16
    fa80:	180d883a 	mov	r6,r3
    fa84:	100b883a 	mov	r5,r2
    fa88:	e13ffb17 	ldw	r4,-20(fp)
    fa8c:	000f9cc0 	call	f9cc <alt_up_rs232_read_data>
    fa90:	1000081e 	bne	r2,zero,fab4 <alt_up_rs232_read_fd+0x74>
			count++;
    fa94:	e0bffa17 	ldw	r2,-24(fp)
    fa98:	10800044 	addi	r2,r2,1
    fa9c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    faa0:	e0bfff17 	ldw	r2,-4(fp)
    faa4:	10ffffc4 	addi	r3,r2,-1
    faa8:	e0ffff15 	stw	r3,-4(fp)
    faac:	103ff01e 	bne	r2,zero,fa70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fa70>
    fab0:	00000106 	br	fab8 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    fab4:	0001883a 	nop
	}
	return count;
    fab8:	e0bffa17 	ldw	r2,-24(fp)
}
    fabc:	e037883a 	mov	sp,fp
    fac0:	dfc00117 	ldw	ra,4(sp)
    fac4:	df000017 	ldw	fp,0(sp)
    fac8:	dec00204 	addi	sp,sp,8
    facc:	f800283a 	ret

0000fad0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    fad0:	defff904 	addi	sp,sp,-28
    fad4:	dfc00615 	stw	ra,24(sp)
    fad8:	df000515 	stw	fp,20(sp)
    fadc:	df000504 	addi	fp,sp,20
    fae0:	e13ffd15 	stw	r4,-12(fp)
    fae4:	e17ffe15 	stw	r5,-8(fp)
    fae8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    faec:	e0bffd17 	ldw	r2,-12(fp)
    faf0:	10800017 	ldw	r2,0(r2)
    faf4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    faf8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    fafc:	00000d06 	br	fb34 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    fb00:	e0bffe17 	ldw	r2,-8(fp)
    fb04:	10800003 	ldbu	r2,0(r2)
    fb08:	10803fcc 	andi	r2,r2,255
    fb0c:	100b883a 	mov	r5,r2
    fb10:	e13ffc17 	ldw	r4,-16(fp)
    fb14:	000f98c0 	call	f98c <alt_up_rs232_write_data>
    fb18:	10000b1e 	bne	r2,zero,fb48 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    fb1c:	e0bffb17 	ldw	r2,-20(fp)
    fb20:	10800044 	addi	r2,r2,1
    fb24:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    fb28:	e0bffe17 	ldw	r2,-8(fp)
    fb2c:	10800044 	addi	r2,r2,1
    fb30:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    fb34:	e0bfff17 	ldw	r2,-4(fp)
    fb38:	10ffffc4 	addi	r3,r2,-1
    fb3c:	e0ffff15 	stw	r3,-4(fp)
    fb40:	103fef1e 	bne	r2,zero,fb00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb00>
    fb44:	00000106 	br	fb4c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    fb48:	0001883a 	nop
	}
	return count;
    fb4c:	e0bffb17 	ldw	r2,-20(fp)
}
    fb50:	e037883a 	mov	sp,fp
    fb54:	dfc00117 	ldw	ra,4(sp)
    fb58:	df000017 	ldw	fp,0(sp)
    fb5c:	dec00204 	addi	sp,sp,8
    fb60:	f800283a 	ret

0000fb64 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    fb64:	defffc04 	addi	sp,sp,-16
    fb68:	dfc00315 	stw	ra,12(sp)
    fb6c:	df000215 	stw	fp,8(sp)
    fb70:	df000204 	addi	fp,sp,8
    fb74:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    fb78:	d1600804 	addi	r5,gp,-32736
    fb7c:	e13fff17 	ldw	r4,-4(fp)
    fb80:	000fe8c0 	call	fe8c <alt_find_dev>
    fb84:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    fb88:	e0bffe17 	ldw	r2,-8(fp)
}
    fb8c:	e037883a 	mov	sp,fp
    fb90:	dfc00117 	ldw	ra,4(sp)
    fb94:	df000017 	ldw	fp,0(sp)
    fb98:	dec00204 	addi	sp,sp,8
    fb9c:	f800283a 	ret

0000fba0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fba0:	defff504 	addi	sp,sp,-44
    fba4:	df000a15 	stw	fp,40(sp)
    fba8:	df000a04 	addi	fp,sp,40
    fbac:	e13ffc15 	stw	r4,-16(fp)
    fbb0:	e17ffd15 	stw	r5,-12(fp)
    fbb4:	e1bffe15 	stw	r6,-8(fp)
    fbb8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fbbc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fbc0:	d0a7e717 	ldw	r2,-24676(gp)
  
  if (alt_ticks_per_second ())
    fbc4:	10003c26 	beq	r2,zero,fcb8 <alt_alarm_start+0x118>
  {
    if (alarm)
    fbc8:	e0bffc17 	ldw	r2,-16(fp)
    fbcc:	10003826 	beq	r2,zero,fcb0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fbd0:	e0bffc17 	ldw	r2,-16(fp)
    fbd4:	e0fffe17 	ldw	r3,-8(fp)
    fbd8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fbdc:	e0bffc17 	ldw	r2,-16(fp)
    fbe0:	e0ffff17 	ldw	r3,-4(fp)
    fbe4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbe8:	0005303a 	rdctl	r2,status
    fbec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbf0:	e0fff917 	ldw	r3,-28(fp)
    fbf4:	00bfff84 	movi	r2,-2
    fbf8:	1884703a 	and	r2,r3,r2
    fbfc:	1001703a 	wrctl	status,r2
  
  return context;
    fc00:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fc04:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fc08:	d0a7e817 	ldw	r2,-24672(gp)
      
      current_nticks = alt_nticks();
    fc0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fc10:	e0fffd17 	ldw	r3,-12(fp)
    fc14:	e0bff617 	ldw	r2,-40(fp)
    fc18:	1885883a 	add	r2,r3,r2
    fc1c:	10c00044 	addi	r3,r2,1
    fc20:	e0bffc17 	ldw	r2,-16(fp)
    fc24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fc28:	e0bffc17 	ldw	r2,-16(fp)
    fc2c:	10c00217 	ldw	r3,8(r2)
    fc30:	e0bff617 	ldw	r2,-40(fp)
    fc34:	1880042e 	bgeu	r3,r2,fc48 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fc38:	e0bffc17 	ldw	r2,-16(fp)
    fc3c:	00c00044 	movi	r3,1
    fc40:	10c00405 	stb	r3,16(r2)
    fc44:	00000206 	br	fc50 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fc48:	e0bffc17 	ldw	r2,-16(fp)
    fc4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fc50:	e0bffc17 	ldw	r2,-16(fp)
    fc54:	d0e02d04 	addi	r3,gp,-32588
    fc58:	e0fffa15 	stw	r3,-24(fp)
    fc5c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fc60:	e0bffb17 	ldw	r2,-20(fp)
    fc64:	e0fffa17 	ldw	r3,-24(fp)
    fc68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fc6c:	e0bffa17 	ldw	r2,-24(fp)
    fc70:	10c00017 	ldw	r3,0(r2)
    fc74:	e0bffb17 	ldw	r2,-20(fp)
    fc78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fc7c:	e0bffa17 	ldw	r2,-24(fp)
    fc80:	10800017 	ldw	r2,0(r2)
    fc84:	e0fffb17 	ldw	r3,-20(fp)
    fc88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fc8c:	e0bffa17 	ldw	r2,-24(fp)
    fc90:	e0fffb17 	ldw	r3,-20(fp)
    fc94:	10c00015 	stw	r3,0(r2)
    fc98:	e0bff817 	ldw	r2,-32(fp)
    fc9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fca0:	e0bff717 	ldw	r2,-36(fp)
    fca4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fca8:	0005883a 	mov	r2,zero
    fcac:	00000306 	br	fcbc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fcb0:	00bffa84 	movi	r2,-22
    fcb4:	00000106 	br	fcbc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fcb8:	00bfde84 	movi	r2,-134
  }
}
    fcbc:	e037883a 	mov	sp,fp
    fcc0:	df000017 	ldw	fp,0(sp)
    fcc4:	dec00104 	addi	sp,sp,4
    fcc8:	f800283a 	ret

0000fccc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fccc:	deffff04 	addi	sp,sp,-4
    fcd0:	df000015 	stw	fp,0(sp)
    fcd4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fcd8:	0001883a 	nop
    fcdc:	e037883a 	mov	sp,fp
    fce0:	df000017 	ldw	fp,0(sp)
    fce4:	dec00104 	addi	sp,sp,4
    fce8:	f800283a 	ret

0000fcec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fcec:	defffe04 	addi	sp,sp,-8
    fcf0:	dfc00115 	stw	ra,4(sp)
    fcf4:	df000015 	stw	fp,0(sp)
    fcf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fcfc:	d0a00b17 	ldw	r2,-32724(gp)
    fd00:	10000326 	beq	r2,zero,fd10 <alt_get_errno+0x24>
    fd04:	d0a00b17 	ldw	r2,-32724(gp)
    fd08:	103ee83a 	callr	r2
    fd0c:	00000106 	br	fd14 <alt_get_errno+0x28>
    fd10:	d0a7c904 	addi	r2,gp,-24796
}
    fd14:	e037883a 	mov	sp,fp
    fd18:	dfc00117 	ldw	ra,4(sp)
    fd1c:	df000017 	ldw	fp,0(sp)
    fd20:	dec00204 	addi	sp,sp,8
    fd24:	f800283a 	ret

0000fd28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fd28:	defffa04 	addi	sp,sp,-24
    fd2c:	dfc00515 	stw	ra,20(sp)
    fd30:	df000415 	stw	fp,16(sp)
    fd34:	df000404 	addi	fp,sp,16
    fd38:	e13ffe15 	stw	r4,-8(fp)
    fd3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    fd40:	e0bffe17 	ldw	r2,-8(fp)
    fd44:	10000326 	beq	r2,zero,fd54 <alt_dev_llist_insert+0x2c>
    fd48:	e0bffe17 	ldw	r2,-8(fp)
    fd4c:	10800217 	ldw	r2,8(r2)
    fd50:	1000061e 	bne	r2,zero,fd6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fd54:	000fcec0 	call	fcec <alt_get_errno>
    fd58:	1007883a 	mov	r3,r2
    fd5c:	00800584 	movi	r2,22
    fd60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    fd64:	00bffa84 	movi	r2,-22
    fd68:	00001306 	br	fdb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    fd6c:	e0bffe17 	ldw	r2,-8(fp)
    fd70:	e0ffff17 	ldw	r3,-4(fp)
    fd74:	e0fffc15 	stw	r3,-16(fp)
    fd78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fd7c:	e0bffd17 	ldw	r2,-12(fp)
    fd80:	e0fffc17 	ldw	r3,-16(fp)
    fd84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fd88:	e0bffc17 	ldw	r2,-16(fp)
    fd8c:	10c00017 	ldw	r3,0(r2)
    fd90:	e0bffd17 	ldw	r2,-12(fp)
    fd94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fd98:	e0bffc17 	ldw	r2,-16(fp)
    fd9c:	10800017 	ldw	r2,0(r2)
    fda0:	e0fffd17 	ldw	r3,-12(fp)
    fda4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fda8:	e0bffc17 	ldw	r2,-16(fp)
    fdac:	e0fffd17 	ldw	r3,-12(fp)
    fdb0:	10c00015 	stw	r3,0(r2)

  return 0;  
    fdb4:	0005883a 	mov	r2,zero
}
    fdb8:	e037883a 	mov	sp,fp
    fdbc:	dfc00117 	ldw	ra,4(sp)
    fdc0:	df000017 	ldw	fp,0(sp)
    fdc4:	dec00204 	addi	sp,sp,8
    fdc8:	f800283a 	ret

0000fdcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    fdcc:	defffd04 	addi	sp,sp,-12
    fdd0:	dfc00215 	stw	ra,8(sp)
    fdd4:	df000115 	stw	fp,4(sp)
    fdd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fddc:	00800074 	movhi	r2,1
    fde0:	10840904 	addi	r2,r2,4132
    fde4:	e0bfff15 	stw	r2,-4(fp)
    fde8:	00000606 	br	fe04 <_do_ctors+0x38>
        (*ctor) (); 
    fdec:	e0bfff17 	ldw	r2,-4(fp)
    fdf0:	10800017 	ldw	r2,0(r2)
    fdf4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fdf8:	e0bfff17 	ldw	r2,-4(fp)
    fdfc:	10bfff04 	addi	r2,r2,-4
    fe00:	e0bfff15 	stw	r2,-4(fp)
    fe04:	e0ffff17 	ldw	r3,-4(fp)
    fe08:	00800074 	movhi	r2,1
    fe0c:	10840a04 	addi	r2,r2,4136
    fe10:	18bff62e 	bgeu	r3,r2,fdec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fdec>
        (*ctor) (); 
}
    fe14:	0001883a 	nop
    fe18:	e037883a 	mov	sp,fp
    fe1c:	dfc00117 	ldw	ra,4(sp)
    fe20:	df000017 	ldw	fp,0(sp)
    fe24:	dec00204 	addi	sp,sp,8
    fe28:	f800283a 	ret

0000fe2c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fe2c:	defffd04 	addi	sp,sp,-12
    fe30:	dfc00215 	stw	ra,8(sp)
    fe34:	df000115 	stw	fp,4(sp)
    fe38:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fe3c:	00800074 	movhi	r2,1
    fe40:	10840904 	addi	r2,r2,4132
    fe44:	e0bfff15 	stw	r2,-4(fp)
    fe48:	00000606 	br	fe64 <_do_dtors+0x38>
        (*dtor) (); 
    fe4c:	e0bfff17 	ldw	r2,-4(fp)
    fe50:	10800017 	ldw	r2,0(r2)
    fe54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fe58:	e0bfff17 	ldw	r2,-4(fp)
    fe5c:	10bfff04 	addi	r2,r2,-4
    fe60:	e0bfff15 	stw	r2,-4(fp)
    fe64:	e0ffff17 	ldw	r3,-4(fp)
    fe68:	00800074 	movhi	r2,1
    fe6c:	10840a04 	addi	r2,r2,4136
    fe70:	18bff62e 	bgeu	r3,r2,fe4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe4c>
        (*dtor) (); 
}
    fe74:	0001883a 	nop
    fe78:	e037883a 	mov	sp,fp
    fe7c:	dfc00117 	ldw	ra,4(sp)
    fe80:	df000017 	ldw	fp,0(sp)
    fe84:	dec00204 	addi	sp,sp,8
    fe88:	f800283a 	ret

0000fe8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fe8c:	defffa04 	addi	sp,sp,-24
    fe90:	dfc00515 	stw	ra,20(sp)
    fe94:	df000415 	stw	fp,16(sp)
    fe98:	df000404 	addi	fp,sp,16
    fe9c:	e13ffe15 	stw	r4,-8(fp)
    fea0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fea4:	e0bfff17 	ldw	r2,-4(fp)
    fea8:	10800017 	ldw	r2,0(r2)
    feac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    feb0:	e13ffe17 	ldw	r4,-8(fp)
    feb4:	000150c0 	call	150c <strlen>
    feb8:	10800044 	addi	r2,r2,1
    febc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fec0:	00000d06 	br	fef8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fec4:	e0bffc17 	ldw	r2,-16(fp)
    fec8:	10800217 	ldw	r2,8(r2)
    fecc:	e0fffd17 	ldw	r3,-12(fp)
    fed0:	180d883a 	mov	r6,r3
    fed4:	e17ffe17 	ldw	r5,-8(fp)
    fed8:	1009883a 	mov	r4,r2
    fedc:	0010ce00 	call	10ce0 <memcmp>
    fee0:	1000021e 	bne	r2,zero,feec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    fee4:	e0bffc17 	ldw	r2,-16(fp)
    fee8:	00000706 	br	ff08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    feec:	e0bffc17 	ldw	r2,-16(fp)
    fef0:	10800017 	ldw	r2,0(r2)
    fef4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fef8:	e0fffc17 	ldw	r3,-16(fp)
    fefc:	e0bfff17 	ldw	r2,-4(fp)
    ff00:	18bff01e 	bne	r3,r2,fec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fec4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ff04:	0005883a 	mov	r2,zero
}
    ff08:	e037883a 	mov	sp,fp
    ff0c:	dfc00117 	ldw	ra,4(sp)
    ff10:	df000017 	ldw	fp,0(sp)
    ff14:	dec00204 	addi	sp,sp,8
    ff18:	f800283a 	ret

0000ff1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ff1c:	defffe04 	addi	sp,sp,-8
    ff20:	dfc00115 	stw	ra,4(sp)
    ff24:	df000015 	stw	fp,0(sp)
    ff28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ff2c:	01440004 	movi	r5,4096
    ff30:	0009883a 	mov	r4,zero
    ff34:	0010b680 	call	10b68 <alt_icache_flush>
#endif
}
    ff38:	0001883a 	nop
    ff3c:	e037883a 	mov	sp,fp
    ff40:	dfc00117 	ldw	ra,4(sp)
    ff44:	df000017 	ldw	fp,0(sp)
    ff48:	dec00204 	addi	sp,sp,8
    ff4c:	f800283a 	ret

0000ff50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ff50:	defff904 	addi	sp,sp,-28
    ff54:	dfc00615 	stw	ra,24(sp)
    ff58:	df000515 	stw	fp,20(sp)
    ff5c:	df000504 	addi	fp,sp,20
    ff60:	e13ffc15 	stw	r4,-16(fp)
    ff64:	e17ffd15 	stw	r5,-12(fp)
    ff68:	e1bffe15 	stw	r6,-8(fp)
    ff6c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ff70:	e1bfff17 	ldw	r6,-4(fp)
    ff74:	e17ffe17 	ldw	r5,-8(fp)
    ff78:	e13ffd17 	ldw	r4,-12(fp)
    ff7c:	00103100 	call	10310 <open>
    ff80:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ff84:	e0bffb17 	ldw	r2,-20(fp)
    ff88:	10001c16 	blt	r2,zero,fffc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ff8c:	00800074 	movhi	r2,1
    ff90:	10870304 	addi	r2,r2,7180
    ff94:	e0fffb17 	ldw	r3,-20(fp)
    ff98:	18c00324 	muli	r3,r3,12
    ff9c:	10c5883a 	add	r2,r2,r3
    ffa0:	10c00017 	ldw	r3,0(r2)
    ffa4:	e0bffc17 	ldw	r2,-16(fp)
    ffa8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ffac:	00800074 	movhi	r2,1
    ffb0:	10870304 	addi	r2,r2,7180
    ffb4:	e0fffb17 	ldw	r3,-20(fp)
    ffb8:	18c00324 	muli	r3,r3,12
    ffbc:	10c5883a 	add	r2,r2,r3
    ffc0:	10800104 	addi	r2,r2,4
    ffc4:	10c00017 	ldw	r3,0(r2)
    ffc8:	e0bffc17 	ldw	r2,-16(fp)
    ffcc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ffd0:	00800074 	movhi	r2,1
    ffd4:	10870304 	addi	r2,r2,7180
    ffd8:	e0fffb17 	ldw	r3,-20(fp)
    ffdc:	18c00324 	muli	r3,r3,12
    ffe0:	10c5883a 	add	r2,r2,r3
    ffe4:	10800204 	addi	r2,r2,8
    ffe8:	10c00017 	ldw	r3,0(r2)
    ffec:	e0bffc17 	ldw	r2,-16(fp)
    fff0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    fff4:	e13ffb17 	ldw	r4,-20(fp)
    fff8:	00048f40 	call	48f4 <alt_release_fd>
  }
} 
    fffc:	0001883a 	nop
   10000:	e037883a 	mov	sp,fp
   10004:	dfc00117 	ldw	ra,4(sp)
   10008:	df000017 	ldw	fp,0(sp)
   1000c:	dec00204 	addi	sp,sp,8
   10010:	f800283a 	ret

00010014 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10014:	defffb04 	addi	sp,sp,-20
   10018:	dfc00415 	stw	ra,16(sp)
   1001c:	df000315 	stw	fp,12(sp)
   10020:	df000304 	addi	fp,sp,12
   10024:	e13ffd15 	stw	r4,-12(fp)
   10028:	e17ffe15 	stw	r5,-8(fp)
   1002c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10030:	01c07fc4 	movi	r7,511
   10034:	01800044 	movi	r6,1
   10038:	e17ffd17 	ldw	r5,-12(fp)
   1003c:	01000074 	movhi	r4,1
   10040:	21070604 	addi	r4,r4,7192
   10044:	000ff500 	call	ff50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10048:	01c07fc4 	movi	r7,511
   1004c:	000d883a 	mov	r6,zero
   10050:	e17ffe17 	ldw	r5,-8(fp)
   10054:	01000074 	movhi	r4,1
   10058:	21070304 	addi	r4,r4,7180
   1005c:	000ff500 	call	ff50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10060:	01c07fc4 	movi	r7,511
   10064:	01800044 	movi	r6,1
   10068:	e17fff17 	ldw	r5,-4(fp)
   1006c:	01000074 	movhi	r4,1
   10070:	21070904 	addi	r4,r4,7204
   10074:	000ff500 	call	ff50 <alt_open_fd>
}  
   10078:	0001883a 	nop
   1007c:	e037883a 	mov	sp,fp
   10080:	dfc00117 	ldw	ra,4(sp)
   10084:	df000017 	ldw	fp,0(sp)
   10088:	dec00204 	addi	sp,sp,8
   1008c:	f800283a 	ret

00010090 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   10090:	defff004 	addi	sp,sp,-64
   10094:	df000f15 	stw	fp,60(sp)
   10098:	df000f04 	addi	fp,sp,60
   1009c:	e13ffd15 	stw	r4,-12(fp)
   100a0:	e17ffe15 	stw	r5,-8(fp)
   100a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   100a8:	00bffa84 	movi	r2,-22
   100ac:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   100b0:	e0bffd17 	ldw	r2,-12(fp)
   100b4:	10800828 	cmpgeui	r2,r2,32
   100b8:	1000501e 	bne	r2,zero,101fc <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100bc:	0005303a 	rdctl	r2,status
   100c0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100c4:	e0fff617 	ldw	r3,-40(fp)
   100c8:	00bfff84 	movi	r2,-2
   100cc:	1884703a 	and	r2,r3,r2
   100d0:	1001703a 	wrctl	status,r2
  
  return context;
   100d4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   100d8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   100dc:	008000b4 	movhi	r2,2
   100e0:	10b8d704 	addi	r2,r2,-7332
   100e4:	e0fffd17 	ldw	r3,-12(fp)
   100e8:	180690fa 	slli	r3,r3,3
   100ec:	10c5883a 	add	r2,r2,r3
   100f0:	e0ffff17 	ldw	r3,-4(fp)
   100f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   100f8:	008000b4 	movhi	r2,2
   100fc:	10b8d704 	addi	r2,r2,-7332
   10100:	e0fffd17 	ldw	r3,-12(fp)
   10104:	180690fa 	slli	r3,r3,3
   10108:	10c5883a 	add	r2,r2,r3
   1010c:	10800104 	addi	r2,r2,4
   10110:	e0fffe17 	ldw	r3,-8(fp)
   10114:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10118:	e0bfff17 	ldw	r2,-4(fp)
   1011c:	10001926 	beq	r2,zero,10184 <alt_irq_register+0xf4>
   10120:	e0bffd17 	ldw	r2,-12(fp)
   10124:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10128:	0005303a 	rdctl	r2,status
   1012c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10130:	e0fff717 	ldw	r3,-36(fp)
   10134:	00bfff84 	movi	r2,-2
   10138:	1884703a 	and	r2,r3,r2
   1013c:	1001703a 	wrctl	status,r2
  
  return context;
   10140:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10144:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   10148:	00c00044 	movi	r3,1
   1014c:	e0bff217 	ldw	r2,-56(fp)
   10150:	1884983a 	sll	r2,r3,r2
   10154:	1007883a 	mov	r3,r2
   10158:	d0a7e617 	ldw	r2,-24680(gp)
   1015c:	1884b03a 	or	r2,r3,r2
   10160:	d0a7e615 	stw	r2,-24680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10164:	d0a7e617 	ldw	r2,-24680(gp)
   10168:	100170fa 	wrctl	ienable,r2
   1016c:	e0bff817 	ldw	r2,-32(fp)
   10170:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10174:	e0bff917 	ldw	r2,-28(fp)
   10178:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1017c:	0005883a 	mov	r2,zero
   10180:	00001906 	br	101e8 <alt_irq_register+0x158>
   10184:	e0bffd17 	ldw	r2,-12(fp)
   10188:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1018c:	0005303a 	rdctl	r2,status
   10190:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10194:	e0fffa17 	ldw	r3,-24(fp)
   10198:	00bfff84 	movi	r2,-2
   1019c:	1884703a 	and	r2,r3,r2
   101a0:	1001703a 	wrctl	status,r2
  
  return context;
   101a4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   101a8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   101ac:	00c00044 	movi	r3,1
   101b0:	e0bff417 	ldw	r2,-48(fp)
   101b4:	1884983a 	sll	r2,r3,r2
   101b8:	0084303a 	nor	r2,zero,r2
   101bc:	1007883a 	mov	r3,r2
   101c0:	d0a7e617 	ldw	r2,-24680(gp)
   101c4:	1884703a 	and	r2,r3,r2
   101c8:	d0a7e615 	stw	r2,-24680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   101cc:	d0a7e617 	ldw	r2,-24680(gp)
   101d0:	100170fa 	wrctl	ienable,r2
   101d4:	e0bffb17 	ldw	r2,-20(fp)
   101d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101dc:	e0bffc17 	ldw	r2,-16(fp)
   101e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   101e4:	0005883a 	mov	r2,zero
   101e8:	e0bff115 	stw	r2,-60(fp)
   101ec:	e0bff317 	ldw	r2,-52(fp)
   101f0:	e0bff515 	stw	r2,-44(fp)
   101f4:	e0bff517 	ldw	r2,-44(fp)
   101f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   101fc:	e0bff117 	ldw	r2,-60(fp)
}
   10200:	e037883a 	mov	sp,fp
   10204:	df000017 	ldw	fp,0(sp)
   10208:	dec00104 	addi	sp,sp,4
   1020c:	f800283a 	ret

00010210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10210:	defffe04 	addi	sp,sp,-8
   10214:	dfc00115 	stw	ra,4(sp)
   10218:	df000015 	stw	fp,0(sp)
   1021c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10220:	d0a00b17 	ldw	r2,-32724(gp)
   10224:	10000326 	beq	r2,zero,10234 <alt_get_errno+0x24>
   10228:	d0a00b17 	ldw	r2,-32724(gp)
   1022c:	103ee83a 	callr	r2
   10230:	00000106 	br	10238 <alt_get_errno+0x28>
   10234:	d0a7c904 	addi	r2,gp,-24796
}
   10238:	e037883a 	mov	sp,fp
   1023c:	dfc00117 	ldw	ra,4(sp)
   10240:	df000017 	ldw	fp,0(sp)
   10244:	dec00204 	addi	sp,sp,8
   10248:	f800283a 	ret

0001024c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1024c:	defffd04 	addi	sp,sp,-12
   10250:	df000215 	stw	fp,8(sp)
   10254:	df000204 	addi	fp,sp,8
   10258:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1025c:	e0bfff17 	ldw	r2,-4(fp)
   10260:	10800217 	ldw	r2,8(r2)
   10264:	10d00034 	orhi	r3,r2,16384
   10268:	e0bfff17 	ldw	r2,-4(fp)
   1026c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10270:	e03ffe15 	stw	zero,-8(fp)
   10274:	00001d06 	br	102ec <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10278:	00800074 	movhi	r2,1
   1027c:	10870304 	addi	r2,r2,7180
   10280:	e0fffe17 	ldw	r3,-8(fp)
   10284:	18c00324 	muli	r3,r3,12
   10288:	10c5883a 	add	r2,r2,r3
   1028c:	10c00017 	ldw	r3,0(r2)
   10290:	e0bfff17 	ldw	r2,-4(fp)
   10294:	10800017 	ldw	r2,0(r2)
   10298:	1880111e 	bne	r3,r2,102e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1029c:	00800074 	movhi	r2,1
   102a0:	10870304 	addi	r2,r2,7180
   102a4:	e0fffe17 	ldw	r3,-8(fp)
   102a8:	18c00324 	muli	r3,r3,12
   102ac:	10c5883a 	add	r2,r2,r3
   102b0:	10800204 	addi	r2,r2,8
   102b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   102b8:	1000090e 	bge	r2,zero,102e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   102bc:	e0bffe17 	ldw	r2,-8(fp)
   102c0:	10c00324 	muli	r3,r2,12
   102c4:	00800074 	movhi	r2,1
   102c8:	10870304 	addi	r2,r2,7180
   102cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   102d0:	e0bfff17 	ldw	r2,-4(fp)
   102d4:	18800226 	beq	r3,r2,102e0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   102d8:	00bffcc4 	movi	r2,-13
   102dc:	00000806 	br	10300 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   102e0:	e0bffe17 	ldw	r2,-8(fp)
   102e4:	10800044 	addi	r2,r2,1
   102e8:	e0bffe15 	stw	r2,-8(fp)
   102ec:	d0a00a17 	ldw	r2,-32728(gp)
   102f0:	1007883a 	mov	r3,r2
   102f4:	e0bffe17 	ldw	r2,-8(fp)
   102f8:	18bfdf2e 	bgeu	r3,r2,10278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010278>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   102fc:	0005883a 	mov	r2,zero
}
   10300:	e037883a 	mov	sp,fp
   10304:	df000017 	ldw	fp,0(sp)
   10308:	dec00104 	addi	sp,sp,4
   1030c:	f800283a 	ret

00010310 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10310:	defff604 	addi	sp,sp,-40
   10314:	dfc00915 	stw	ra,36(sp)
   10318:	df000815 	stw	fp,32(sp)
   1031c:	df000804 	addi	fp,sp,32
   10320:	e13ffd15 	stw	r4,-12(fp)
   10324:	e17ffe15 	stw	r5,-8(fp)
   10328:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1032c:	00bfffc4 	movi	r2,-1
   10330:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10334:	00bffb44 	movi	r2,-19
   10338:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1033c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10340:	d1600804 	addi	r5,gp,-32736
   10344:	e13ffd17 	ldw	r4,-12(fp)
   10348:	000fe8c0 	call	fe8c <alt_find_dev>
   1034c:	e0bff815 	stw	r2,-32(fp)
   10350:	e0bff817 	ldw	r2,-32(fp)
   10354:	1000051e 	bne	r2,zero,1036c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10358:	e13ffd17 	ldw	r4,-12(fp)
   1035c:	00109840 	call	10984 <alt_find_file>
   10360:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10364:	00800044 	movi	r2,1
   10368:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1036c:	e0bff817 	ldw	r2,-32(fp)
   10370:	10002926 	beq	r2,zero,10418 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10374:	e13ff817 	ldw	r4,-32(fp)
   10378:	0010a8c0 	call	10a8c <alt_get_fd>
   1037c:	e0bff915 	stw	r2,-28(fp)
   10380:	e0bff917 	ldw	r2,-28(fp)
   10384:	1000030e 	bge	r2,zero,10394 <open+0x84>
    {
      status = index;
   10388:	e0bff917 	ldw	r2,-28(fp)
   1038c:	e0bffa15 	stw	r2,-24(fp)
   10390:	00002306 	br	10420 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10394:	e0bff917 	ldw	r2,-28(fp)
   10398:	10c00324 	muli	r3,r2,12
   1039c:	00800074 	movhi	r2,1
   103a0:	10870304 	addi	r2,r2,7180
   103a4:	1885883a 	add	r2,r3,r2
   103a8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   103ac:	e0fffe17 	ldw	r3,-8(fp)
   103b0:	00900034 	movhi	r2,16384
   103b4:	10bfffc4 	addi	r2,r2,-1
   103b8:	1886703a 	and	r3,r3,r2
   103bc:	e0bffc17 	ldw	r2,-16(fp)
   103c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   103c4:	e0bffb17 	ldw	r2,-20(fp)
   103c8:	1000051e 	bne	r2,zero,103e0 <open+0xd0>
   103cc:	e13ffc17 	ldw	r4,-16(fp)
   103d0:	001024c0 	call	1024c <alt_file_locked>
   103d4:	e0bffa15 	stw	r2,-24(fp)
   103d8:	e0bffa17 	ldw	r2,-24(fp)
   103dc:	10001016 	blt	r2,zero,10420 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   103e0:	e0bff817 	ldw	r2,-32(fp)
   103e4:	10800317 	ldw	r2,12(r2)
   103e8:	10000826 	beq	r2,zero,1040c <open+0xfc>
   103ec:	e0bff817 	ldw	r2,-32(fp)
   103f0:	10800317 	ldw	r2,12(r2)
   103f4:	e1ffff17 	ldw	r7,-4(fp)
   103f8:	e1bffe17 	ldw	r6,-8(fp)
   103fc:	e17ffd17 	ldw	r5,-12(fp)
   10400:	e13ffc17 	ldw	r4,-16(fp)
   10404:	103ee83a 	callr	r2
   10408:	00000106 	br	10410 <open+0x100>
   1040c:	0005883a 	mov	r2,zero
   10410:	e0bffa15 	stw	r2,-24(fp)
   10414:	00000206 	br	10420 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10418:	00bffb44 	movi	r2,-19
   1041c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10420:	e0bffa17 	ldw	r2,-24(fp)
   10424:	1000090e 	bge	r2,zero,1044c <open+0x13c>
  {
    alt_release_fd (index);  
   10428:	e13ff917 	ldw	r4,-28(fp)
   1042c:	00048f40 	call	48f4 <alt_release_fd>
    ALT_ERRNO = -status;
   10430:	00102100 	call	10210 <alt_get_errno>
   10434:	1007883a 	mov	r3,r2
   10438:	e0bffa17 	ldw	r2,-24(fp)
   1043c:	0085c83a 	sub	r2,zero,r2
   10440:	18800015 	stw	r2,0(r3)
    return -1;
   10444:	00bfffc4 	movi	r2,-1
   10448:	00000106 	br	10450 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1044c:	e0bff917 	ldw	r2,-28(fp)
}
   10450:	e037883a 	mov	sp,fp
   10454:	dfc00117 	ldw	ra,4(sp)
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00204 	addi	sp,sp,8
   10460:	f800283a 	ret

00010464 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10464:	defffa04 	addi	sp,sp,-24
   10468:	df000515 	stw	fp,20(sp)
   1046c:	df000504 	addi	fp,sp,20
   10470:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10474:	0005303a 	rdctl	r2,status
   10478:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1047c:	e0fffc17 	ldw	r3,-16(fp)
   10480:	00bfff84 	movi	r2,-2
   10484:	1884703a 	and	r2,r3,r2
   10488:	1001703a 	wrctl	status,r2
  
  return context;
   1048c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10490:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10494:	e0bfff17 	ldw	r2,-4(fp)
   10498:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1049c:	e0bffd17 	ldw	r2,-12(fp)
   104a0:	10800017 	ldw	r2,0(r2)
   104a4:	e0fffd17 	ldw	r3,-12(fp)
   104a8:	18c00117 	ldw	r3,4(r3)
   104ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   104b0:	e0bffd17 	ldw	r2,-12(fp)
   104b4:	10800117 	ldw	r2,4(r2)
   104b8:	e0fffd17 	ldw	r3,-12(fp)
   104bc:	18c00017 	ldw	r3,0(r3)
   104c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   104c4:	e0bffd17 	ldw	r2,-12(fp)
   104c8:	e0fffd17 	ldw	r3,-12(fp)
   104cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   104d0:	e0bffd17 	ldw	r2,-12(fp)
   104d4:	e0fffd17 	ldw	r3,-12(fp)
   104d8:	10c00015 	stw	r3,0(r2)
   104dc:	e0bffb17 	ldw	r2,-20(fp)
   104e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104e4:	e0bffe17 	ldw	r2,-8(fp)
   104e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   104ec:	0001883a 	nop
   104f0:	e037883a 	mov	sp,fp
   104f4:	df000017 	ldw	fp,0(sp)
   104f8:	dec00104 	addi	sp,sp,4
   104fc:	f800283a 	ret

00010500 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10500:	defffb04 	addi	sp,sp,-20
   10504:	dfc00415 	stw	ra,16(sp)
   10508:	df000315 	stw	fp,12(sp)
   1050c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10510:	d0a02d17 	ldw	r2,-32588(gp)
   10514:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10518:	d0a7e817 	ldw	r2,-24672(gp)
   1051c:	10800044 	addi	r2,r2,1
   10520:	d0a7e815 	stw	r2,-24672(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10524:	00002e06 	br	105e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10528:	e0bffd17 	ldw	r2,-12(fp)
   1052c:	10800017 	ldw	r2,0(r2)
   10530:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10534:	e0bffd17 	ldw	r2,-12(fp)
   10538:	10800403 	ldbu	r2,16(r2)
   1053c:	10803fcc 	andi	r2,r2,255
   10540:	10000426 	beq	r2,zero,10554 <alt_tick+0x54>
   10544:	d0a7e817 	ldw	r2,-24672(gp)
   10548:	1000021e 	bne	r2,zero,10554 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1054c:	e0bffd17 	ldw	r2,-12(fp)
   10550:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10554:	e0bffd17 	ldw	r2,-12(fp)
   10558:	10800217 	ldw	r2,8(r2)
   1055c:	d0e7e817 	ldw	r3,-24672(gp)
   10560:	18801d36 	bltu	r3,r2,105d8 <alt_tick+0xd8>
   10564:	e0bffd17 	ldw	r2,-12(fp)
   10568:	10800403 	ldbu	r2,16(r2)
   1056c:	10803fcc 	andi	r2,r2,255
   10570:	1000191e 	bne	r2,zero,105d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10574:	e0bffd17 	ldw	r2,-12(fp)
   10578:	10800317 	ldw	r2,12(r2)
   1057c:	e0fffd17 	ldw	r3,-12(fp)
   10580:	18c00517 	ldw	r3,20(r3)
   10584:	1809883a 	mov	r4,r3
   10588:	103ee83a 	callr	r2
   1058c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10590:	e0bfff17 	ldw	r2,-4(fp)
   10594:	1000031e 	bne	r2,zero,105a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10598:	e13ffd17 	ldw	r4,-12(fp)
   1059c:	00104640 	call	10464 <alt_alarm_stop>
   105a0:	00000d06 	br	105d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   105a4:	e0bffd17 	ldw	r2,-12(fp)
   105a8:	10c00217 	ldw	r3,8(r2)
   105ac:	e0bfff17 	ldw	r2,-4(fp)
   105b0:	1887883a 	add	r3,r3,r2
   105b4:	e0bffd17 	ldw	r2,-12(fp)
   105b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   105bc:	e0bffd17 	ldw	r2,-12(fp)
   105c0:	10c00217 	ldw	r3,8(r2)
   105c4:	d0a7e817 	ldw	r2,-24672(gp)
   105c8:	1880032e 	bgeu	r3,r2,105d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   105cc:	e0bffd17 	ldw	r2,-12(fp)
   105d0:	00c00044 	movi	r3,1
   105d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   105d8:	e0bffe17 	ldw	r2,-8(fp)
   105dc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   105e0:	e0fffd17 	ldw	r3,-12(fp)
   105e4:	d0a02d04 	addi	r2,gp,-32588
   105e8:	18bfcf1e 	bne	r3,r2,10528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010528>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   105ec:	0005ae00 	call	5ae0 <OSTimeTick>
}
   105f0:	0001883a 	nop
   105f4:	e037883a 	mov	sp,fp
   105f8:	dfc00117 	ldw	ra,4(sp)
   105fc:	df000017 	ldw	fp,0(sp)
   10600:	dec00204 	addi	sp,sp,8
   10604:	f800283a 	ret

00010608 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10608:	deffff04 	addi	sp,sp,-4
   1060c:	df000015 	stw	fp,0(sp)
   10610:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10614:	000170fa 	wrctl	ienable,zero
}
   10618:	0001883a 	nop
   1061c:	e037883a 	mov	sp,fp
   10620:	df000017 	ldw	fp,0(sp)
   10624:	dec00104 	addi	sp,sp,4
   10628:	f800283a 	ret

0001062c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1062c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   10630:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   10634:	d127e117 	ldw	r4,-24700(gp)

      stw ra,  0(sp)
   10638:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1063c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   10640:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   10644:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   10648:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1064c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   10650:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   10654:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   10658:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1065c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   10660:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   10664:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   10668:	00108a00 	call	108a0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1066c:	d127dc17 	ldw	r4,-24720(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   10670:	d167d407 	ldb	r5,-24752(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   10674:	d127e115 	stw	r4,-24700(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   10678:	d167d445 	stb	r5,-24751(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1067c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   10680:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   10684:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   10688:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1068c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   10690:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   10694:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   10698:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1069c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   106a0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   106a4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   106a8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   106ac:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   106b0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   106b4:	f800283a 	ret

000106b8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   106b8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   106bc:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   106c0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   106c4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   106c8:	00108a00 	call	108a0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   106cc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   106d0:	d4a7d245 	stb	r18,-24759(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   106d4:	003fe506 	br	1066c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701066c>

000106d8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   106d8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   106dc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   106e0:	10800054 	ori	r2,r2,1
      wrctl status, r2
   106e4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   106e8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   106ec:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   106f0:	dec00204 	addi	sp,sp,8

      callr r2
   106f4:	103ee83a 	callr	r2

      nop
   106f8:	0001883a 	nop

000106fc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   106fc:	defff704 	addi	sp,sp,-36
   10700:	dfc00815 	stw	ra,32(sp)
   10704:	df000715 	stw	fp,28(sp)
   10708:	df000704 	addi	fp,sp,28
   1070c:	e13ffc15 	stw	r4,-16(fp)
   10710:	e17ffd15 	stw	r5,-12(fp)
   10714:	e1bffe15 	stw	r6,-8(fp)
   10718:	3805883a 	mov	r2,r7
   1071c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   10720:	e0fffe17 	ldw	r3,-8(fp)
   10724:	00bfff04 	movi	r2,-4
   10728:	1884703a 	and	r2,r3,r2
   1072c:	10bef704 	addi	r2,r2,-1060
   10730:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   10734:	01810904 	movi	r6,1060
   10738:	000b883a 	mov	r5,zero
   1073c:	e13ff917 	ldw	r4,-28(fp)
   10740:	0002b1c0 	call	2b1c <memset>
   10744:	e0bff917 	ldw	r2,-28(fp)
   10748:	10c0bb04 	addi	r3,r2,748
   1074c:	e0bff917 	ldw	r2,-28(fp)
   10750:	10c00115 	stw	r3,4(r2)
   10754:	e0bff917 	ldw	r2,-28(fp)
   10758:	10c0d504 	addi	r3,r2,852
   1075c:	e0bff917 	ldw	r2,-28(fp)
   10760:	10c00215 	stw	r3,8(r2)
   10764:	e0bff917 	ldw	r2,-28(fp)
   10768:	10c0ef04 	addi	r3,r2,956
   1076c:	e0bff917 	ldw	r2,-28(fp)
   10770:	10c00315 	stw	r3,12(r2)
   10774:	e0fff917 	ldw	r3,-28(fp)
   10778:	00800074 	movhi	r2,1
   1077c:	1084e304 	addi	r2,r2,5004
   10780:	18800d15 	stw	r2,52(r3)
   10784:	e0bff917 	ldw	r2,-28(fp)
   10788:	00c00044 	movi	r3,1
   1078c:	10c02915 	stw	r3,164(r2)
   10790:	10002a15 	stw	zero,168(r2)
   10794:	e0bff917 	ldw	r2,-28(fp)
   10798:	00ccc384 	movi	r3,13070
   1079c:	10c02b0d 	sth	r3,172(r2)
   107a0:	e0bff917 	ldw	r2,-28(fp)
   107a4:	00eaf344 	movi	r3,-21555
   107a8:	10c02b8d 	sth	r3,174(r2)
   107ac:	e0bff917 	ldw	r2,-28(fp)
   107b0:	00c48d04 	movi	r3,4660
   107b4:	10c02c0d 	sth	r3,176(r2)
   107b8:	e0bff917 	ldw	r2,-28(fp)
   107bc:	00f99b44 	movi	r3,-6547
   107c0:	10c02c8d 	sth	r3,178(r2)
   107c4:	e0bff917 	ldw	r2,-28(fp)
   107c8:	00f7bb04 	movi	r3,-8468
   107cc:	10c02d0d 	sth	r3,180(r2)
   107d0:	e0bff917 	ldw	r2,-28(fp)
   107d4:	00c00144 	movi	r3,5
   107d8:	10c02d8d 	sth	r3,182(r2)
   107dc:	e0bff917 	ldw	r2,-28(fp)
   107e0:	00c002c4 	movi	r3,11
   107e4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   107e8:	e0bff917 	ldw	r2,-28(fp)
   107ec:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   107f0:	e0bffa17 	ldw	r2,-24(fp)
   107f4:	10bff304 	addi	r2,r2,-52
   107f8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   107fc:	e0bffb17 	ldw	r2,-20(fp)
   10800:	10800c04 	addi	r2,r2,48
   10804:	e0fffc17 	ldw	r3,-16(fp)
   10808:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1080c:	e0bffb17 	ldw	r2,-20(fp)
   10810:	10800b04 	addi	r2,r2,44
   10814:	e0fffd17 	ldw	r3,-12(fp)
   10818:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1081c:	e0bffb17 	ldw	r2,-20(fp)
   10820:	10800a04 	addi	r2,r2,40
   10824:	e0fff917 	ldw	r3,-28(fp)
   10828:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1082c:	00800074 	movhi	r2,1
   10830:	1081b604 	addi	r2,r2,1752
   10834:	10c00104 	addi	r3,r2,4
   10838:	e0bffb17 	ldw	r2,-20(fp)
   1083c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   10840:	e0bffb17 	ldw	r2,-20(fp)
}
   10844:	e037883a 	mov	sp,fp
   10848:	dfc00117 	ldw	ra,4(sp)
   1084c:	df000017 	ldw	fp,0(sp)
   10850:	dec00204 	addi	sp,sp,8
   10854:	f800283a 	ret

00010858 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   10858:	defffe04 	addi	sp,sp,-8
   1085c:	df000115 	stw	fp,4(sp)
   10860:	df000104 	addi	fp,sp,4
   10864:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   10868:	0001883a 	nop
   1086c:	e037883a 	mov	sp,fp
   10870:	df000017 	ldw	fp,0(sp)
   10874:	dec00104 	addi	sp,sp,4
   10878:	f800283a 	ret

0001087c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1087c:	defffe04 	addi	sp,sp,-8
   10880:	df000115 	stw	fp,4(sp)
   10884:	df000104 	addi	fp,sp,4
   10888:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1088c:	0001883a 	nop
   10890:	e037883a 	mov	sp,fp
   10894:	df000017 	ldw	fp,0(sp)
   10898:	dec00104 	addi	sp,sp,4
   1089c:	f800283a 	ret

000108a0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   108a0:	deffff04 	addi	sp,sp,-4
   108a4:	df000015 	stw	fp,0(sp)
   108a8:	d839883a 	mov	fp,sp
}
   108ac:	0001883a 	nop
   108b0:	e037883a 	mov	sp,fp
   108b4:	df000017 	ldw	fp,0(sp)
   108b8:	dec00104 	addi	sp,sp,4
   108bc:	f800283a 	ret

000108c0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   108c0:	deffff04 	addi	sp,sp,-4
   108c4:	df000015 	stw	fp,0(sp)
   108c8:	d839883a 	mov	fp,sp
}
   108cc:	0001883a 	nop
   108d0:	e037883a 	mov	sp,fp
   108d4:	df000017 	ldw	fp,0(sp)
   108d8:	dec00104 	addi	sp,sp,4
   108dc:	f800283a 	ret

000108e0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   108e0:	deffff04 	addi	sp,sp,-4
   108e4:	df000015 	stw	fp,0(sp)
   108e8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   108ec:	0001883a 	nop
   108f0:	e037883a 	mov	sp,fp
   108f4:	df000017 	ldw	fp,0(sp)
   108f8:	dec00104 	addi	sp,sp,4
   108fc:	f800283a 	ret

00010900 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   10900:	deffff04 	addi	sp,sp,-4
   10904:	df000015 	stw	fp,0(sp)
   10908:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1090c:	0001883a 	nop
   10910:	e037883a 	mov	sp,fp
   10914:	df000017 	ldw	fp,0(sp)
   10918:	dec00104 	addi	sp,sp,4
   1091c:	f800283a 	ret

00010920 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   10920:	deffff04 	addi	sp,sp,-4
   10924:	df000015 	stw	fp,0(sp)
   10928:	d839883a 	mov	fp,sp
}
   1092c:	0001883a 	nop
   10930:	e037883a 	mov	sp,fp
   10934:	df000017 	ldw	fp,0(sp)
   10938:	dec00104 	addi	sp,sp,4
   1093c:	f800283a 	ret

00010940 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   10940:	deffff04 	addi	sp,sp,-4
   10944:	df000015 	stw	fp,0(sp)
   10948:	d839883a 	mov	fp,sp
}
   1094c:	0001883a 	nop
   10950:	e037883a 	mov	sp,fp
   10954:	df000017 	ldw	fp,0(sp)
   10958:	dec00104 	addi	sp,sp,4
   1095c:	f800283a 	ret

00010960 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   10960:	defffe04 	addi	sp,sp,-8
   10964:	df000115 	stw	fp,4(sp)
   10968:	df000104 	addi	fp,sp,4
   1096c:	e13fff15 	stw	r4,-4(fp)
}
   10970:	0001883a 	nop
   10974:	e037883a 	mov	sp,fp
   10978:	df000017 	ldw	fp,0(sp)
   1097c:	dec00104 	addi	sp,sp,4
   10980:	f800283a 	ret

00010984 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10984:	defffb04 	addi	sp,sp,-20
   10988:	dfc00415 	stw	ra,16(sp)
   1098c:	df000315 	stw	fp,12(sp)
   10990:	df000304 	addi	fp,sp,12
   10994:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10998:	d0a00617 	ldw	r2,-32744(gp)
   1099c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   109a0:	00003106 	br	10a68 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   109a4:	e0bffd17 	ldw	r2,-12(fp)
   109a8:	10800217 	ldw	r2,8(r2)
   109ac:	1009883a 	mov	r4,r2
   109b0:	000150c0 	call	150c <strlen>
   109b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   109b8:	e0bffd17 	ldw	r2,-12(fp)
   109bc:	10c00217 	ldw	r3,8(r2)
   109c0:	e0bffe17 	ldw	r2,-8(fp)
   109c4:	10bfffc4 	addi	r2,r2,-1
   109c8:	1885883a 	add	r2,r3,r2
   109cc:	10800003 	ldbu	r2,0(r2)
   109d0:	10803fcc 	andi	r2,r2,255
   109d4:	1080201c 	xori	r2,r2,128
   109d8:	10bfe004 	addi	r2,r2,-128
   109dc:	10800bd8 	cmpnei	r2,r2,47
   109e0:	1000031e 	bne	r2,zero,109f0 <alt_find_file+0x6c>
    {
      len -= 1;
   109e4:	e0bffe17 	ldw	r2,-8(fp)
   109e8:	10bfffc4 	addi	r2,r2,-1
   109ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   109f0:	e0bffe17 	ldw	r2,-8(fp)
   109f4:	e0ffff17 	ldw	r3,-4(fp)
   109f8:	1885883a 	add	r2,r3,r2
   109fc:	10800003 	ldbu	r2,0(r2)
   10a00:	10803fcc 	andi	r2,r2,255
   10a04:	1080201c 	xori	r2,r2,128
   10a08:	10bfe004 	addi	r2,r2,-128
   10a0c:	10800be0 	cmpeqi	r2,r2,47
   10a10:	1000081e 	bne	r2,zero,10a34 <alt_find_file+0xb0>
   10a14:	e0bffe17 	ldw	r2,-8(fp)
   10a18:	e0ffff17 	ldw	r3,-4(fp)
   10a1c:	1885883a 	add	r2,r3,r2
   10a20:	10800003 	ldbu	r2,0(r2)
   10a24:	10803fcc 	andi	r2,r2,255
   10a28:	1080201c 	xori	r2,r2,128
   10a2c:	10bfe004 	addi	r2,r2,-128
   10a30:	10000a1e 	bne	r2,zero,10a5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10a34:	e0bffd17 	ldw	r2,-12(fp)
   10a38:	10800217 	ldw	r2,8(r2)
   10a3c:	e0fffe17 	ldw	r3,-8(fp)
   10a40:	180d883a 	mov	r6,r3
   10a44:	e17fff17 	ldw	r5,-4(fp)
   10a48:	1009883a 	mov	r4,r2
   10a4c:	0010ce00 	call	10ce0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10a50:	1000021e 	bne	r2,zero,10a5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10a54:	e0bffd17 	ldw	r2,-12(fp)
   10a58:	00000706 	br	10a78 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10a5c:	e0bffd17 	ldw	r2,-12(fp)
   10a60:	10800017 	ldw	r2,0(r2)
   10a64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10a68:	e0fffd17 	ldw	r3,-12(fp)
   10a6c:	d0a00604 	addi	r2,gp,-32744
   10a70:	18bfcc1e 	bne	r3,r2,109a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70109a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10a74:	0005883a 	mov	r2,zero
}
   10a78:	e037883a 	mov	sp,fp
   10a7c:	dfc00117 	ldw	ra,4(sp)
   10a80:	df000017 	ldw	fp,0(sp)
   10a84:	dec00204 	addi	sp,sp,8
   10a88:	f800283a 	ret

00010a8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10a8c:	defff904 	addi	sp,sp,-28
   10a90:	dfc00615 	stw	ra,24(sp)
   10a94:	df000515 	stw	fp,20(sp)
   10a98:	df000504 	addi	fp,sp,20
   10a9c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10aa0:	00bffa04 	movi	r2,-24
   10aa4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   10aa8:	d0a7ca17 	ldw	r2,-24792(gp)
   10aac:	e0bffd15 	stw	r2,-12(fp)
   10ab0:	e03ffe0d 	sth	zero,-8(fp)
   10ab4:	e0bffe0b 	ldhu	r2,-8(fp)
   10ab8:	e0fffe84 	addi	r3,fp,-6
   10abc:	180d883a 	mov	r6,r3
   10ac0:	100b883a 	mov	r5,r2
   10ac4:	e13ffd17 	ldw	r4,-12(fp)
   10ac8:	000adfc0 	call	adfc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10acc:	e03ffb15 	stw	zero,-20(fp)
   10ad0:	00001906 	br	10b38 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   10ad4:	00800074 	movhi	r2,1
   10ad8:	10870304 	addi	r2,r2,7180
   10adc:	e0fffb17 	ldw	r3,-20(fp)
   10ae0:	18c00324 	muli	r3,r3,12
   10ae4:	10c5883a 	add	r2,r2,r3
   10ae8:	10800017 	ldw	r2,0(r2)
   10aec:	10000f1e 	bne	r2,zero,10b2c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   10af0:	00800074 	movhi	r2,1
   10af4:	10870304 	addi	r2,r2,7180
   10af8:	e0fffb17 	ldw	r3,-20(fp)
   10afc:	18c00324 	muli	r3,r3,12
   10b00:	10c5883a 	add	r2,r2,r3
   10b04:	e0ffff17 	ldw	r3,-4(fp)
   10b08:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10b0c:	d0e00a17 	ldw	r3,-32728(gp)
   10b10:	e0bffb17 	ldw	r2,-20(fp)
   10b14:	1880020e 	bge	r3,r2,10b20 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   10b18:	e0bffb17 	ldw	r2,-20(fp)
   10b1c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10b20:	e0bffb17 	ldw	r2,-20(fp)
   10b24:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   10b28:	00000606 	br	10b44 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10b2c:	e0bffb17 	ldw	r2,-20(fp)
   10b30:	10800044 	addi	r2,r2,1
   10b34:	e0bffb15 	stw	r2,-20(fp)
   10b38:	e0bffb17 	ldw	r2,-20(fp)
   10b3c:	10800810 	cmplti	r2,r2,32
   10b40:	103fe41e 	bne	r2,zero,10ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ad4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   10b44:	d0a7ca17 	ldw	r2,-24792(gp)
   10b48:	1009883a 	mov	r4,r2
   10b4c:	000b1740 	call	b174 <OSSemPost>

  return rc;
   10b50:	e0bffc17 	ldw	r2,-16(fp)
}
   10b54:	e037883a 	mov	sp,fp
   10b58:	dfc00117 	ldw	ra,4(sp)
   10b5c:	df000017 	ldw	fp,0(sp)
   10b60:	dec00204 	addi	sp,sp,8
   10b64:	f800283a 	ret

00010b68 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10b68:	defffb04 	addi	sp,sp,-20
   10b6c:	df000415 	stw	fp,16(sp)
   10b70:	df000404 	addi	fp,sp,16
   10b74:	e13ffe15 	stw	r4,-8(fp)
   10b78:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10b7c:	e0bfff17 	ldw	r2,-4(fp)
   10b80:	10840070 	cmpltui	r2,r2,4097
   10b84:	1000021e 	bne	r2,zero,10b90 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10b88:	00840004 	movi	r2,4096
   10b8c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10b90:	e0fffe17 	ldw	r3,-8(fp)
   10b94:	e0bfff17 	ldw	r2,-4(fp)
   10b98:	1885883a 	add	r2,r3,r2
   10b9c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10ba0:	e0bffe17 	ldw	r2,-8(fp)
   10ba4:	e0bffc15 	stw	r2,-16(fp)
   10ba8:	00000506 	br	10bc0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10bac:	e0bffc17 	ldw	r2,-16(fp)
   10bb0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10bb4:	e0bffc17 	ldw	r2,-16(fp)
   10bb8:	10800804 	addi	r2,r2,32
   10bbc:	e0bffc15 	stw	r2,-16(fp)
   10bc0:	e0fffc17 	ldw	r3,-16(fp)
   10bc4:	e0bffd17 	ldw	r2,-12(fp)
   10bc8:	18bff836 	bltu	r3,r2,10bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010bac>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10bcc:	e0bffe17 	ldw	r2,-8(fp)
   10bd0:	108007cc 	andi	r2,r2,31
   10bd4:	10000226 	beq	r2,zero,10be0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10bd8:	e0bffc17 	ldw	r2,-16(fp)
   10bdc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10be0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10be4:	0001883a 	nop
   10be8:	e037883a 	mov	sp,fp
   10bec:	df000017 	ldw	fp,0(sp)
   10bf0:	dec00104 	addi	sp,sp,4
   10bf4:	f800283a 	ret

00010bf8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10bf8:	defffe04 	addi	sp,sp,-8
   10bfc:	df000115 	stw	fp,4(sp)
   10c00:	df000104 	addi	fp,sp,4
   10c04:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10c08:	e0bfff17 	ldw	r2,-4(fp)
   10c0c:	10bffe84 	addi	r2,r2,-6
   10c10:	10c00428 	cmpgeui	r3,r2,16
   10c14:	18001a1e 	bne	r3,zero,10c80 <alt_exception_cause_generated_bad_addr+0x88>
   10c18:	100690ba 	slli	r3,r2,2
   10c1c:	00800074 	movhi	r2,1
   10c20:	10830c04 	addi	r2,r2,3120
   10c24:	1885883a 	add	r2,r3,r2
   10c28:	10800017 	ldw	r2,0(r2)
   10c2c:	1000683a 	jmp	r2
   10c30:	00010c70 	cmpltui	zero,zero,1073
   10c34:	00010c70 	cmpltui	zero,zero,1073
   10c38:	00010c80 	call	10c8 <display_task_HEX_task+0x60c>
   10c3c:	00010c80 	call	10c8 <display_task_HEX_task+0x60c>
   10c40:	00010c80 	call	10c8 <display_task_HEX_task+0x60c>
   10c44:	00010c70 	cmpltui	zero,zero,1073
   10c48:	00010c78 	rdprs	zero,zero,1073
   10c4c:	00010c80 	call	10c8 <display_task_HEX_task+0x60c>
   10c50:	00010c70 	cmpltui	zero,zero,1073
   10c54:	00010c70 	cmpltui	zero,zero,1073
   10c58:	00010c80 	call	10c8 <display_task_HEX_task+0x60c>
   10c5c:	00010c70 	cmpltui	zero,zero,1073
   10c60:	00010c78 	rdprs	zero,zero,1073
   10c64:	00010c80 	call	10c8 <display_task_HEX_task+0x60c>
   10c68:	00010c80 	call	10c8 <display_task_HEX_task+0x60c>
   10c6c:	00010c70 	cmpltui	zero,zero,1073
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10c70:	00800044 	movi	r2,1
   10c74:	00000306 	br	10c84 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10c78:	0005883a 	mov	r2,zero
   10c7c:	00000106 	br	10c84 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10c80:	0005883a 	mov	r2,zero
  }
}
   10c84:	e037883a 	mov	sp,fp
   10c88:	df000017 	ldw	fp,0(sp)
   10c8c:	dec00104 	addi	sp,sp,4
   10c90:	f800283a 	ret

00010c94 <atexit>:
   10c94:	200b883a 	mov	r5,r4
   10c98:	000f883a 	mov	r7,zero
   10c9c:	000d883a 	mov	r6,zero
   10ca0:	0009883a 	mov	r4,zero
   10ca4:	0010d5c1 	jmpi	10d5c <__register_exitproc>

00010ca8 <exit>:
   10ca8:	defffe04 	addi	sp,sp,-8
   10cac:	000b883a 	mov	r5,zero
   10cb0:	dc000015 	stw	r16,0(sp)
   10cb4:	dfc00115 	stw	ra,4(sp)
   10cb8:	2021883a 	mov	r16,r4
   10cbc:	0010e740 	call	10e74 <__call_exitprocs>
   10cc0:	00800074 	movhi	r2,1
   10cc4:	108c4304 	addi	r2,r2,12556
   10cc8:	11000017 	ldw	r4,0(r2)
   10ccc:	20800f17 	ldw	r2,60(r4)
   10cd0:	10000126 	beq	r2,zero,10cd8 <exit+0x30>
   10cd4:	103ee83a 	callr	r2
   10cd8:	8009883a 	mov	r4,r16
   10cdc:	0010ff40 	call	10ff4 <_exit>

00010ce0 <memcmp>:
   10ce0:	01c000c4 	movi	r7,3
   10ce4:	3980192e 	bgeu	r7,r6,10d4c <memcmp+0x6c>
   10ce8:	2144b03a 	or	r2,r4,r5
   10cec:	11c4703a 	and	r2,r2,r7
   10cf0:	10000f26 	beq	r2,zero,10d30 <memcmp+0x50>
   10cf4:	20800003 	ldbu	r2,0(r4)
   10cf8:	28c00003 	ldbu	r3,0(r5)
   10cfc:	10c0151e 	bne	r2,r3,10d54 <memcmp+0x74>
   10d00:	31bfff84 	addi	r6,r6,-2
   10d04:	01ffffc4 	movi	r7,-1
   10d08:	00000406 	br	10d1c <memcmp+0x3c>
   10d0c:	20800003 	ldbu	r2,0(r4)
   10d10:	28c00003 	ldbu	r3,0(r5)
   10d14:	31bfffc4 	addi	r6,r6,-1
   10d18:	10c00e1e 	bne	r2,r3,10d54 <memcmp+0x74>
   10d1c:	21000044 	addi	r4,r4,1
   10d20:	29400044 	addi	r5,r5,1
   10d24:	31fff91e 	bne	r6,r7,10d0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d0c>
   10d28:	0005883a 	mov	r2,zero
   10d2c:	f800283a 	ret
   10d30:	20c00017 	ldw	r3,0(r4)
   10d34:	28800017 	ldw	r2,0(r5)
   10d38:	18bfee1e 	bne	r3,r2,10cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010cf4>
   10d3c:	31bfff04 	addi	r6,r6,-4
   10d40:	21000104 	addi	r4,r4,4
   10d44:	29400104 	addi	r5,r5,4
   10d48:	39bff936 	bltu	r7,r6,10d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d30>
   10d4c:	303fe91e 	bne	r6,zero,10cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010cf4>
   10d50:	003ff506 	br	10d28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d28>
   10d54:	10c5c83a 	sub	r2,r2,r3
   10d58:	f800283a 	ret

00010d5c <__register_exitproc>:
   10d5c:	defffa04 	addi	sp,sp,-24
   10d60:	dc000315 	stw	r16,12(sp)
   10d64:	04000074 	movhi	r16,1
   10d68:	840c4304 	addi	r16,r16,12556
   10d6c:	80c00017 	ldw	r3,0(r16)
   10d70:	dc400415 	stw	r17,16(sp)
   10d74:	dfc00515 	stw	ra,20(sp)
   10d78:	18805217 	ldw	r2,328(r3)
   10d7c:	2023883a 	mov	r17,r4
   10d80:	10003726 	beq	r2,zero,10e60 <__register_exitproc+0x104>
   10d84:	10c00117 	ldw	r3,4(r2)
   10d88:	010007c4 	movi	r4,31
   10d8c:	20c00e16 	blt	r4,r3,10dc8 <__register_exitproc+0x6c>
   10d90:	1a000044 	addi	r8,r3,1
   10d94:	8800221e 	bne	r17,zero,10e20 <__register_exitproc+0xc4>
   10d98:	18c00084 	addi	r3,r3,2
   10d9c:	18c7883a 	add	r3,r3,r3
   10da0:	18c7883a 	add	r3,r3,r3
   10da4:	12000115 	stw	r8,4(r2)
   10da8:	10c7883a 	add	r3,r2,r3
   10dac:	19400015 	stw	r5,0(r3)
   10db0:	0005883a 	mov	r2,zero
   10db4:	dfc00517 	ldw	ra,20(sp)
   10db8:	dc400417 	ldw	r17,16(sp)
   10dbc:	dc000317 	ldw	r16,12(sp)
   10dc0:	dec00604 	addi	sp,sp,24
   10dc4:	f800283a 	ret
   10dc8:	00800034 	movhi	r2,0
   10dcc:	10800004 	addi	r2,r2,0
   10dd0:	10002626 	beq	r2,zero,10e6c <__register_exitproc+0x110>
   10dd4:	01006404 	movi	r4,400
   10dd8:	d9400015 	stw	r5,0(sp)
   10ddc:	d9800115 	stw	r6,4(sp)
   10de0:	d9c00215 	stw	r7,8(sp)
   10de4:	00000000 	call	0 <__reset>
   10de8:	d9400017 	ldw	r5,0(sp)
   10dec:	d9800117 	ldw	r6,4(sp)
   10df0:	d9c00217 	ldw	r7,8(sp)
   10df4:	10001d26 	beq	r2,zero,10e6c <__register_exitproc+0x110>
   10df8:	81000017 	ldw	r4,0(r16)
   10dfc:	10000115 	stw	zero,4(r2)
   10e00:	02000044 	movi	r8,1
   10e04:	22405217 	ldw	r9,328(r4)
   10e08:	0007883a 	mov	r3,zero
   10e0c:	12400015 	stw	r9,0(r2)
   10e10:	20805215 	stw	r2,328(r4)
   10e14:	10006215 	stw	zero,392(r2)
   10e18:	10006315 	stw	zero,396(r2)
   10e1c:	883fde26 	beq	r17,zero,10d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d98>
   10e20:	18c9883a 	add	r4,r3,r3
   10e24:	2109883a 	add	r4,r4,r4
   10e28:	1109883a 	add	r4,r2,r4
   10e2c:	21802215 	stw	r6,136(r4)
   10e30:	01800044 	movi	r6,1
   10e34:	12406217 	ldw	r9,392(r2)
   10e38:	30cc983a 	sll	r6,r6,r3
   10e3c:	4992b03a 	or	r9,r9,r6
   10e40:	12406215 	stw	r9,392(r2)
   10e44:	21c04215 	stw	r7,264(r4)
   10e48:	01000084 	movi	r4,2
   10e4c:	893fd21e 	bne	r17,r4,10d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d98>
   10e50:	11006317 	ldw	r4,396(r2)
   10e54:	218cb03a 	or	r6,r4,r6
   10e58:	11806315 	stw	r6,396(r2)
   10e5c:	003fce06 	br	10d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d98>
   10e60:	18805304 	addi	r2,r3,332
   10e64:	18805215 	stw	r2,328(r3)
   10e68:	003fc606 	br	10d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d84>
   10e6c:	00bfffc4 	movi	r2,-1
   10e70:	003fd006 	br	10db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010db4>

00010e74 <__call_exitprocs>:
   10e74:	defff504 	addi	sp,sp,-44
   10e78:	df000915 	stw	fp,36(sp)
   10e7c:	dd400615 	stw	r21,24(sp)
   10e80:	dc800315 	stw	r18,12(sp)
   10e84:	dfc00a15 	stw	ra,40(sp)
   10e88:	ddc00815 	stw	r23,32(sp)
   10e8c:	dd800715 	stw	r22,28(sp)
   10e90:	dd000515 	stw	r20,20(sp)
   10e94:	dcc00415 	stw	r19,16(sp)
   10e98:	dc400215 	stw	r17,8(sp)
   10e9c:	dc000115 	stw	r16,4(sp)
   10ea0:	d9000015 	stw	r4,0(sp)
   10ea4:	2839883a 	mov	fp,r5
   10ea8:	04800044 	movi	r18,1
   10eac:	057fffc4 	movi	r21,-1
   10eb0:	00800074 	movhi	r2,1
   10eb4:	108c4304 	addi	r2,r2,12556
   10eb8:	12000017 	ldw	r8,0(r2)
   10ebc:	45005217 	ldw	r20,328(r8)
   10ec0:	44c05204 	addi	r19,r8,328
   10ec4:	a0001c26 	beq	r20,zero,10f38 <__call_exitprocs+0xc4>
   10ec8:	a0800117 	ldw	r2,4(r20)
   10ecc:	15ffffc4 	addi	r23,r2,-1
   10ed0:	b8000d16 	blt	r23,zero,10f08 <__call_exitprocs+0x94>
   10ed4:	14000044 	addi	r16,r2,1
   10ed8:	8421883a 	add	r16,r16,r16
   10edc:	8421883a 	add	r16,r16,r16
   10ee0:	84402004 	addi	r17,r16,128
   10ee4:	a463883a 	add	r17,r20,r17
   10ee8:	a421883a 	add	r16,r20,r16
   10eec:	e0001e26 	beq	fp,zero,10f68 <__call_exitprocs+0xf4>
   10ef0:	80804017 	ldw	r2,256(r16)
   10ef4:	e0801c26 	beq	fp,r2,10f68 <__call_exitprocs+0xf4>
   10ef8:	bdffffc4 	addi	r23,r23,-1
   10efc:	843fff04 	addi	r16,r16,-4
   10f00:	8c7fff04 	addi	r17,r17,-4
   10f04:	bd7ff91e 	bne	r23,r21,10eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eec>
   10f08:	00800034 	movhi	r2,0
   10f0c:	10800004 	addi	r2,r2,0
   10f10:	10000926 	beq	r2,zero,10f38 <__call_exitprocs+0xc4>
   10f14:	a0800117 	ldw	r2,4(r20)
   10f18:	1000301e 	bne	r2,zero,10fdc <__call_exitprocs+0x168>
   10f1c:	a0800017 	ldw	r2,0(r20)
   10f20:	10003226 	beq	r2,zero,10fec <__call_exitprocs+0x178>
   10f24:	a009883a 	mov	r4,r20
   10f28:	98800015 	stw	r2,0(r19)
   10f2c:	00000000 	call	0 <__reset>
   10f30:	9d000017 	ldw	r20,0(r19)
   10f34:	a03fe41e 	bne	r20,zero,10ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ec8>
   10f38:	dfc00a17 	ldw	ra,40(sp)
   10f3c:	df000917 	ldw	fp,36(sp)
   10f40:	ddc00817 	ldw	r23,32(sp)
   10f44:	dd800717 	ldw	r22,28(sp)
   10f48:	dd400617 	ldw	r21,24(sp)
   10f4c:	dd000517 	ldw	r20,20(sp)
   10f50:	dcc00417 	ldw	r19,16(sp)
   10f54:	dc800317 	ldw	r18,12(sp)
   10f58:	dc400217 	ldw	r17,8(sp)
   10f5c:	dc000117 	ldw	r16,4(sp)
   10f60:	dec00b04 	addi	sp,sp,44
   10f64:	f800283a 	ret
   10f68:	a0800117 	ldw	r2,4(r20)
   10f6c:	80c00017 	ldw	r3,0(r16)
   10f70:	10bfffc4 	addi	r2,r2,-1
   10f74:	15c01426 	beq	r2,r23,10fc8 <__call_exitprocs+0x154>
   10f78:	80000015 	stw	zero,0(r16)
   10f7c:	183fde26 	beq	r3,zero,10ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ef8>
   10f80:	95c8983a 	sll	r4,r18,r23
   10f84:	a0806217 	ldw	r2,392(r20)
   10f88:	a5800117 	ldw	r22,4(r20)
   10f8c:	2084703a 	and	r2,r4,r2
   10f90:	10000b26 	beq	r2,zero,10fc0 <__call_exitprocs+0x14c>
   10f94:	a0806317 	ldw	r2,396(r20)
   10f98:	2088703a 	and	r4,r4,r2
   10f9c:	20000c1e 	bne	r4,zero,10fd0 <__call_exitprocs+0x15c>
   10fa0:	89400017 	ldw	r5,0(r17)
   10fa4:	d9000017 	ldw	r4,0(sp)
   10fa8:	183ee83a 	callr	r3
   10fac:	a0800117 	ldw	r2,4(r20)
   10fb0:	15bfbf1e 	bne	r2,r22,10eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eb0>
   10fb4:	98800017 	ldw	r2,0(r19)
   10fb8:	153fcf26 	beq	r2,r20,10ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ef8>
   10fbc:	003fbc06 	br	10eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eb0>
   10fc0:	183ee83a 	callr	r3
   10fc4:	003ff906 	br	10fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fac>
   10fc8:	a5c00115 	stw	r23,4(r20)
   10fcc:	003feb06 	br	10f7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f7c>
   10fd0:	89000017 	ldw	r4,0(r17)
   10fd4:	183ee83a 	callr	r3
   10fd8:	003ff406 	br	10fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fac>
   10fdc:	a0800017 	ldw	r2,0(r20)
   10fe0:	a027883a 	mov	r19,r20
   10fe4:	1029883a 	mov	r20,r2
   10fe8:	003fb606 	br	10ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ec4>
   10fec:	0005883a 	mov	r2,zero
   10ff0:	003ffb06 	br	10fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fe0>

00010ff4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10ff4:	defffd04 	addi	sp,sp,-12
   10ff8:	df000215 	stw	fp,8(sp)
   10ffc:	df000204 	addi	fp,sp,8
   11000:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11004:	d027d245 	stb	zero,-24759(gp)
   11008:	e0bfff17 	ldw	r2,-4(fp)
   1100c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11010:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11014:	10000226 	beq	r2,zero,11020 <_exit+0x2c>
    ALT_SIM_FAIL();
   11018:	002af070 	cmpltui	zero,zero,43969
   1101c:	00000106 	br	11024 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11020:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11024:	003fff06 	br	11024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011024>
